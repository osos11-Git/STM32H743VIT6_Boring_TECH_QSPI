
H743_QSPI_deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008be8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08008e88  08008e88  00018e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800938c  0800938c  0001938c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009390  08009390  00019390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e8  24000000  08009394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000090  240001e8  0800957c  000201e8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000278  0800957c  00020278  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
  9 .debug_info   00016e2e  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002bf4  00000000  00000000  00037044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a30  00000000  00000000  00039c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000928  00000000  00000000  0003a668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000364a0  00000000  00000000  0003af90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c7a5  00000000  00000000  00071430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001518ef  00000000  00000000  0007dbd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001cf4c4  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003b1c  00000000  00000000  001cf518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008e70 	.word	0x08008e70

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	08008e70 	.word	0x08008e70

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_d2lz>:
 8000708:	b508      	push	{r3, lr}
 800070a:	4602      	mov	r2, r0
 800070c:	460b      	mov	r3, r1
 800070e:	ec43 2b17 	vmov	d7, r2, r3
 8000712:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	d403      	bmi.n	8000724 <__aeabi_d2lz+0x1c>
 800071c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000720:	f000 b80a 	b.w	8000738 <__aeabi_d2ulz>
 8000724:	eeb1 7b47 	vneg.f64	d7, d7
 8000728:	ec51 0b17 	vmov	r0, r1, d7
 800072c:	f000 f804 	bl	8000738 <__aeabi_d2ulz>
 8000730:	4240      	negs	r0, r0
 8000732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000736:	bd08      	pop	{r3, pc}

08000738 <__aeabi_d2ulz>:
 8000738:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000768 <__aeabi_d2ulz+0x30>
 800073c:	ec41 0b17 	vmov	d7, r0, r1
 8000740:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000770 <__aeabi_d2ulz+0x38>
 8000744:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000748:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800074c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000750:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000754:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000758:	ee16 1a10 	vmov	r1, s12
 800075c:	ee17 0a90 	vmov	r0, s15
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	f3af 8000 	nop.w
 8000768:	00000000 	.word	0x00000000
 800076c:	3df00000 	.word	0x3df00000
 8000770:	00000000 	.word	0x00000000
 8000774:	41f00000 	.word	0x41f00000

08000778 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000778:	b480      	push	{r7}
 800077a:	b087      	sub	sp, #28
 800077c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800077e:	4b28      	ldr	r3, [pc, #160]	; (8000820 <MX_GPIO_Init+0xa8>)
 8000780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000784:	4a26      	ldr	r2, [pc, #152]	; (8000820 <MX_GPIO_Init+0xa8>)
 8000786:	f043 0310 	orr.w	r3, r3, #16
 800078a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078e:	4b24      	ldr	r3, [pc, #144]	; (8000820 <MX_GPIO_Init+0xa8>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000794:	f003 0310 	and.w	r3, r3, #16
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079c:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MX_GPIO_Init+0xa8>)
 800079e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a2:	4a1f      	ldr	r2, [pc, #124]	; (8000820 <MX_GPIO_Init+0xa8>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ac:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_GPIO_Init+0xa8>)
 80007ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_GPIO_Init+0xa8>)
 80007bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c0:	4a17      	ldr	r2, [pc, #92]	; (8000820 <MX_GPIO_Init+0xa8>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_GPIO_Init+0xa8>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_GPIO_Init+0xa8>)
 80007da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007de:	4a10      	ldr	r2, [pc, #64]	; (8000820 <MX_GPIO_Init+0xa8>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <MX_GPIO_Init+0xa8>)
 80007ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_GPIO_Init+0xa8>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	4a08      	ldr	r2, [pc, #32]	; (8000820 <MX_GPIO_Init+0xa8>)
 80007fe:	f043 0308 	orr.w	r3, r3, #8
 8000802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_GPIO_Init+0xa8>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	f003 0308 	and.w	r3, r3, #8
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]

}
 8000814:	bf00      	nop
 8000816:	371c      	adds	r7, #28
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	58024400 	.word	0x58024400

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	; 0x50
 8000828:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800082a:	4b40      	ldr	r3, [pc, #256]	; (800092c <main+0x108>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000832:	2b00      	cmp	r3, #0
 8000834:	d11b      	bne.n	800086e <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000836:	f3bf 8f4f 	dsb	sy
}
 800083a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800083c:	f3bf 8f6f 	isb	sy
}
 8000840:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000842:	4b3a      	ldr	r3, [pc, #232]	; (800092c <main+0x108>)
 8000844:	2200      	movs	r2, #0
 8000846:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800084a:	f3bf 8f4f 	dsb	sy
}
 800084e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000850:	f3bf 8f6f 	isb	sy
}
 8000854:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000856:	4b35      	ldr	r3, [pc, #212]	; (800092c <main+0x108>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	4a34      	ldr	r2, [pc, #208]	; (800092c <main+0x108>)
 800085c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000860:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000862:	f3bf 8f4f 	dsb	sy
}
 8000866:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000868:	f3bf 8f6f 	isb	sy
}
 800086c:	e000      	b.n	8000870 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800086e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000870:	4b2e      	ldr	r3, [pc, #184]	; (800092c <main+0x108>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000878:	2b00      	cmp	r3, #0
 800087a:	d138      	bne.n	80008ee <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800087c:	4b2b      	ldr	r3, [pc, #172]	; (800092c <main+0x108>)
 800087e:	2200      	movs	r2, #0
 8000880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000884:	f3bf 8f4f 	dsb	sy
}
 8000888:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <main+0x108>)
 800088c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000890:	64fb      	str	r3, [r7, #76]	; 0x4c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000894:	0b5b      	lsrs	r3, r3, #13
 8000896:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800089a:	64bb      	str	r3, [r7, #72]	; 0x48
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800089c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800089e:	08db      	lsrs	r3, r3, #3
 80008a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008a4:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008a8:	015a      	lsls	r2, r3, #5
 80008aa:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008ae:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80008b2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008b4:	491d      	ldr	r1, [pc, #116]	; (800092c <main+0x108>)
 80008b6:	4313      	orrs	r3, r2
 80008b8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80008be:	1e5a      	subs	r2, r3, #1
 80008c0:	647a      	str	r2, [r7, #68]	; 0x44
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1ef      	bne.n	80008a6 <main+0x82>
    } while(sets-- != 0U);
 80008c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1e5      	bne.n	800089c <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80008d0:	f3bf 8f4f 	dsb	sy
}
 80008d4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <main+0x108>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a14      	ldr	r2, [pc, #80]	; (800092c <main+0x108>)
 80008dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008e2:	f3bf 8f4f 	dsb	sy
}
 80008e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008e8:	f3bf 8f6f 	isb	sy
}
 80008ec:	e000      	b.n	80008f0 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008ee:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f0:	f000 ffa4 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f4:	f000 f820 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f8:	f7ff ff3e 	bl	8000778 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80008fc:	f000 f89e 	bl	8000a3c <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */

  w25qxx_Init();
 8000900:	f000 fb38 	bl	8000f74 <w25qxx_Init>
  w25qxx_GetID();
 8000904:	f000 fb4a 	bl	8000f9c <w25qxx_GetID>
  W25qxx_Write((uint8_t*)TEXT_Buffer, 0, SIZE);
 8000908:	221b      	movs	r2, #27
 800090a:	2100      	movs	r1, #0
 800090c:	4808      	ldr	r0, [pc, #32]	; (8000930 <main+0x10c>)
 800090e:	f000 fd33 	bl	8001378 <W25qxx_Write>
  W25qxx_Write((uint8_t*)TEXT_Buffer2, SIZE+1, SIZE2);
 8000912:	2224      	movs	r2, #36	; 0x24
 8000914:	211c      	movs	r1, #28
 8000916:	4807      	ldr	r0, [pc, #28]	; (8000934 <main+0x110>)
 8000918:	f000 fd2e 	bl	8001378 <W25qxx_Write>
  W25qxx_Read(datatemp, 0, SIZE+SIZE2+1);
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2240      	movs	r2, #64	; 0x40
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fc98 	bl	8001258 <W25qxx_Read>
 // W25QXX_Read(datatemp,flash_size-100,SIZE);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000928:	e7fe      	b.n	8000928 <main+0x104>
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00
 8000930:	08008e88 	.word	0x08008e88
 8000934:	08008ea4 	.word	0x08008ea4

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09c      	sub	sp, #112	; 0x70
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000942:	224c      	movs	r2, #76	; 0x4c
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f003 ff36 	bl	80047b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2220      	movs	r2, #32
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f003 ff30 	bl	80047b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000958:	2002      	movs	r0, #2
 800095a:	f001 faa1 	bl	8001ea0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b31      	ldr	r3, [pc, #196]	; (8000a28 <SystemClock_Config+0xf0>)
 8000964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000966:	4a30      	ldr	r2, [pc, #192]	; (8000a28 <SystemClock_Config+0xf0>)
 8000968:	f023 0301 	bic.w	r3, r3, #1
 800096c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800096e:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <SystemClock_Config+0xf0>)
 8000970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <SystemClock_Config+0xf4>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000980:	4a2a      	ldr	r2, [pc, #168]	; (8000a2c <SystemClock_Config+0xf4>)
 8000982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <SystemClock_Config+0xf4>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000994:	bf00      	nop
 8000996:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <SystemClock_Config+0xf4>)
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800099e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009a2:	d1f8      	bne.n	8000996 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a4:	2301      	movs	r3, #1
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ae:	2302      	movs	r3, #2
 80009b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b2:	2302      	movs	r3, #2
 80009b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80009b6:	2305      	movs	r3, #5
 80009b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 260;
 80009ba:	f44f 7382 	mov.w	r3, #260	; 0x104
 80009be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fedd 	bl	800279c <HAL_RCC_OscConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80009e8:	f000 f822 	bl	8000a30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ec:	233f      	movs	r3, #63	; 0x3f
 80009ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f0:	2303      	movs	r3, #3
 80009f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009f8:	2308      	movs	r3, #8
 80009fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2101      	movs	r1, #1
 8000a10:	4618      	mov	r0, r3
 8000a12:	f002 fad3 	bl	8002fbc <HAL_RCC_ClockConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000a1c:	f000 f808 	bl	8000a30 <Error_Handler>
  }
}
 8000a20:	bf00      	nop
 8000a22:	3770      	adds	r7, #112	; 0x70
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	58000400 	.word	0x58000400
 8000a2c:	58024800 	.word	0x58024800

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>
	...

08000a3c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <MX_QUADSPI_Init+0x50>)
 8000a42:	4a13      	ldr	r2, [pc, #76]	; (8000a90 <MX_QUADSPI_Init+0x54>)
 8000a44:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_QUADSPI_Init+0x50>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_QUADSPI_Init+0x50>)
 8000a4e:	2204      	movs	r2, #4
 8000a50:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_QUADSPI_Init+0x50>)
 8000a54:	2210      	movs	r2, #16
 8000a56:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_QUADSPI_Init+0x50>)
 8000a5a:	2216      	movs	r2, #22
 8000a5c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_QUADSPI_Init+0x50>)
 8000a60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a64:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_QUADSPI_Init+0x50>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <MX_QUADSPI_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_QUADSPI_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_QUADSPI_Init+0x50>)
 8000a7a:	f001 fa4b 	bl	8001f14 <HAL_QSPI_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000a84:	f7ff ffd4 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	24000210 	.word	0x24000210
 8000a90:	52005000 	.word	0x52005000

08000a94 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b0bc      	sub	sp, #240	; 0xf0
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aac:	f107 0320 	add.w	r3, r7, #32
 8000ab0:	22bc      	movs	r2, #188	; 0xbc
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 fe7f 	bl	80047b8 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a5c      	ldr	r2, [pc, #368]	; (8000c30 <HAL_QSPI_MspInit+0x19c>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	f040 80b0 	bne.w	8000c26 <HAL_QSPI_MspInit+0x192>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000aca:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000acc:	2300      	movs	r3, #0
 8000ace:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ad0:	f107 0320 	add.w	r3, r7, #32
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f002 fda1 	bl	800361c <HAL_RCCEx_PeriphCLKConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8000ae0:	f7ff ffa6 	bl	8000a30 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000ae4:	4b53      	ldr	r3, [pc, #332]	; (8000c34 <HAL_QSPI_MspInit+0x1a0>)
 8000ae6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000aea:	4a52      	ldr	r2, [pc, #328]	; (8000c34 <HAL_QSPI_MspInit+0x1a0>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000af4:	4b4f      	ldr	r3, [pc, #316]	; (8000c34 <HAL_QSPI_MspInit+0x1a0>)
 8000af6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afe:	61fb      	str	r3, [r7, #28]
 8000b00:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b02:	4b4c      	ldr	r3, [pc, #304]	; (8000c34 <HAL_QSPI_MspInit+0x1a0>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b08:	4a4a      	ldr	r2, [pc, #296]	; (8000c34 <HAL_QSPI_MspInit+0x1a0>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b12:	4b48      	ldr	r3, [pc, #288]	; (8000c34 <HAL_QSPI_MspInit+0x1a0>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	f003 0310 	and.w	r3, r3, #16
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	4b44      	ldr	r3, [pc, #272]	; (8000c34 <HAL_QSPI_MspInit+0x1a0>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b26:	4a43      	ldr	r2, [pc, #268]	; (8000c34 <HAL_QSPI_MspInit+0x1a0>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b30:	4b40      	ldr	r3, [pc, #256]	; (8000c34 <HAL_QSPI_MspInit+0x1a0>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	4b3d      	ldr	r3, [pc, #244]	; (8000c34 <HAL_QSPI_MspInit+0x1a0>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	4a3b      	ldr	r2, [pc, #236]	; (8000c34 <HAL_QSPI_MspInit+0x1a0>)
 8000b46:	f043 0302 	orr.w	r3, r3, #2
 8000b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4e:	4b39      	ldr	r3, [pc, #228]	; (8000c34 <HAL_QSPI_MspInit+0x1a0>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5c:	4b35      	ldr	r3, [pc, #212]	; (8000c34 <HAL_QSPI_MspInit+0x1a0>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	4a34      	ldr	r2, [pc, #208]	; (8000c34 <HAL_QSPI_MspInit+0x1a0>)
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6c:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <HAL_QSPI_MspInit+0x1a0>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b72:	f003 0308 	and.w	r3, r3, #8
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PB10     ------> QUADSPI_BK1_NCS
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b92:	2309      	movs	r3, #9
 8000b94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4826      	ldr	r0, [pc, #152]	; (8000c38 <HAL_QSPI_MspInit+0x1a4>)
 8000ba0:	f000 ffce 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000bbc:	2309      	movs	r3, #9
 8000bbe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	481c      	ldr	r0, [pc, #112]	; (8000c3c <HAL_QSPI_MspInit+0x1a8>)
 8000bca:	f000 ffb9 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000bce:	f240 4304 	movw	r3, #1028	; 0x404
 8000bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000be8:	2309      	movs	r3, #9
 8000bea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4812      	ldr	r0, [pc, #72]	; (8000c40 <HAL_QSPI_MspInit+0x1ac>)
 8000bf6:	f000 ffa3 	bl	8001b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bfa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000c14:	2309      	movs	r3, #9
 8000c16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4808      	ldr	r0, [pc, #32]	; (8000c44 <HAL_QSPI_MspInit+0x1b0>)
 8000c22:	f000 ff8d 	bl	8001b40 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000c26:	bf00      	nop
 8000c28:	37f0      	adds	r7, #240	; 0xf0
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	52005000 	.word	0x52005000
 8000c34:	58024400 	.word	0x58024400
 8000c38:	58021000 	.word	0x58021000
 8000c3c:	58020000 	.word	0x58020000
 8000c40:	58020400 	.word	0x58020400
 8000c44:	58020c00 	.word	0x58020c00

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_MspInit+0x30>)
 8000c50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c54:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_MspInit+0x30>)
 8000c56:	f043 0302 	orr.w	r3, r3, #2
 8000c5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_MspInit+0x30>)
 8000c60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	58024400 	.word	0x58024400

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 fe2a 	bl	8001920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
	return 1;
 8000cd4:	2301      	movs	r3, #1
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <_kill>:

int _kill(int pid, int sig)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cea:	f003 fd3b 	bl	8004764 <__errno>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2216      	movs	r2, #22
 8000cf2:	601a      	str	r2, [r3, #0]
	return -1;
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <_exit>:

void _exit (int status)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff ffe7 	bl	8000ce0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d12:	e7fe      	b.n	8000d12 <_exit+0x12>

08000d14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	e00a      	b.n	8000d3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d26:	f3af 8000 	nop.w
 8000d2a:	4601      	mov	r1, r0
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	1c5a      	adds	r2, r3, #1
 8000d30:	60ba      	str	r2, [r7, #8]
 8000d32:	b2ca      	uxtb	r2, r1
 8000d34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	dbf0      	blt.n	8000d26 <_read+0x12>
	}

return len;
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	e009      	b.n	8000d74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	60ba      	str	r2, [r7, #8]
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	3301      	adds	r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	697a      	ldr	r2, [r7, #20]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	dbf1      	blt.n	8000d60 <_write+0x12>
	}
	return len;
 8000d7c:	687b      	ldr	r3, [r7, #4]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <_close>:

int _close(int file)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	b083      	sub	sp, #12
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dae:	605a      	str	r2, [r3, #4]
	return 0;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <_isatty>:

int _isatty(int file)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
	return 1;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
	return 0;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
	...

08000df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <_sbrk+0x5c>)
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <_sbrk+0x60>)
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <_sbrk+0x64>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <_sbrk+0x68>)
 8000e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d207      	bcs.n	8000e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e20:	f003 fca0 	bl	8004764 <__errno>
 8000e24:	4603      	mov	r3, r0
 8000e26:	220c      	movs	r2, #12
 8000e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	e009      	b.n	8000e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <_sbrk+0x64>)
 8000e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	24080000 	.word	0x24080000
 8000e50:	00000400 	.word	0x00000400
 8000e54:	24000204 	.word	0x24000204
 8000e58:	24000278 	.word	0x24000278

08000e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e60:	4b39      	ldr	r3, [pc, #228]	; (8000f48 <SystemInit+0xec>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e66:	4a38      	ldr	r2, [pc, #224]	; (8000f48 <SystemInit+0xec>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e70:	4b36      	ldr	r3, [pc, #216]	; (8000f4c <SystemInit+0xf0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 030f 	and.w	r3, r3, #15
 8000e78:	2b06      	cmp	r3, #6
 8000e7a:	d807      	bhi.n	8000e8c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e7c:	4b33      	ldr	r3, [pc, #204]	; (8000f4c <SystemInit+0xf0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f023 030f 	bic.w	r3, r3, #15
 8000e84:	4a31      	ldr	r2, [pc, #196]	; (8000f4c <SystemInit+0xf0>)
 8000e86:	f043 0307 	orr.w	r3, r3, #7
 8000e8a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e8c:	4b30      	ldr	r3, [pc, #192]	; (8000f50 <SystemInit+0xf4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a2f      	ldr	r2, [pc, #188]	; (8000f50 <SystemInit+0xf4>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e98:	4b2d      	ldr	r3, [pc, #180]	; (8000f50 <SystemInit+0xf4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e9e:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <SystemInit+0xf4>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	492b      	ldr	r1, [pc, #172]	; (8000f50 <SystemInit+0xf4>)
 8000ea4:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <SystemInit+0xf8>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eaa:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <SystemInit+0xf0>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d007      	beq.n	8000ec6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eb6:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <SystemInit+0xf0>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f023 030f 	bic.w	r3, r3, #15
 8000ebe:	4a23      	ldr	r2, [pc, #140]	; (8000f4c <SystemInit+0xf0>)
 8000ec0:	f043 0307 	orr.w	r3, r3, #7
 8000ec4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ec6:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <SystemInit+0xf4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ecc:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <SystemInit+0xf4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ed2:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <SystemInit+0xf4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <SystemInit+0xf4>)
 8000eda:	4a1f      	ldr	r2, [pc, #124]	; (8000f58 <SystemInit+0xfc>)
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <SystemInit+0xf4>)
 8000ee0:	4a1e      	ldr	r2, [pc, #120]	; (8000f5c <SystemInit+0x100>)
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <SystemInit+0xf4>)
 8000ee6:	4a1e      	ldr	r2, [pc, #120]	; (8000f60 <SystemInit+0x104>)
 8000ee8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <SystemInit+0xf4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <SystemInit+0xf4>)
 8000ef2:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <SystemInit+0x104>)
 8000ef4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <SystemInit+0xf4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <SystemInit+0xf4>)
 8000efe:	4a18      	ldr	r2, [pc, #96]	; (8000f60 <SystemInit+0x104>)
 8000f00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <SystemInit+0xf4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <SystemInit+0xf4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a10      	ldr	r2, [pc, #64]	; (8000f50 <SystemInit+0xf4>)
 8000f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <SystemInit+0xf4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <SystemInit+0x108>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <SystemInit+0x10c>)
 8000f20:	4013      	ands	r3, r2
 8000f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f26:	d202      	bcs.n	8000f2e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <SystemInit+0x110>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <SystemInit+0x114>)
 8000f30:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f34:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <SystemInit+0xec>)
 8000f38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f3c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00
 8000f4c:	52002000 	.word	0x52002000
 8000f50:	58024400 	.word	0x58024400
 8000f54:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f58:	02020200 	.word	0x02020200
 8000f5c:	01ff0000 	.word	0x01ff0000
 8000f60:	01010280 	.word	0x01010280
 8000f64:	5c001000 	.word	0x5c001000
 8000f68:	ffff0000 	.word	0xffff0000
 8000f6c:	51008108 	.word	0x51008108
 8000f70:	52004000 	.word	0x52004000

08000f74 <w25qxx_Init>:
w25qxx_StatusTypeDef w25qxx_Mode = w25qxx_SPIMode;
uint8_t w25qxx_StatusReg[3];
uint16_t w25qxx_ID;

void w25qxx_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
//	HAL_Delay(5);
//	MX_QUADSPI_Init();
	QSPI_ResetDevice(&hqspi);
 8000f78:	4806      	ldr	r0, [pc, #24]	; (8000f94 <w25qxx_Init+0x20>)
 8000f7a:	f000 fb4b 	bl	8001614 <QSPI_ResetDevice>
//	HAL_Delay(0); // 1ms wait device stable
	w25qxx_ID = w25qxx_GetID();
 8000f7e:	f000 f80d 	bl	8000f9c <w25qxx_GetID>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <w25qxx_Init+0x24>)
 8000f88:	801a      	strh	r2, [r3, #0]
	w25qxx_ReadAllStatusReg();
 8000f8a:	f000 f897 	bl	80010bc <w25qxx_ReadAllStatusReg>
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	24000210 	.word	0x24000210
 8000f98:	2400025c 	.word	0x2400025c

08000f9c <w25qxx_GetID>:

uint16_t w25qxx_GetID(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af06      	add	r7, sp, #24
	uint8_t ID[6];
	uint16_t deviceID;
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 8000fa2:	4b23      	ldr	r3, [pc, #140]	; (8001030 <w25qxx_GetID+0x94>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b05      	cmp	r3, #5
 8000fa8:	d114      	bne.n	8000fd4 <w25qxx_GetID+0x38>
		QSPI_Send_CMD(&hqspi,W25X_QUAD_ManufactDeviceID,0x00,QSPI_ADDRESS_24_BITS,6,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_4_LINES, QSPI_DATA_4_LINES, sizeof(ID));
 8000faa:	2306      	movs	r3, #6
 8000fac:	9304      	str	r3, [sp, #16]
 8000fae:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000fb2:	9303      	str	r3, [sp, #12]
 8000fb4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fb8:	9302      	str	r3, [sp, #8]
 8000fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	2306      	movs	r3, #6
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2194      	movs	r1, #148	; 0x94
 8000fcc:	4819      	ldr	r0, [pc, #100]	; (8001034 <w25qxx_GetID+0x98>)
 8000fce:	f000 fb7a 	bl	80016c6 <QSPI_Send_CMD>
 8000fd2:	e013      	b.n	8000ffc <w25qxx_GetID+0x60>
	else
		QSPI_Send_CMD(&hqspi,W25X_ManufactDeviceID,0x00,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES, QSPI_DATA_4_LINES, sizeof(ID));
 8000fd4:	2306      	movs	r3, #6
 8000fd6:	9304      	str	r3, [sp, #16]
 8000fd8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000fdc:	9303      	str	r3, [sp, #12]
 8000fde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	2300      	movs	r3, #0
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2190      	movs	r1, #144	; 0x90
 8000ff6:	480f      	ldr	r0, [pc, #60]	; (8001034 <w25qxx_GetID+0x98>)
 8000ff8:	f000 fb65 	bl	80016c6 <QSPI_Send_CMD>

	/* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, ID, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001002:	4619      	mov	r1, r3
 8001004:	480b      	ldr	r0, [pc, #44]	; (8001034 <w25qxx_GetID+0x98>)
 8001006:	f001 f8e9 	bl	80021dc <HAL_QSPI_Receive>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <w25qxx_GetID+0x78>
  {
    return w25qxx_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e008      	b.n	8001026 <w25qxx_GetID+0x8a>
  }
	deviceID = (ID[0] << 8) | ID[1];
 8001014:	783b      	ldrb	r3, [r7, #0]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	787b      	ldrb	r3, [r7, #1]
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b21b      	sxth	r3, r3
 8001022:	80fb      	strh	r3, [r7, #6]

	return deviceID;
 8001024:	88fb      	ldrh	r3, [r7, #6]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	24000008 	.word	0x24000008
 8001034:	24000210 	.word	0x24000210

08001038 <w25qxx_ReadSR>:

uint8_t w25qxx_ReadSR(uint8_t SR)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af06      	add	r7, sp, #24
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	uint8_t byte=0;
 8001042:	2300      	movs	r3, #0
 8001044:	73fb      	strb	r3, [r7, #15]
	if(w25qxx_Mode == w25qxx_SPIMode)
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <w25qxx_ReadSR+0x7c>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b05      	cmp	r3, #5
 800104c:	d112      	bne.n	8001074 <w25qxx_ReadSR+0x3c>
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_NONE, QSPI_DATA_1_LINE, 1);
 800104e:	79f9      	ldrb	r1, [r7, #7]
 8001050:	2301      	movs	r3, #1
 8001052:	9304      	str	r3, [sp, #16]
 8001054:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001058:	9303      	str	r3, [sp, #12]
 800105a:	2300      	movs	r3, #0
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	2300      	movs	r3, #0
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2300      	movs	r3, #0
 800106a:	2200      	movs	r2, #0
 800106c:	4812      	ldr	r0, [pc, #72]	; (80010b8 <w25qxx_ReadSR+0x80>)
 800106e:	f000 fb2a 	bl	80016c6 <QSPI_Send_CMD>
 8001072:	e011      	b.n	8001098 <w25qxx_ReadSR+0x60>
	else
		QSPI_Send_CMD(&hqspi,SR,0x00,QSPI_ADDRESS_8_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_NONE, QSPI_DATA_4_LINES, 1);
 8001074:	79f9      	ldrb	r1, [r7, #7]
 8001076:	2301      	movs	r3, #1
 8001078:	9304      	str	r3, [sp, #16]
 800107a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800107e:	9303      	str	r3, [sp, #12]
 8001080:	2300      	movs	r3, #0
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	2300      	movs	r3, #0
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2300      	movs	r3, #0
 8001090:	2200      	movs	r2, #0
 8001092:	4809      	ldr	r0, [pc, #36]	; (80010b8 <w25qxx_ReadSR+0x80>)
 8001094:	f000 fb17 	bl	80016c6 <QSPI_Send_CMD>
	
	if (HAL_QSPI_Receive(&hqspi,&byte,HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001098:	f107 030f 	add.w	r3, r7, #15
 800109c:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a0:	4619      	mov	r1, r3
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <w25qxx_ReadSR+0x80>)
 80010a4:	f001 f89a 	bl	80021dc <HAL_QSPI_Receive>
	{
		
	}
  return byte;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	24000008 	.word	0x24000008
 80010b8:	24000210 	.word	0x24000210

080010bc <w25qxx_ReadAllStatusReg>:

  return HAL_QSPI_Transmit(&hqspi,&data,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
}

uint8_t w25qxx_ReadAllStatusReg(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	
	w25qxx_StatusReg[0] = w25qxx_ReadSR(W25X_ReadStatusReg1);
 80010c0:	2005      	movs	r0, #5
 80010c2:	f7ff ffb9 	bl	8001038 <w25qxx_ReadSR>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <w25qxx_ReadAllStatusReg+0x34>)
 80010cc:	701a      	strb	r2, [r3, #0]
	w25qxx_StatusReg[1] = w25qxx_ReadSR(W25X_ReadStatusReg2);
 80010ce:	2035      	movs	r0, #53	; 0x35
 80010d0:	f7ff ffb2 	bl	8001038 <w25qxx_ReadSR>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <w25qxx_ReadAllStatusReg+0x34>)
 80010da:	705a      	strb	r2, [r3, #1]
	w25qxx_StatusReg[2] = w25qxx_ReadSR(W25X_ReadStatusReg3);
 80010dc:	2015      	movs	r0, #21
 80010de:	f7ff ffab 	bl	8001038 <w25qxx_ReadSR>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <w25qxx_ReadAllStatusReg+0x34>)
 80010e8:	709a      	strb	r2, [r3, #2]
	return w25qxx_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	24000260 	.word	0x24000260

080010f4 <W25QXX_Wait_Busy>:

//�ȴ�����
void W25QXX_Wait_Busy(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	while((w25qxx_ReadSR(W25X_ReadStatusReg1) & 0x01) == 0x01);
 80010f8:	bf00      	nop
 80010fa:	2005      	movs	r0, #5
 80010fc:	f7ff ff9c 	bl	8001038 <w25qxx_ReadSR>
 8001100:	4603      	mov	r3, r0
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b01      	cmp	r3, #1
 8001108:	d0f7      	beq.n	80010fa <W25QXX_Wait_Busy+0x6>
}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <W25qxx_WriteEnable>:
  }
  return w25qxx_OK;
}

uint8_t W25qxx_WriteEnable(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	return QSPI_WriteEnable(&hqspi);
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <W25qxx_WriteEnable+0x14>)
 8001116:	f000 fb0b 	bl	8001730 <QSPI_WriteEnable>
 800111a:	4603      	mov	r3, r0
 800111c:	b2db      	uxtb	r3, r3
}
 800111e:	4618      	mov	r0, r3
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	24000210 	.word	0x24000210

08001128 <W25qxx_EraseSector>:
  * @brief  Erase 4KB Sector of the OSPI memory.
	* @param  SectorAddress: Sector address to erase
  * @retval QSPI memory status
  */
uint8_t W25qxx_EraseSector(uint32_t SectorAddress)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af06      	add	r7, sp, #24
 800112e:	6078      	str	r0, [r7, #4]
	uint8_t result;
	
	W25qxx_WriteEnable();
 8001130:	f7ff ffee 	bl	8001110 <W25qxx_WriteEnable>
	W25QXX_Wait_Busy();
 8001134:	f7ff ffde 	bl	80010f4 <W25QXX_Wait_Busy>
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <W25qxx_EraseSector+0x84>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b05      	cmp	r3, #5
 800113e:	d115      	bne.n	800116c <W25qxx_EraseSector+0x44>
		result = QSPI_Send_CMD(&hqspi,W25X_SectorErase,SectorAddress,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_DATA_NONE,0);
 8001140:	2300      	movs	r3, #0
 8001142:	9304      	str	r3, [sp, #16]
 8001144:	2300      	movs	r3, #0
 8001146:	9303      	str	r3, [sp, #12]
 8001148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800114c:	9302      	str	r3, [sp, #8]
 800114e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	2300      	movs	r3, #0
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	2120      	movs	r1, #32
 8001160:	4813      	ldr	r0, [pc, #76]	; (80011b0 <W25qxx_EraseSector+0x88>)
 8001162:	f000 fab0 	bl	80016c6 <QSPI_Send_CMD>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	e014      	b.n	8001196 <W25qxx_EraseSector+0x6e>
  else
		result = QSPI_Send_CMD(&hqspi,W25X_SectorErase,SectorAddress,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_DATA_NONE,0);
 800116c:	2300      	movs	r3, #0
 800116e:	9304      	str	r3, [sp, #16]
 8001170:	2300      	movs	r3, #0
 8001172:	9303      	str	r3, [sp, #12]
 8001174:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001178:	9302      	str	r3, [sp, #8]
 800117a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	2300      	movs	r3, #0
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	2120      	movs	r1, #32
 800118c:	4808      	ldr	r0, [pc, #32]	; (80011b0 <W25qxx_EraseSector+0x88>)
 800118e:	f000 fa9a 	bl	80016c6 <QSPI_Send_CMD>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
	
	/* �ȴ�������� */
	if(result == w25qxx_OK)
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <W25qxx_EraseSector+0x78>
		W25QXX_Wait_Busy();
 800119c:	f7ff ffaa 	bl	80010f4 <W25QXX_Wait_Busy>

	return result;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	24000008 	.word	0x24000008
 80011b0:	24000210 	.word	0x24000210

080011b4 <W25qxx_PageProgram>:
  * @param  WriteAddr Write start address
  * @param  Size Size of data to write. Range 1 ~ W25qxx page size
  * @retval QSPI memory status
  */
uint8_t W25qxx_PageProgram(uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08c      	sub	sp, #48	; 0x30
 80011b8:	af06      	add	r7, sp, #24
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
	uint8_t result;
	
	W25qxx_WriteEnable();
 80011c0:	f7ff ffa6 	bl	8001110 <W25qxx_WriteEnable>
	
	if(w25qxx_Mode == w25qxx_SPIMode)
 80011c4:	4b22      	ldr	r3, [pc, #136]	; (8001250 <W25qxx_PageProgram+0x9c>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	d116      	bne.n	80011fa <W25qxx_PageProgram+0x46>
		result = QSPI_Send_CMD(&hqspi,W25X_QUAD_INPUT_PAGE_PROG_CMD,WriteAddr,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_1_LINE,QSPI_ADDRESS_1_LINE,QSPI_DATA_4_LINES,Size);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	9304      	str	r3, [sp, #16]
 80011d0:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80011d4:	9303      	str	r3, [sp, #12]
 80011d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	2300      	movs	r3, #0
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	2132      	movs	r1, #50	; 0x32
 80011ee:	4819      	ldr	r0, [pc, #100]	; (8001254 <W25qxx_PageProgram+0xa0>)
 80011f0:	f000 fa69 	bl	80016c6 <QSPI_Send_CMD>
 80011f4:	4603      	mov	r3, r0
 80011f6:	75fb      	strb	r3, [r7, #23]
 80011f8:	e015      	b.n	8001226 <W25qxx_PageProgram+0x72>
  else
		result = QSPI_Send_CMD(&hqspi,W25X_PageProgram,WriteAddr,QSPI_ADDRESS_24_BITS,0,QSPI_INSTRUCTION_4_LINES,QSPI_ADDRESS_4_LINES,QSPI_DATA_4_LINES,Size);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	9304      	str	r3, [sp, #16]
 80011fe:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001202:	9303      	str	r3, [sp, #12]
 8001204:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001208:	9302      	str	r3, [sp, #8]
 800120a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	2300      	movs	r3, #0
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	2102      	movs	r1, #2
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <W25qxx_PageProgram+0xa0>)
 800121e:	f000 fa52 	bl	80016c6 <QSPI_Send_CMD>
 8001222:	4603      	mov	r3, r0
 8001224:	75fb      	strb	r3, [r7, #23]
	
	if(result == w25qxx_OK)
 8001226:	7dfb      	ldrb	r3, [r7, #23]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d107      	bne.n	800123c <W25qxx_PageProgram+0x88>
		result = HAL_QSPI_Transmit(&hqspi,pData,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 800122c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001230:	68f9      	ldr	r1, [r7, #12]
 8001232:	4808      	ldr	r0, [pc, #32]	; (8001254 <W25qxx_PageProgram+0xa0>)
 8001234:	f000 ff40 	bl	80020b8 <HAL_QSPI_Transmit>
 8001238:	4603      	mov	r3, r0
 800123a:	75fb      	strb	r3, [r7, #23]
	
	/* �ȴ�д����� */
	if(result == w25qxx_OK)
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <W25qxx_PageProgram+0x92>
		W25QXX_Wait_Busy();
 8001242:	f7ff ff57 	bl	80010f4 <W25QXX_Wait_Busy>
	
  return result;
 8001246:	7dfb      	ldrb	r3, [r7, #23]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	24000008 	.word	0x24000008
 8001254:	24000210 	.word	0x24000210

08001258 <W25qxx_Read>:
//��ָ����ַ��ʼ��ȡָ�����ȵ�����
//pBuffer:���ݴ洢��
//ReadAddr:��ʼ��ȡ�ĵ�ַ(���32bit)
//NumByteToRead:Ҫ��ȡ���ֽ���(���65535)
uint8_t W25qxx_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b094      	sub	sp, #80	; 0x50
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
	
	QSPI_CommandTypeDef      s_command;

	/* Configure the command for the read instruction */
	
	if(w25qxx_Mode == w25qxx_QPIMode)
 8001264:	4b25      	ldr	r3, [pc, #148]	; (80012fc <W25qxx_Read+0xa4>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b04      	cmp	r3, #4
 800126a:	d107      	bne.n	800127c <W25qxx_Read+0x24>
	{
		s_command.Instruction     = W25X_QUAD_INOUT_FAST_READ_CMD;
 800126c:	23eb      	movs	r3, #235	; 0xeb
 800126e:	617b      	str	r3, [r7, #20]
		s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001270:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
	  s_command.DummyCycles     = W25X_DUMMY_CYCLES_READ_QUAD;
 8001276:	2306      	movs	r3, #6
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
 800127a:	e006      	b.n	800128a <W25qxx_Read+0x32>
	}
	else 
	{
		s_command.Instruction     = W25X_QUAD_INOUT_FAST_READ_CMD;
 800127c:	23eb      	movs	r3, #235	; 0xeb
 800127e:	617b      	str	r3, [r7, #20]
		s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
		s_command.DummyCycles     = W25X_DUMMY_CYCLES_READ_QUAD-2;
 8001286:	2304      	movs	r3, #4
 8001288:	62bb      	str	r3, [r7, #40]	; 0x28
  }
	
	s_command.Address           = ReadAddr;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	61bb      	str	r3, [r7, #24]
	s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800128e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8001294:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001298:	623b      	str	r3, [r7, #32]

	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 800129a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.AlternateBytes    = 0xFF;
 80012a0:	23ff      	movs	r3, #255	; 0xff
 80012a2:	61fb      	str	r3, [r7, #28]
	s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24

	s_command.DataMode          = QSPI_DATA_4_LINES;	
 80012a8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80012ac:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.NbData            = Size;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		
	s_command.DdrMode         = QSPI_DDR_MODE_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	643b      	str	r3, [r7, #64]	; 0x40

	s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80012b6:	2300      	movs	r3, #0
 80012b8:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80012ba:	2300      	movs	r3, #0
 80012bc:	64bb      	str	r3, [r7, #72]	; 0x48
	
	result = HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012c6:	4619      	mov	r1, r3
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <W25qxx_Read+0xa8>)
 80012ca:	f000 fe97 	bl	8001ffc <HAL_QSPI_Command>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
	if(result == w25qxx_OK)
 80012d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d108      	bne.n	80012ee <W25qxx_Read+0x96>
		result = HAL_QSPI_Receive(&hqspi,pData,HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80012dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e0:	68f9      	ldr	r1, [r7, #12]
 80012e2:	4807      	ldr	r0, [pc, #28]	; (8001300 <W25qxx_Read+0xa8>)
 80012e4:	f000 ff7a 	bl	80021dc <HAL_QSPI_Receive>
 80012e8:	4603      	mov	r3, r0
 80012ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	
	return result;
 80012ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3750      	adds	r7, #80	; 0x50
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	24000008 	.word	0x24000008
 8001300:	24000210 	.word	0x24000210

08001304 <W25qxx_WriteNoCheck>:
//pBuffer:���ݴ洢��
//WriteAddr:��ʼд��ĵ�ַ(���32bit)
//NumByteToWrite:Ҫд����ֽ���(���65535)
//CHECK OK
void W25qxx_WriteNoCheck(uint8_t *pBuffer,uint32_t WriteAddr,uint32_t NumByteToWrite)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
	uint16_t pageremain;	   
	pageremain = 256 - WriteAddr % 256; //��ҳʣ����ֽ���
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	b29b      	uxth	r3, r3
 8001314:	b2db      	uxtb	r3, r3
 8001316:	b29b      	uxth	r3, r3
 8001318:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800131c:	82fb      	strh	r3, [r7, #22]
	if (NumByteToWrite <= pageremain)
 800131e:	8afb      	ldrh	r3, [r7, #22]
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	429a      	cmp	r2, r3
 8001324:	d801      	bhi.n	800132a <W25qxx_WriteNoCheck+0x26>
	{
		pageremain = NumByteToWrite; //������256���ֽ�
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	82fb      	strh	r3, [r7, #22]
	}
	while(1)
	{
		W25qxx_PageProgram(pBuffer, WriteAddr, pageremain);
 800132a:	8afb      	ldrh	r3, [r7, #22]
 800132c:	461a      	mov	r2, r3
 800132e:	68b9      	ldr	r1, [r7, #8]
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f7ff ff3f 	bl	80011b4 <W25qxx_PageProgram>
		if (NumByteToWrite == pageremain)
 8001336:	8afb      	ldrh	r3, [r7, #22]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	429a      	cmp	r2, r3
 800133c:	d016      	beq.n	800136c <W25qxx_WriteNoCheck+0x68>
		{
			break; //д�������
		}
	 	else //NumByteToWrite>pageremain
		{
			pBuffer += pageremain;
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
			WriteAddr += pageremain;
 8001346:	8afb      	ldrh	r3, [r7, #22]
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	4413      	add	r3, r2
 800134c:	60bb      	str	r3, [r7, #8]

			NumByteToWrite -= pageremain; //��ȥ�Ѿ�д���˵��ֽ���
 800134e:	8afb      	ldrh	r3, [r7, #22]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	607b      	str	r3, [r7, #4]
			if (NumByteToWrite > 256)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800135c:	d903      	bls.n	8001366 <W25qxx_WriteNoCheck+0x62>
				pageremain = 256; //һ�ο���д��256���ֽ�
 800135e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001362:	82fb      	strh	r3, [r7, #22]
 8001364:	e7e1      	b.n	800132a <W25qxx_WriteNoCheck+0x26>
			else
				pageremain = NumByteToWrite; //����256���ֽ���
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	82fb      	strh	r3, [r7, #22]
		W25qxx_PageProgram(pBuffer, WriteAddr, pageremain);
 800136a:	e7de      	b.n	800132a <W25qxx_WriteNoCheck+0x26>
			break; //д�������
 800136c:	bf00      	nop
		}
	}
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <W25qxx_Write>:
//�ú�������������!
//pBuffer:���ݴ洢��
//WriteAddr:��ʼд��ĵ�ַ(���32bit)
//NumByteToWrite:Ҫд����ֽ���(���65535)
void W25qxx_Write(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 800137e:	af00      	add	r7, sp, #0
 8001380:	4ba0      	ldr	r3, [pc, #640]	; (8001604 <W25qxx_Write+0x28c>)
 8001382:	f507 5c81 	add.w	ip, r7, #4128	; 0x1020
 8001386:	4463      	add	r3, ip
 8001388:	6018      	str	r0, [r3, #0]
 800138a:	4b9f      	ldr	r3, [pc, #636]	; (8001608 <W25qxx_Write+0x290>)
 800138c:	f507 5081 	add.w	r0, r7, #4128	; 0x1020
 8001390:	4403      	add	r3, r0
 8001392:	6019      	str	r1, [r3, #0]
 8001394:	4b9d      	ldr	r3, [pc, #628]	; (800160c <W25qxx_Write+0x294>)
 8001396:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 800139a:	440b      	add	r3, r1
 800139c:	801a      	strh	r2, [r3, #0]
	uint16_t secoff;
	uint16_t secremain;
 	uint16_t i;
	uint8_t W25QXX_BUF[4096];

 	secpos = WriteAddr / 4096; //������ַ
 800139e:	4b9a      	ldr	r3, [pc, #616]	; (8001608 <W25qxx_Write+0x290>)
 80013a0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80013a4:	4413      	add	r3, r2
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0b1b      	lsrs	r3, r3, #12
 80013aa:	f241 021c 	movw	r2, #4124	; 0x101c
 80013ae:	443a      	add	r2, r7
 80013b0:	6013      	str	r3, [r2, #0]
	secoff = WriteAddr % 4096; //�������ڵ�ƫ��
 80013b2:	4b95      	ldr	r3, [pc, #596]	; (8001608 <W25qxx_Write+0x290>)
 80013b4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80013b8:	4413      	add	r3, r2
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013c2:	f241 021a 	movw	r2, #4122	; 0x101a
 80013c6:	443a      	add	r2, r7
 80013c8:	8013      	strh	r3, [r2, #0]
	secremain = 4096 - secoff; //����ʣ��ռ��С
 80013ca:	f241 031a 	movw	r3, #4122	; 0x101a
 80013ce:	443b      	add	r3, r7
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80013d6:	f241 0218 	movw	r2, #4120	; 0x1018
 80013da:	443a      	add	r2, r7
 80013dc:	8013      	strh	r3, [r2, #0]

 	if (NumByteToWrite <= secremain) secremain = NumByteToWrite; //������4096���ֽ�
 80013de:	4b8b      	ldr	r3, [pc, #556]	; (800160c <W25qxx_Write+0x294>)
 80013e0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80013e4:	4413      	add	r3, r2
 80013e6:	881a      	ldrh	r2, [r3, #0]
 80013e8:	f241 0318 	movw	r3, #4120	; 0x1018
 80013ec:	443b      	add	r3, r7
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d808      	bhi.n	8001406 <W25qxx_Write+0x8e>
 80013f4:	4b85      	ldr	r3, [pc, #532]	; (800160c <W25qxx_Write+0x294>)
 80013f6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80013fa:	4413      	add	r3, r2
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	f241 0218 	movw	r2, #4120	; 0x1018
 8001402:	443a      	add	r2, r7
 8001404:	8013      	strh	r3, [r2, #0]
	while(1)
	{
		W25qxx_Read(W25QXX_BUF, secpos * 4096, 4096); //������������������
 8001406:	f241 031c 	movw	r3, #4124	; 0x101c
 800140a:	443b      	add	r3, r7
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	0319      	lsls	r1, r3, #12
 8001410:	4b7f      	ldr	r3, [pc, #508]	; (8001610 <W25qxx_Write+0x298>)
 8001412:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001416:	4413      	add	r3, r2
 8001418:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff1b 	bl	8001258 <W25qxx_Read>
		for (i = 0;i < secremain; i++) //У������
 8001422:	2300      	movs	r3, #0
 8001424:	f241 0216 	movw	r2, #4118	; 0x1016
 8001428:	443a      	add	r2, r7
 800142a:	8013      	strh	r3, [r2, #0]
 800142c:	e018      	b.n	8001460 <W25qxx_Write+0xe8>
		{
			if (W25QXX_BUF[secoff+i] != 0XFF) break; //��Ҫ����
 800142e:	f241 031a 	movw	r3, #4122	; 0x101a
 8001432:	443b      	add	r3, r7
 8001434:	881a      	ldrh	r2, [r3, #0]
 8001436:	f241 0316 	movw	r3, #4118	; 0x1016
 800143a:	443b      	add	r3, r7
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	441a      	add	r2, r3
 8001440:	4b73      	ldr	r3, [pc, #460]	; (8001610 <W25qxx_Write+0x298>)
 8001442:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8001446:	440b      	add	r3, r1
 8001448:	5c9b      	ldrb	r3, [r3, r2]
 800144a:	2bff      	cmp	r3, #255	; 0xff
 800144c:	d113      	bne.n	8001476 <W25qxx_Write+0xfe>
		for (i = 0;i < secremain; i++) //У������
 800144e:	f241 0316 	movw	r3, #4118	; 0x1016
 8001452:	443b      	add	r3, r7
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	f241 0216 	movw	r2, #4118	; 0x1016
 800145c:	443a      	add	r2, r7
 800145e:	8013      	strh	r3, [r2, #0]
 8001460:	f241 0316 	movw	r3, #4118	; 0x1016
 8001464:	443b      	add	r3, r7
 8001466:	881a      	ldrh	r2, [r3, #0]
 8001468:	f241 0318 	movw	r3, #4120	; 0x1018
 800146c:	443b      	add	r3, r7
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d3dc      	bcc.n	800142e <W25qxx_Write+0xb6>
 8001474:	e000      	b.n	8001478 <W25qxx_Write+0x100>
			if (W25QXX_BUF[secoff+i] != 0XFF) break; //��Ҫ����
 8001476:	bf00      	nop
		}
		if (i < secremain) //��Ҫ����
 8001478:	f241 0316 	movw	r3, #4118	; 0x1016
 800147c:	443b      	add	r3, r7
 800147e:	881a      	ldrh	r2, [r3, #0]
 8001480:	f241 0318 	movw	r3, #4120	; 0x1018
 8001484:	443b      	add	r3, r7
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d246      	bcs.n	800151a <W25qxx_Write+0x1a2>
		{
			W25qxx_EraseSector(secpos); //�����������
 800148c:	f241 031c 	movw	r3, #4124	; 0x101c
 8001490:	443b      	add	r3, r7
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	f7ff fe48 	bl	8001128 <W25qxx_EraseSector>
			for (i = 0; i < secremain; i++) //����
 8001498:	2300      	movs	r3, #0
 800149a:	f241 0216 	movw	r2, #4118	; 0x1016
 800149e:	443a      	add	r2, r7
 80014a0:	8013      	strh	r3, [r2, #0]
 80014a2:	e021      	b.n	80014e8 <W25qxx_Write+0x170>
			{
				W25QXX_BUF[i + secoff] = pBuffer[i];
 80014a4:	f241 0316 	movw	r3, #4118	; 0x1016
 80014a8:	443b      	add	r3, r7
 80014aa:	881a      	ldrh	r2, [r3, #0]
 80014ac:	4b55      	ldr	r3, [pc, #340]	; (8001604 <W25qxx_Write+0x28c>)
 80014ae:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80014b2:	440b      	add	r3, r1
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	f241 0216 	movw	r2, #4118	; 0x1016
 80014bc:	443a      	add	r2, r7
 80014be:	8811      	ldrh	r1, [r2, #0]
 80014c0:	f241 021a 	movw	r2, #4122	; 0x101a
 80014c4:	443a      	add	r2, r7
 80014c6:	8812      	ldrh	r2, [r2, #0]
 80014c8:	440a      	add	r2, r1
 80014ca:	7819      	ldrb	r1, [r3, #0]
 80014cc:	4b50      	ldr	r3, [pc, #320]	; (8001610 <W25qxx_Write+0x298>)
 80014ce:	f507 5081 	add.w	r0, r7, #4128	; 0x1020
 80014d2:	4403      	add	r3, r0
 80014d4:	5499      	strb	r1, [r3, r2]
			for (i = 0; i < secremain; i++) //����
 80014d6:	f241 0316 	movw	r3, #4118	; 0x1016
 80014da:	443b      	add	r3, r7
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	f241 0216 	movw	r2, #4118	; 0x1016
 80014e4:	443a      	add	r2, r7
 80014e6:	8013      	strh	r3, [r2, #0]
 80014e8:	f241 0316 	movw	r3, #4118	; 0x1016
 80014ec:	443b      	add	r3, r7
 80014ee:	881a      	ldrh	r2, [r3, #0]
 80014f0:	f241 0318 	movw	r3, #4120	; 0x1018
 80014f4:	443b      	add	r3, r7
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d3d3      	bcc.n	80014a4 <W25qxx_Write+0x12c>
			}
			W25qxx_WriteNoCheck(W25QXX_BUF, secpos * 4096, 4096); //д����������
 80014fc:	f241 031c 	movw	r3, #4124	; 0x101c
 8001500:	443b      	add	r3, r7
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	0319      	lsls	r1, r3, #12
 8001506:	4b42      	ldr	r3, [pc, #264]	; (8001610 <W25qxx_Write+0x298>)
 8001508:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800150c:	4413      	add	r3, r2
 800150e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fef6 	bl	8001304 <W25qxx_WriteNoCheck>
 8001518:	e00f      	b.n	800153a <W25qxx_Write+0x1c2>
		}
		else
		{
			W25qxx_WriteNoCheck(pBuffer, WriteAddr, secremain); //д�Ѿ������˵�,ֱ��д������ʣ������.
 800151a:	f241 0318 	movw	r3, #4120	; 0x1018
 800151e:	443b      	add	r3, r7
 8001520:	881a      	ldrh	r2, [r3, #0]
 8001522:	4939      	ldr	r1, [pc, #228]	; (8001608 <W25qxx_Write+0x290>)
 8001524:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001528:	4419      	add	r1, r3
 800152a:	4b36      	ldr	r3, [pc, #216]	; (8001604 <W25qxx_Write+0x28c>)
 800152c:	f507 5081 	add.w	r0, r7, #4128	; 0x1020
 8001530:	4403      	add	r3, r0
 8001532:	6809      	ldr	r1, [r1, #0]
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	f7ff fee5 	bl	8001304 <W25qxx_WriteNoCheck>
		}
		if (NumByteToWrite == secremain)
 800153a:	4b34      	ldr	r3, [pc, #208]	; (800160c <W25qxx_Write+0x294>)
 800153c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001540:	4413      	add	r3, r2
 8001542:	881a      	ldrh	r2, [r3, #0]
 8001544:	f241 0318 	movw	r3, #4120	; 0x1018
 8001548:	443b      	add	r3, r7
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	d053      	beq.n	80015f8 <W25qxx_Write+0x280>
		{
			break; //д�������
		}
		else//д��δ����
		{
			secpos++; //������ַ��1
 8001550:	f241 031c 	movw	r3, #4124	; 0x101c
 8001554:	443b      	add	r3, r7
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	f241 021c 	movw	r2, #4124	; 0x101c
 800155e:	443a      	add	r2, r7
 8001560:	6013      	str	r3, [r2, #0]
			secoff = 0; //ƫ��λ��Ϊ0
 8001562:	2300      	movs	r3, #0
 8001564:	f241 021a 	movw	r2, #4122	; 0x101a
 8001568:	443a      	add	r2, r7
 800156a:	8013      	strh	r3, [r2, #0]

			pBuffer += secremain;  //ָ��ƫ��
 800156c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001570:	443b      	add	r3, r7
 8001572:	8819      	ldrh	r1, [r3, #0]
 8001574:	4b23      	ldr	r3, [pc, #140]	; (8001604 <W25qxx_Write+0x28c>)
 8001576:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800157a:	4413      	add	r3, r2
 800157c:	4a21      	ldr	r2, [pc, #132]	; (8001604 <W25qxx_Write+0x28c>)
 800157e:	f507 5081 	add.w	r0, r7, #4128	; 0x1020
 8001582:	4402      	add	r2, r0
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	440a      	add	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
			WriteAddr += secremain;//д��ַƫ��
 800158a:	f241 0318 	movw	r3, #4120	; 0x1018
 800158e:	443b      	add	r3, r7
 8001590:	8819      	ldrh	r1, [r3, #0]
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <W25qxx_Write+0x290>)
 8001594:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001598:	4413      	add	r3, r2
 800159a:	4a1b      	ldr	r2, [pc, #108]	; (8001608 <W25qxx_Write+0x290>)
 800159c:	f507 5081 	add.w	r0, r7, #4128	; 0x1020
 80015a0:	4402      	add	r2, r0
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	440a      	add	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]
			NumByteToWrite -= secremain; //�ֽ����ݼ�
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <W25qxx_Write+0x294>)
 80015aa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80015ae:	4413      	add	r3, r2
 80015b0:	4a16      	ldr	r2, [pc, #88]	; (800160c <W25qxx_Write+0x294>)
 80015b2:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 80015b6:	440a      	add	r2, r1
 80015b8:	8811      	ldrh	r1, [r2, #0]
 80015ba:	f241 0218 	movw	r2, #4120	; 0x1018
 80015be:	443a      	add	r2, r7
 80015c0:	8812      	ldrh	r2, [r2, #0]
 80015c2:	1a8a      	subs	r2, r1, r2
 80015c4:	801a      	strh	r2, [r3, #0]
			if (NumByteToWrite > 4096)
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <W25qxx_Write+0x294>)
 80015c8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80015cc:	4413      	add	r3, r2
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015d4:	d906      	bls.n	80015e4 <W25qxx_Write+0x26c>
				secremain = 4096; //��һ����������д����
 80015d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015da:	f241 0218 	movw	r2, #4120	; 0x1018
 80015de:	443a      	add	r2, r7
 80015e0:	8013      	strh	r3, [r2, #0]
 80015e2:	e710      	b.n	8001406 <W25qxx_Write+0x8e>
			else
				secremain = NumByteToWrite; //��һ����������д����
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <W25qxx_Write+0x294>)
 80015e6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80015ea:	4413      	add	r3, r2
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	f241 0218 	movw	r2, #4120	; 0x1018
 80015f2:	443a      	add	r2, r7
 80015f4:	8013      	strh	r3, [r2, #0]
		W25qxx_Read(W25QXX_BUF, secpos * 4096, 4096); //������������������
 80015f6:	e706      	b.n	8001406 <W25qxx_Write+0x8e>
			break; //д�������
 80015f8:	bf00      	nop
		}
	}
}
 80015fa:	bf00      	nop
 80015fc:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	ffffefec 	.word	0xffffefec
 8001608:	ffffefe8 	.word	0xffffefe8
 800160c:	ffffefe6 	.word	0xffffefe6
 8001610:	ffffeff4 	.word	0xffffeff4

08001614 <QSPI_ResetDevice>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_ResetDevice(QSPI_HandleTypeDef *hqspi)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b090      	sub	sp, #64	; 0x40
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800161c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001620:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = W25X_EnableReset;
 8001622:	2366      	movs	r3, #102	; 0x66
 8001624:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001626:	2300      	movs	r3, #0
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800162a:	2300      	movs	r3, #0
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800163a:	2300      	movs	r3, #0
 800163c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800163e:	2300      	movs	r3, #0
 8001640:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001642:	f107 0308 	add.w	r3, r7, #8
 8001646:	f241 3288 	movw	r2, #5000	; 0x1388
 800164a:	4619      	mov	r1, r3
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 fcd5 	bl	8001ffc <HAL_QSPI_Command>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <QSPI_ResetDevice+0x48>
  {
    return w25qxx_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e030      	b.n	80016be <QSPI_ResetDevice+0xaa>
  }

  /* Send the reset device command */
  s_command.Instruction = W25X_ResetDevice;
 800165c:	2399      	movs	r3, #153	; 0x99
 800165e:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	f241 3288 	movw	r2, #5000	; 0x1388
 8001668:	4619      	mov	r1, r3
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 fcc6 	bl	8001ffc <HAL_QSPI_Command>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <QSPI_ResetDevice+0x66>
  {
    return w25qxx_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e021      	b.n	80016be <QSPI_ResetDevice+0xaa>
  }

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800167a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800167e:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = W25X_EnableReset;
 8001680:	2366      	movs	r3, #102	; 0x66
 8001682:	60bb      	str	r3, [r7, #8]
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	f241 3288 	movw	r2, #5000	; 0x1388
 800168c:	4619      	mov	r1, r3
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 fcb4 	bl	8001ffc <HAL_QSPI_Command>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <QSPI_ResetDevice+0x8a>
  {
    return w25qxx_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e00f      	b.n	80016be <QSPI_ResetDevice+0xaa>
  }

  /* Send the reset memory command*/
  s_command.Instruction = W25X_ResetDevice;
 800169e:	2399      	movs	r3, #153	; 0x99
 80016a0:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016aa:	4619      	mov	r1, r3
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 fca5 	bl	8001ffc <HAL_QSPI_Command>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <QSPI_ResetDevice+0xa8>
  {
    return w25qxx_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <QSPI_ResetDevice+0xaa>
  }

  return w25qxx_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3740      	adds	r7, #64	; 0x40
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <QSPI_Send_CMD>:
 * @return  uint8_t			w25qxx_OK:����
 *                      w25qxx_ERROR:����
 */
static uint8_t QSPI_Send_CMD(QSPI_HandleTypeDef *hqspi,uint32_t instruction, uint32_t address,uint32_t addressSize,uint32_t dummyCycles, 
                    uint32_t instructionMode,uint32_t addressMode, uint32_t dataMode, uint32_t dataSize)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b092      	sub	sp, #72	; 0x48
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	603b      	str	r3, [r7, #0]
    QSPI_CommandTypeDef Cmdhandler;

    Cmdhandler.Instruction        = instruction;   
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	613b      	str	r3, [r7, #16]
	  Cmdhandler.InstructionMode    = instructionMode;  
 80016d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
	
    Cmdhandler.Address            = address;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	617b      	str	r3, [r7, #20]
    Cmdhandler.AddressSize        = addressSize;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	61fb      	str	r3, [r7, #28]
	  Cmdhandler.AddressMode        = addressMode;
 80016e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	  
	  Cmdhandler.AlternateBytes     = 0x00;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
    Cmdhandler.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
	  Cmdhandler.AlternateByteMode  = QSPI_ALTERNATE_BYTES_NONE;                              
 80016f0:	2300      	movs	r3, #0
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
    Cmdhandler.DummyCycles        = dummyCycles;                   
 80016f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
       					      				
    Cmdhandler.DataMode           = dataMode;
 80016f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016fa:	637b      	str	r3, [r7, #52]	; 0x34
    Cmdhandler.NbData             = dataSize; 
 80016fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016fe:	63bb      	str	r3, [r7, #56]	; 0x38
	
    Cmdhandler.DdrMode            = QSPI_DDR_MODE_DISABLE;           	
 8001700:	2300      	movs	r3, #0
 8001702:	63fb      	str	r3, [r7, #60]	; 0x3c
    Cmdhandler.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
 8001704:	2300      	movs	r3, #0
 8001706:	643b      	str	r3, [r7, #64]	; 0x40
    Cmdhandler.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
 8001708:	2300      	movs	r3, #0
 800170a:	647b      	str	r3, [r7, #68]	; 0x44

    if(HAL_QSPI_Command(hqspi, &Cmdhandler, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	f241 3288 	movw	r2, #5000	; 0x1388
 8001714:	4619      	mov	r1, r3
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 fc70 	bl	8001ffc <HAL_QSPI_Command>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <QSPI_Send_CMD+0x60>
      return w25qxx_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <QSPI_Send_CMD+0x62>

    return w25qxx_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3748      	adds	r7, #72	; 0x48
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b096      	sub	sp, #88	; 0x58
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
	if(w25qxx_Mode == w25qxx_QPIMode)
 8001738:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <QSPI_WriteEnable+0xb4>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b04      	cmp	r3, #4
 800173e:	d103      	bne.n	8001748 <QSPI_WriteEnable+0x18>
		s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001740:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001744:	63bb      	str	r3, [r7, #56]	; 0x38
 8001746:	e002      	b.n	800174e <QSPI_WriteEnable+0x1e>
	else 
		s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800174c:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = W25X_WriteEnable;
 800174e:	2306      	movs	r3, #6
 8001750:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001752:	2300      	movs	r3, #0
 8001754:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001756:	2300      	movs	r3, #0
 8001758:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800175a:	2300      	movs	r3, #0
 800175c:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001766:	2300      	movs	r3, #0
 8001768:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800176a:	2300      	movs	r3, #0
 800176c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800176e:	f107 0320 	add.w	r3, r7, #32
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	4619      	mov	r1, r3
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fc3f 	bl	8001ffc <HAL_QSPI_Command>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <QSPI_WriteEnable+0x58>
  {
    return w25qxx_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e028      	b.n	80017da <QSPI_WriteEnable+0xaa>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = W25X_SR_WREN;
 8001788:	2302      	movs	r3, #2
 800178a:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = W25X_SR_WREN;
 800178c:	2302      	movs	r3, #2
 800178e:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8001790:	2300      	movs	r3, #0
 8001792:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 1;
 8001794:	2301      	movs	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8001798:	2310      	movs	r3, #16
 800179a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800179c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a0:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = W25X_ReadStatusReg1;
 80017a2:	2305      	movs	r3, #5
 80017a4:	623b      	str	r3, [r7, #32]
	
	if(w25qxx_Mode == w25qxx_QPIMode)
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <QSPI_WriteEnable+0xb4>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d103      	bne.n	80017b6 <QSPI_WriteEnable+0x86>
		s_command.DataMode     = QSPI_DATA_4_LINES;
 80017ae:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80017b2:	647b      	str	r3, [r7, #68]	; 0x44
 80017b4:	e002      	b.n	80017bc <QSPI_WriteEnable+0x8c>
  else 
		s_command.DataMode     = QSPI_DATA_1_LINE;
 80017b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017ba:	647b      	str	r3, [r7, #68]	; 0x44
	
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80017bc:	f107 0208 	add.w	r2, r7, #8
 80017c0:	f107 0120 	add.w	r1, r7, #32
 80017c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 fda4 	bl	8002316 <HAL_QSPI_AutoPolling>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <QSPI_WriteEnable+0xa8>
  {
    return w25qxx_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <QSPI_WriteEnable+0xaa>
  }

  return w25qxx_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3758      	adds	r7, #88	; 0x58
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	24000008 	.word	0x24000008

080017e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001820 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017ec:	f7ff fb36 	bl	8000e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017f2:	490d      	ldr	r1, [pc, #52]	; (8001828 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001808:	4c0a      	ldr	r4, [pc, #40]	; (8001834 <LoopFillZerobss+0x22>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001816:	f002 ffab 	bl	8004770 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181a:	f7ff f803 	bl	8000824 <main>
  bx  lr
 800181e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001820:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001824:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001828:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 800182c:	08009394 	.word	0x08009394
  ldr r2, =_sbss
 8001830:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 8001834:	24000278 	.word	0x24000278

08001838 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC3_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001842:	2003      	movs	r0, #3
 8001844:	f000 f94a 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001848:	f001 fd6e 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 800184c:	4602      	mov	r2, r0
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_Init+0x68>)
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	4913      	ldr	r1, [pc, #76]	; (80018a8 <HAL_Init+0x6c>)
 800185a:	5ccb      	ldrb	r3, [r1, r3]
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	fa22 f303 	lsr.w	r3, r2, r3
 8001864:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <HAL_Init+0x68>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <HAL_Init+0x6c>)
 8001870:	5cd3      	ldrb	r3, [r2, r3]
 8001872:	f003 031f 	and.w	r3, r3, #31
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	fa22 f303 	lsr.w	r3, r2, r3
 800187c:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <HAL_Init+0x70>)
 800187e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001880:	4a0b      	ldr	r2, [pc, #44]	; (80018b0 <HAL_Init+0x74>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001886:	200f      	movs	r0, #15
 8001888:	f000 f814 	bl	80018b4 <HAL_InitTick>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e002      	b.n	800189c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001896:	f7ff f9d7 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	58024400 	.word	0x58024400
 80018a8:	08008ec8 	.word	0x08008ec8
 80018ac:	24000004 	.word	0x24000004
 80018b0:	24000000 	.word	0x24000000

080018b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018bc:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_InitTick+0x60>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e021      	b.n	800190c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <HAL_InitTick+0x64>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_InitTick+0x60>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018da:	fbb2 f3f3 	udiv	r3, r2, r3
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f921 	bl	8001b26 <HAL_SYSTICK_Config>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00e      	b.n	800190c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b0f      	cmp	r3, #15
 80018f2:	d80a      	bhi.n	800190a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f4:	2200      	movs	r2, #0
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	f000 f8f9 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001900:	4a06      	ldr	r2, [pc, #24]	; (800191c <HAL_InitTick+0x68>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e000      	b.n	800190c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	24000010 	.word	0x24000010
 8001918:	24000000 	.word	0x24000000
 800191c:	2400000c 	.word	0x2400000c

08001920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_IncTick+0x20>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_IncTick+0x24>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4413      	add	r3, r2
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <HAL_IncTick+0x24>)
 8001932:	6013      	str	r3, [r2, #0]
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	24000010 	.word	0x24000010
 8001944:	24000264 	.word	0x24000264

08001948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return uwTick;
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <HAL_GetTick+0x14>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	24000264 	.word	0x24000264

08001960 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_GetREVID+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0c1b      	lsrs	r3, r3, #16
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	5c001000 	.word	0x5c001000

08001978 <__NVIC_SetPriorityGrouping>:
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <__NVIC_SetPriorityGrouping+0x40>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <__NVIC_SetPriorityGrouping+0x40>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00
 80019bc:	05fa0000 	.word	0x05fa0000

080019c0 <__NVIC_GetPriorityGrouping>:
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_SetPriority>:
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db0a      	blt.n	8001a06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	; (8001a28 <__NVIC_SetPriority+0x4c>)
 80019f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a04:	e00a      	b.n	8001a1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4908      	ldr	r1, [pc, #32]	; (8001a2c <__NVIC_SetPriority+0x50>)
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	3b04      	subs	r3, #4
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	761a      	strb	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <NVIC_EncodePriority>:
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	; 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff8e 	bl	80019dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff47 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b00:	f7ff ff5e 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001b04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	f7ff ff90 	bl	8001a30 <NVIC_EncodePriority>
 8001b10:	4602      	mov	r2, r0
 8001b12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff5f 	bl	80019dc <__NVIC_SetPriority>
}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffb2 	bl	8001a98 <SysTick_Config>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b4e:	4b89      	ldr	r3, [pc, #548]	; (8001d74 <HAL_GPIO_Init+0x234>)
 8001b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b52:	e194      	b.n	8001e7e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2101      	movs	r1, #1
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8186 	beq.w	8001e78 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d00b      	beq.n	8001b8c <HAL_GPIO_Init+0x4c>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d007      	beq.n	8001b8c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b80:	2b11      	cmp	r3, #17
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b12      	cmp	r3, #18
 8001b8a:	d130      	bne.n	8001bee <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	2203      	movs	r2, #3
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68da      	ldr	r2, [r3, #12]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	091b      	lsrs	r3, r3, #4
 8001bd8:	f003 0201 	and.w	r2, r3, #1
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0xee>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b12      	cmp	r3, #18
 8001c2c:	d123      	bne.n	8001c76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	08da      	lsrs	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3208      	adds	r2, #8
 8001c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	08da      	lsrs	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3208      	adds	r2, #8
 8001c70:	69b9      	ldr	r1, [r7, #24]
 8001c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	2203      	movs	r2, #3
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0203 	and.w	r2, r3, #3
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80e0 	beq.w	8001e78 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb8:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <HAL_GPIO_Init+0x238>)
 8001cba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cbe:	4a2e      	ldr	r2, [pc, #184]	; (8001d78 <HAL_GPIO_Init+0x238>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cc8:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_GPIO_Init+0x238>)
 8001cca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd6:	4a29      	ldr	r2, [pc, #164]	; (8001d7c <HAL_GPIO_Init+0x23c>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a20      	ldr	r2, [pc, #128]	; (8001d80 <HAL_GPIO_Init+0x240>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d052      	beq.n	8001da8 <HAL_GPIO_Init+0x268>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <HAL_GPIO_Init+0x244>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d031      	beq.n	8001d6e <HAL_GPIO_Init+0x22e>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <HAL_GPIO_Init+0x248>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d02b      	beq.n	8001d6a <HAL_GPIO_Init+0x22a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a1d      	ldr	r2, [pc, #116]	; (8001d8c <HAL_GPIO_Init+0x24c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d025      	beq.n	8001d66 <HAL_GPIO_Init+0x226>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <HAL_GPIO_Init+0x250>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d01f      	beq.n	8001d62 <HAL_GPIO_Init+0x222>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a1b      	ldr	r2, [pc, #108]	; (8001d94 <HAL_GPIO_Init+0x254>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d019      	beq.n	8001d5e <HAL_GPIO_Init+0x21e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a1a      	ldr	r2, [pc, #104]	; (8001d98 <HAL_GPIO_Init+0x258>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0x21a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_GPIO_Init+0x25c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00d      	beq.n	8001d56 <HAL_GPIO_Init+0x216>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <HAL_GPIO_Init+0x260>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <HAL_GPIO_Init+0x212>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a17      	ldr	r2, [pc, #92]	; (8001da4 <HAL_GPIO_Init+0x264>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_GPIO_Init+0x20e>
 8001d4a:	2309      	movs	r3, #9
 8001d4c:	e02d      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d4e:	230a      	movs	r3, #10
 8001d50:	e02b      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d52:	2308      	movs	r3, #8
 8001d54:	e029      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d56:	2307      	movs	r3, #7
 8001d58:	e027      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	e025      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d5e:	2305      	movs	r3, #5
 8001d60:	e023      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d62:	2304      	movs	r3, #4
 8001d64:	e021      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d66:	2303      	movs	r3, #3
 8001d68:	e01f      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e01d      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e01b      	b.n	8001daa <HAL_GPIO_Init+0x26a>
 8001d72:	bf00      	nop
 8001d74:	58000080 	.word	0x58000080
 8001d78:	58024400 	.word	0x58024400
 8001d7c:	58000400 	.word	0x58000400
 8001d80:	58020000 	.word	0x58020000
 8001d84:	58020400 	.word	0x58020400
 8001d88:	58020800 	.word	0x58020800
 8001d8c:	58020c00 	.word	0x58020c00
 8001d90:	58021000 	.word	0x58021000
 8001d94:	58021400 	.word	0x58021400
 8001d98:	58021800 	.word	0x58021800
 8001d9c:	58021c00 	.word	0x58021c00
 8001da0:	58022000 	.word	0x58022000
 8001da4:	58022400 	.word	0x58022400
 8001da8:	2300      	movs	r3, #0
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	f002 0203 	and.w	r2, r2, #3
 8001db0:	0092      	lsls	r2, r2, #2
 8001db2:	4093      	lsls	r3, r2
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dba:	4938      	ldr	r1, [pc, #224]	; (8001e9c <HAL_GPIO_Init+0x35c>)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	3302      	adds	r3, #2
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f47f ae63 	bne.w	8001b54 <HAL_GPIO_Init+0x14>
  }
}
 8001e8e:	bf00      	nop
 8001e90:	bf00      	nop
 8001e92:	3724      	adds	r7, #36	; 0x24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	58000400 	.word	0x58000400

08001ea0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <HAL_PWREx_ConfigSupply+0x70>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	d00a      	beq.n	8001eca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001eb4:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <HAL_PWREx_ConfigSupply+0x70>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d001      	beq.n	8001ec6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e01f      	b.n	8001f06 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e01d      	b.n	8001f06 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001eca:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <HAL_PWREx_ConfigSupply+0x70>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	f023 0207 	bic.w	r2, r3, #7
 8001ed2:	490f      	ldr	r1, [pc, #60]	; (8001f10 <HAL_PWREx_ConfigSupply+0x70>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001eda:	f7ff fd35 	bl	8001948 <HAL_GetTick>
 8001ede:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ee0:	e009      	b.n	8001ef6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ee2:	f7ff fd31 	bl	8001948 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ef0:	d901      	bls.n	8001ef6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e007      	b.n	8001f06 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_PWREx_ConfigSupply+0x70>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f02:	d1ee      	bne.n	8001ee2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	58024800 	.word	0x58024800

08001f14 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff fd14 	bl	8001948 <HAL_GetTick>
 8001f20:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e05f      	b.n	8001fec <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d107      	bne.n	8001f48 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7fe fdab 	bl	8000a94 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001f3e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fa5e 	bl	8002404 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	021a      	lsls	r2, r3, #8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2120      	movs	r1, #32
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 fa56 	bl	8002420 <QSPI_WaitFlagStateUntilTimeout>
 8001f74:	4603      	mov	r3, r0
 8001f76:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001f78:	7afb      	ldrb	r3, [r7, #11]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d135      	bne.n	8001fea <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_QSPI_Init+0xe0>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6852      	ldr	r2, [r2, #4]
 8001f8c:	0611      	lsls	r1, r2, #24
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	68d2      	ldr	r2, [r2, #12]
 8001f92:	4311      	orrs	r1, r2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	69d2      	ldr	r2, [r2, #28]
 8001f98:	4311      	orrs	r1, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6a12      	ldr	r2, [r2, #32]
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_QSPI_Init+0xe4>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6912      	ldr	r2, [r2, #16]
 8001fb6:	0411      	lsls	r1, r2, #16
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6952      	ldr	r2, [r2, #20]
 8001fbc:	4311      	orrs	r1, r2
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6992      	ldr	r2, [r2, #24]
 8001fc2:	4311      	orrs	r1, r2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8001fea:	7afb      	ldrb	r3, [r7, #11]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	00ffff2f 	.word	0x00ffff2f
 8001ff8:	ffe0f8fe 	.word	0xffe0f8fe

08001ffc <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af02      	add	r7, sp, #8
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002008:	f7ff fc9e 	bl	8001948 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_QSPI_Command+0x22>
 800201a:	2302      	movs	r3, #2
 800201c:	e048      	b.n	80020b0 <HAL_QSPI_Command+0xb4>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d137      	bne.n	80020a2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2200      	movs	r2, #0
 8002048:	2120      	movs	r1, #32
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 f9e8 	bl	8002420 <QSPI_WaitFlagStateUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002054:	7dfb      	ldrb	r3, [r7, #23]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d125      	bne.n	80020a6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800205a:	2200      	movs	r2, #0
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 fa15 	bl	800248e <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	2b00      	cmp	r3, #0
 800206a:	d115      	bne.n	8002098 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	2201      	movs	r2, #1
 8002074:	2102      	movs	r1, #2
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 f9d2 	bl	8002420 <QSPI_WaitFlagStateUntilTimeout>
 800207c:	4603      	mov	r3, r0
 800207e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8002080:	7dfb      	ldrb	r3, [r7, #23]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10f      	bne.n	80020a6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2202      	movs	r2, #2
 800208c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002096:	e006      	b.n	80020a6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80020a0:	e001      	b.n	80020a6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80020a2:	2302      	movs	r3, #2
 80020a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_QSPI_Transmit>:
  * @note   This function is used only in Indirect Write Mode
  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c4:	2300      	movs	r3, #0
 80020c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80020c8:	f7ff fc3e 	bl	8001948 <HAL_GetTick>
 80020cc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3320      	adds	r3, #32
 80020d4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_QSPI_Transmit+0x2e>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e076      	b.n	80021d4 <HAL_QSPI_Transmit+0x11c>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d165      	bne.n	80021c6 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d056      	beq.n	80021b4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2212      	movs	r2, #18
 800210a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800213a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800213c:	e01b      	b.n	8002176 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	2201      	movs	r2, #1
 8002146:	2104      	movs	r1, #4
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 f969 	bl	8002420 <QSPI_WaitFlagStateUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002152:	7ffb      	ldrb	r3, [r7, #31]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d113      	bne.n	8002180 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	781a      	ldrb	r2, [r3, #0]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	1e5a      	subs	r2, r3, #1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1df      	bne.n	800213e <HAL_QSPI_Transmit+0x86>
 800217e:	e000      	b.n	8002182 <HAL_QSPI_Transmit+0xca>
          break;
 8002180:	bf00      	nop
      }

      if (status == HAL_OK)
 8002182:	7ffb      	ldrb	r3, [r7, #31]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d110      	bne.n	80021aa <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2201      	movs	r2, #1
 8002190:	2102      	movs	r1, #2
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f944 	bl	8002420 <QSPI_WaitFlagStateUntilTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800219c:	7ffb      	ldrb	r3, [r7, #31]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d103      	bne.n	80021aa <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2202      	movs	r2, #2
 80021a8:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80021b2:	e00a      	b.n	80021ca <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	f043 0208 	orr.w	r2, r3, #8
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	77fb      	strb	r3, [r7, #31]
 80021c4:	e001      	b.n	80021ca <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
 80021c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80021d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80021ec:	f7ff fbac 	bl	8001948 <HAL_GetTick>
 80021f0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	3320      	adds	r3, #32
 8002200:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_QSPI_Receive+0x36>
 800220e:	2302      	movs	r3, #2
 8002210:	e07d      	b.n	800230e <HAL_QSPI_Receive+0x132>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b01      	cmp	r3, #1
 8002224:	d16c      	bne.n	8002300 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d05d      	beq.n	80022ee <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2222      	movs	r2, #34	; 0x22
 8002236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800226a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8002274:	e01c      	b.n	80022b0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	2201      	movs	r2, #1
 800227e:	2106      	movs	r1, #6
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 f8cd 	bl	8002420 <QSPI_WaitFlagStateUntilTimeout>
 8002286:	4603      	mov	r3, r0
 8002288:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800228a:	7ffb      	ldrb	r3, [r7, #31]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d114      	bne.n	80022ba <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	7812      	ldrb	r2, [r2, #0]
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	1e5a      	subs	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1de      	bne.n	8002276 <HAL_QSPI_Receive+0x9a>
 80022b8:	e000      	b.n	80022bc <HAL_QSPI_Receive+0xe0>
          break;
 80022ba:	bf00      	nop
      }

      if (status == HAL_OK)
 80022bc:	7ffb      	ldrb	r3, [r7, #31]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d110      	bne.n	80022e4 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	2201      	movs	r2, #1
 80022ca:	2102      	movs	r1, #2
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f8a7 	bl	8002420 <QSPI_WaitFlagStateUntilTimeout>
 80022d2:	4603      	mov	r3, r0
 80022d4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80022d6:	7ffb      	ldrb	r3, [r7, #31]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d103      	bne.n	80022e4 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2202      	movs	r2, #2
 80022e2:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022ec:	e00a      	b.n	8002304 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f043 0208 	orr.w	r2, r3, #8
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	77fb      	strb	r3, [r7, #31]
 80022fe:	e001      	b.n	8002304 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002300:	2302      	movs	r3, #2
 8002302:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800230c:	7ffb      	ldrb	r3, [r7, #31]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3720      	adds	r7, #32
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b088      	sub	sp, #32
 800231a:	af02      	add	r7, sp, #8
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002324:	f7ff fb10 	bl	8001948 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_QSPI_AutoPolling+0x24>
 8002336:	2302      	movs	r3, #2
 8002338:	e060      	b.n	80023fc <HAL_QSPI_AutoPolling+0xe6>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b01      	cmp	r3, #1
 800234c:	d14f      	bne.n	80023ee <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2242      	movs	r2, #66	; 0x42
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2200      	movs	r2, #0
 8002364:	2120      	movs	r1, #32
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f000 f85a 	bl	8002420 <QSPI_WaitFlagStateUntilTimeout>
 800236c:	4603      	mov	r3, r0
 800236e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002370:	7dfb      	ldrb	r3, [r7, #23]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d13d      	bne.n	80023f2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6852      	ldr	r2, [r2, #4]
 8002388:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6892      	ldr	r2, [r2, #8]
 8002392:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80023ac:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80023b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023ba:	68b9      	ldr	r1, [r7, #8]
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 f866 	bl	800248e <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2201      	movs	r2, #1
 80023ca:	2108      	movs	r1, #8
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f827 	bl	8002420 <QSPI_WaitFlagStateUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80023d6:	7dfb      	ldrb	r3, [r7, #23]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10a      	bne.n	80023f2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2208      	movs	r2, #8
 80023e2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023ec:	e001      	b.n	80023f2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80023ee:	2302      	movs	r3, #2
 80023f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80023fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	603b      	str	r3, [r7, #0]
 800242c:	4613      	mov	r3, r2
 800242e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002430:	e01a      	b.n	8002468 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002438:	d016      	beq.n	8002468 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243a:	f7ff fa85 	bl	8001948 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	429a      	cmp	r2, r3
 8002448:	d302      	bcc.n	8002450 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10b      	bne.n	8002468 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2204      	movs	r2, #4
 8002454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e00e      	b.n	8002486 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	bf14      	ite	ne
 8002476:	2301      	movne	r3, #1
 8002478:	2300      	moveq	r3, #0
 800247a:	b2db      	uxtb	r3, r3
 800247c:	461a      	mov	r2, r3
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	429a      	cmp	r2, r3
 8002482:	d1d6      	bne.n	8002432 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800248e:	b480      	push	{r7}
 8002490:	b085      	sub	sp, #20
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d009      	beq.n	80024b6 <QSPI_Config+0x28>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80024a8:	d005      	beq.n	80024b6 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	3a01      	subs	r2, #1
 80024b4:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 80b9 	beq.w	8002632 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d05f      	beq.n	8002588 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	6892      	ldr	r2, [r2, #8]
 80024d0:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d031      	beq.n	800253e <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	431a      	orrs	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e8:	431a      	orrs	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	431a      	orrs	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	049b      	lsls	r3, r3, #18
 80024f6:	431a      	orrs	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	431a      	orrs	r2, r3
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	431a      	orrs	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	431a      	orrs	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	431a      	orrs	r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	ea42 0103 	orr.w	r1, r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	430a      	orrs	r2, r1
 8002526:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800252e:	f000 812e 	beq.w	800278e <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	6852      	ldr	r2, [r2, #4]
 800253a:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800253c:	e127      	b.n	800278e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	431a      	orrs	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254c:	431a      	orrs	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	431a      	orrs	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	049b      	lsls	r3, r3, #18
 800255a:	431a      	orrs	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	431a      	orrs	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	431a      	orrs	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	431a      	orrs	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	431a      	orrs	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	ea42 0103 	orr.w	r1, r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	430a      	orrs	r2, r1
 8002584:	615a      	str	r2, [r3, #20]
}
 8002586:	e102      	b.n	800278e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d02e      	beq.n	80025ee <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	431a      	orrs	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259e:	431a      	orrs	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	431a      	orrs	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	049b      	lsls	r3, r3, #18
 80025ac:	431a      	orrs	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	431a      	orrs	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	431a      	orrs	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	ea42 0103 	orr.w	r1, r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80025de:	f000 80d6 	beq.w	800278e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	6852      	ldr	r2, [r2, #4]
 80025ea:	619a      	str	r2, [r3, #24]
}
 80025ec:	e0cf      	b.n	800278e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	431a      	orrs	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025fc:	431a      	orrs	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	431a      	orrs	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	049b      	lsls	r3, r3, #18
 800260a:	431a      	orrs	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	431a      	orrs	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	431a      	orrs	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	431a      	orrs	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	ea42 0103 	orr.w	r1, r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	430a      	orrs	r2, r1
 800262e:	615a      	str	r2, [r3, #20]
}
 8002630:	e0ad      	b.n	800278e <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d058      	beq.n	80026ec <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	6892      	ldr	r2, [r2, #8]
 8002642:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d02d      	beq.n	80026a8 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	431a      	orrs	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265a:	431a      	orrs	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	431a      	orrs	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	049b      	lsls	r3, r3, #18
 8002668:	431a      	orrs	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	431a      	orrs	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	431a      	orrs	r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	431a      	orrs	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	431a      	orrs	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	ea42 0103 	orr.w	r1, r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	430a      	orrs	r2, r1
 8002692:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800269a:	d078      	beq.n	800278e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	6852      	ldr	r2, [r2, #4]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	e072      	b.n	800278e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	431a      	orrs	r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b6:	431a      	orrs	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	431a      	orrs	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	049b      	lsls	r3, r3, #18
 80026c4:	431a      	orrs	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	ea42 0103 	orr.w	r1, r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	615a      	str	r2, [r3, #20]
}
 80026ea:	e050      	b.n	800278e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d02a      	beq.n	800274a <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	431a      	orrs	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002702:	431a      	orrs	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	431a      	orrs	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	049b      	lsls	r3, r3, #18
 8002710:	431a      	orrs	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	431a      	orrs	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	431a      	orrs	r2, r3
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	431a      	orrs	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	ea42 0103 	orr.w	r1, r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	430a      	orrs	r2, r1
 8002734:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800273c:	d027      	beq.n	800278e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	6852      	ldr	r2, [r2, #4]
 8002746:	619a      	str	r2, [r3, #24]
}
 8002748:	e021      	b.n	800278e <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	2b00      	cmp	r3, #0
 8002750:	d01d      	beq.n	800278e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	431a      	orrs	r2, r3
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002760:	431a      	orrs	r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002766:	431a      	orrs	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	049b      	lsls	r3, r3, #18
 800276e:	431a      	orrs	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	431a      	orrs	r2, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	431a      	orrs	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	ea42 0103 	orr.w	r1, r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	430a      	orrs	r2, r1
 800278c:	615a      	str	r2, [r3, #20]
}
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08c      	sub	sp, #48	; 0x30
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e3ff      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8087 	beq.w	80028ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027bc:	4b99      	ldr	r3, [pc, #612]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027c6:	4b97      	ldr	r3, [pc, #604]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ce:	2b10      	cmp	r3, #16
 80027d0:	d007      	beq.n	80027e2 <HAL_RCC_OscConfig+0x46>
 80027d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d4:	2b18      	cmp	r3, #24
 80027d6:	d110      	bne.n	80027fa <HAL_RCC_OscConfig+0x5e>
 80027d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d10b      	bne.n	80027fa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e2:	4b90      	ldr	r3, [pc, #576]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d06c      	beq.n	80028c8 <HAL_RCC_OscConfig+0x12c>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d168      	bne.n	80028c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e3d9      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x76>
 8002804:	4b87      	ldr	r3, [pc, #540]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a86      	ldr	r2, [pc, #536]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 800280a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	e02e      	b.n	8002870 <HAL_RCC_OscConfig+0xd4>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0x98>
 800281a:	4b82      	ldr	r3, [pc, #520]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a81      	ldr	r2, [pc, #516]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 8002820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4b7f      	ldr	r3, [pc, #508]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a7e      	ldr	r2, [pc, #504]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 800282c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e01d      	b.n	8002870 <HAL_RCC_OscConfig+0xd4>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0xbc>
 800283e:	4b79      	ldr	r3, [pc, #484]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a78      	ldr	r2, [pc, #480]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 8002844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a75      	ldr	r2, [pc, #468]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0xd4>
 8002858:	4b72      	ldr	r3, [pc, #456]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a71      	ldr	r2, [pc, #452]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 800285e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	4b6f      	ldr	r3, [pc, #444]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a6e      	ldr	r2, [pc, #440]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 800286a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d013      	beq.n	80028a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7ff f866 	bl	8001948 <HAL_GetTick>
 800287c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002880:	f7ff f862 	bl	8001948 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b64      	cmp	r3, #100	; 0x64
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e38d      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002892:	4b64      	ldr	r3, [pc, #400]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0xe4>
 800289e:	e014      	b.n	80028ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7ff f852 	bl	8001948 <HAL_GetTick>
 80028a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a8:	f7ff f84e 	bl	8001948 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e379      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028ba:	4b5a      	ldr	r3, [pc, #360]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x10c>
 80028c6:	e000      	b.n	80028ca <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80ae 	beq.w	8002a34 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d8:	4b52      	ldr	r3, [pc, #328]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028e2:	4b50      	ldr	r3, [pc, #320]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d007      	beq.n	80028fe <HAL_RCC_OscConfig+0x162>
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	2b18      	cmp	r3, #24
 80028f2:	d13a      	bne.n	800296a <HAL_RCC_OscConfig+0x1ce>
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d135      	bne.n	800296a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028fe:	4b49      	ldr	r3, [pc, #292]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	d005      	beq.n	8002916 <HAL_RCC_OscConfig+0x17a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e34b      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002916:	f7ff f823 	bl	8001960 <HAL_GetREVID>
 800291a:	4603      	mov	r3, r0
 800291c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002920:	4293      	cmp	r3, r2
 8002922:	d817      	bhi.n	8002954 <HAL_RCC_OscConfig+0x1b8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b40      	cmp	r3, #64	; 0x40
 800292a:	d108      	bne.n	800293e <HAL_RCC_OscConfig+0x1a2>
 800292c:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002934:	4a3b      	ldr	r2, [pc, #236]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 8002936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800293c:	e07a      	b.n	8002a34 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293e:	4b39      	ldr	r3, [pc, #228]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	031b      	lsls	r3, r3, #12
 800294c:	4935      	ldr	r1, [pc, #212]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 800294e:	4313      	orrs	r3, r2
 8002950:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002952:	e06f      	b.n	8002a34 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002954:	4b33      	ldr	r3, [pc, #204]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	061b      	lsls	r3, r3, #24
 8002962:	4930      	ldr	r1, [pc, #192]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002968:	e064      	b.n	8002a34 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d045      	beq.n	80029fe <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002972:	4b2c      	ldr	r3, [pc, #176]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 0219 	bic.w	r2, r3, #25
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	4929      	ldr	r1, [pc, #164]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe ffe0 	bl	8001948 <HAL_GetTick>
 8002988:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298c:	f7fe ffdc 	bl	8001948 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e307      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800299e:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029aa:	f7fe ffd9 	bl	8001960 <HAL_GetREVID>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d817      	bhi.n	80029e8 <HAL_RCC_OscConfig+0x24c>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	2b40      	cmp	r3, #64	; 0x40
 80029be:	d108      	bne.n	80029d2 <HAL_RCC_OscConfig+0x236>
 80029c0:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029c8:	4a16      	ldr	r2, [pc, #88]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 80029ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ce:	6053      	str	r3, [r2, #4]
 80029d0:	e030      	b.n	8002a34 <HAL_RCC_OscConfig+0x298>
 80029d2:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	031b      	lsls	r3, r3, #12
 80029e0:	4910      	ldr	r1, [pc, #64]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
 80029e6:	e025      	b.n	8002a34 <HAL_RCC_OscConfig+0x298>
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	490b      	ldr	r1, [pc, #44]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
 80029fc:	e01a      	b.n	8002a34 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <HAL_RCC_OscConfig+0x288>)
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7fe ff9d 	bl	8001948 <HAL_GetTick>
 8002a0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a10:	e00a      	b.n	8002a28 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a12:	f7fe ff99 	bl	8001948 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d903      	bls.n	8002a28 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e2c4      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
 8002a24:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a28:	4ba4      	ldr	r3, [pc, #656]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1ee      	bne.n	8002a12 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80a9 	beq.w	8002b94 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a42:	4b9e      	ldr	r3, [pc, #632]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a4a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a4c:	4b9b      	ldr	r3, [pc, #620]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d007      	beq.n	8002a68 <HAL_RCC_OscConfig+0x2cc>
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b18      	cmp	r3, #24
 8002a5c:	d13a      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x338>
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d135      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a68:	4b94      	ldr	r3, [pc, #592]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_OscConfig+0x2e4>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	2b80      	cmp	r3, #128	; 0x80
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e296      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a80:	f7fe ff6e 	bl	8001960 <HAL_GetREVID>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d817      	bhi.n	8002abe <HAL_RCC_OscConfig+0x322>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d108      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x30c>
 8002a96:	4b89      	ldr	r3, [pc, #548]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a9e:	4a87      	ldr	r2, [pc, #540]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002aa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002aa4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002aa6:	e075      	b.n	8002b94 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002aa8:	4b84      	ldr	r3, [pc, #528]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	069b      	lsls	r3, r3, #26
 8002ab6:	4981      	ldr	r1, [pc, #516]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002abc:	e06a      	b.n	8002b94 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002abe:	4b7f      	ldr	r3, [pc, #508]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	061b      	lsls	r3, r3, #24
 8002acc:	497b      	ldr	r1, [pc, #492]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ad2:	e05f      	b.n	8002b94 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d042      	beq.n	8002b62 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002adc:	4b77      	ldr	r3, [pc, #476]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a76      	ldr	r2, [pc, #472]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae8:	f7fe ff2e 	bl	8001948 <HAL_GetTick>
 8002aec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002af0:	f7fe ff2a 	bl	8001948 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e255      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b02:	4b6e      	ldr	r3, [pc, #440]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b0e:	f7fe ff27 	bl	8001960 <HAL_GetREVID>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d817      	bhi.n	8002b4c <HAL_RCC_OscConfig+0x3b0>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d108      	bne.n	8002b36 <HAL_RCC_OscConfig+0x39a>
 8002b24:	4b65      	ldr	r3, [pc, #404]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b2c:	4a63      	ldr	r2, [pc, #396]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002b2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b32:	6053      	str	r3, [r2, #4]
 8002b34:	e02e      	b.n	8002b94 <HAL_RCC_OscConfig+0x3f8>
 8002b36:	4b61      	ldr	r3, [pc, #388]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	069b      	lsls	r3, r3, #26
 8002b44:	495d      	ldr	r1, [pc, #372]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	604b      	str	r3, [r1, #4]
 8002b4a:	e023      	b.n	8002b94 <HAL_RCC_OscConfig+0x3f8>
 8002b4c:	4b5b      	ldr	r3, [pc, #364]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	061b      	lsls	r3, r3, #24
 8002b5a:	4958      	ldr	r1, [pc, #352]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60cb      	str	r3, [r1, #12]
 8002b60:	e018      	b.n	8002b94 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b62:	4b56      	ldr	r3, [pc, #344]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a55      	ldr	r2, [pc, #340]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6e:	f7fe feeb 	bl	8001948 <HAL_GetTick>
 8002b72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b76:	f7fe fee7 	bl	8001948 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e212      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b88:	4b4c      	ldr	r3, [pc, #304]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f0      	bne.n	8002b76 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d036      	beq.n	8002c0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d019      	beq.n	8002bdc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba8:	4b44      	ldr	r3, [pc, #272]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bac:	4a43      	ldr	r2, [pc, #268]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7fe fec8 	bl	8001948 <HAL_GetTick>
 8002bb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bbc:	f7fe fec4 	bl	8001948 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e1ef      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bce:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x420>
 8002bda:	e018      	b.n	8002c0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bdc:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be0:	4a36      	ldr	r2, [pc, #216]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002be2:	f023 0301 	bic.w	r3, r3, #1
 8002be6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be8:	f7fe feae 	bl	8001948 <HAL_GetTick>
 8002bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7fe feaa 	bl	8001948 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e1d5      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c02:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d036      	beq.n	8002c88 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d019      	beq.n	8002c56 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c22:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a25      	ldr	r2, [pc, #148]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002c28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c2e:	f7fe fe8b 	bl	8001948 <HAL_GetTick>
 8002c32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c36:	f7fe fe87 	bl	8001948 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e1b2      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c48:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x49a>
 8002c54:	e018      	b.n	8002c88 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c56:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a18      	ldr	r2, [pc, #96]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002c5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c62:	f7fe fe71 	bl	8001948 <HAL_GetTick>
 8002c66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002c6a:	f7fe fe6d 	bl	8001948 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e198      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <HAL_RCC_OscConfig+0x520>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f0      	bne.n	8002c6a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8085 	beq.w	8002da0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <HAL_RCC_OscConfig+0x524>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a09      	ldr	r2, [pc, #36]	; (8002cc0 <HAL_RCC_OscConfig+0x524>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ca2:	f7fe fe51 	bl	8001948 <HAL_GetTick>
 8002ca6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ca8:	e00c      	b.n	8002cc4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002caa:	f7fe fe4d 	bl	8001948 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b64      	cmp	r3, #100	; 0x64
 8002cb6:	d905      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e178      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
 8002cbc:	58024400 	.word	0x58024400
 8002cc0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cc4:	4b96      	ldr	r3, [pc, #600]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ec      	beq.n	8002caa <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x54a>
 8002cd8:	4b92      	ldr	r3, [pc, #584]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cdc:	4a91      	ldr	r2, [pc, #580]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce4:	e02d      	b.n	8002d42 <HAL_RCC_OscConfig+0x5a6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x56c>
 8002cee:	4b8d      	ldr	r3, [pc, #564]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf2:	4a8c      	ldr	r2, [pc, #560]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cfa:	4b8a      	ldr	r3, [pc, #552]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfe:	4a89      	ldr	r2, [pc, #548]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002d00:	f023 0304 	bic.w	r3, r3, #4
 8002d04:	6713      	str	r3, [r2, #112]	; 0x70
 8002d06:	e01c      	b.n	8002d42 <HAL_RCC_OscConfig+0x5a6>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b05      	cmp	r3, #5
 8002d0e:	d10c      	bne.n	8002d2a <HAL_RCC_OscConfig+0x58e>
 8002d10:	4b84      	ldr	r3, [pc, #528]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d14:	4a83      	ldr	r2, [pc, #524]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002d16:	f043 0304 	orr.w	r3, r3, #4
 8002d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1c:	4b81      	ldr	r3, [pc, #516]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d20:	4a80      	ldr	r2, [pc, #512]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6713      	str	r3, [r2, #112]	; 0x70
 8002d28:	e00b      	b.n	8002d42 <HAL_RCC_OscConfig+0x5a6>
 8002d2a:	4b7e      	ldr	r3, [pc, #504]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	4a7d      	ldr	r2, [pc, #500]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	6713      	str	r3, [r2, #112]	; 0x70
 8002d36:	4b7b      	ldr	r3, [pc, #492]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3a:	4a7a      	ldr	r2, [pc, #488]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002d3c:	f023 0304 	bic.w	r3, r3, #4
 8002d40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d015      	beq.n	8002d76 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4a:	f7fe fdfd 	bl	8001948 <HAL_GetTick>
 8002d4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d50:	e00a      	b.n	8002d68 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d52:	f7fe fdf9 	bl	8001948 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e122      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d68:	4b6e      	ldr	r3, [pc, #440]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0ee      	beq.n	8002d52 <HAL_RCC_OscConfig+0x5b6>
 8002d74:	e014      	b.n	8002da0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d76:	f7fe fde7 	bl	8001948 <HAL_GetTick>
 8002d7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7e:	f7fe fde3 	bl	8001948 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e10c      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d94:	4b63      	ldr	r3, [pc, #396]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1ee      	bne.n	8002d7e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8101 	beq.w	8002fac <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002daa:	4b5e      	ldr	r3, [pc, #376]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002db2:	2b18      	cmp	r3, #24
 8002db4:	f000 80bc 	beq.w	8002f30 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	f040 8095 	bne.w	8002eec <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc2:	4b58      	ldr	r3, [pc, #352]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a57      	ldr	r2, [pc, #348]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002dc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dce:	f7fe fdbb 	bl	8001948 <HAL_GetTick>
 8002dd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7fe fdb7 	bl	8001948 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e0e2      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002de8:	4b4e      	ldr	r3, [pc, #312]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f0      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002df4:	4b4b      	ldr	r3, [pc, #300]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002df8:	4b4b      	ldr	r3, [pc, #300]	; (8002f28 <HAL_RCC_OscConfig+0x78c>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e04:	0112      	lsls	r2, r2, #4
 8002e06:	430a      	orrs	r2, r1
 8002e08:	4946      	ldr	r1, [pc, #280]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	628b      	str	r3, [r1, #40]	; 0x28
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	3b01      	subs	r3, #1
 8002e14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	025b      	lsls	r3, r3, #9
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	041b      	lsls	r3, r3, #16
 8002e2c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e36:	3b01      	subs	r3, #1
 8002e38:	061b      	lsls	r3, r3, #24
 8002e3a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002e3e:	4939      	ldr	r1, [pc, #228]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002e44:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	4a36      	ldr	r2, [pc, #216]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e50:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e54:	4b35      	ldr	r3, [pc, #212]	; (8002f2c <HAL_RCC_OscConfig+0x790>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e5c:	00d2      	lsls	r2, r2, #3
 8002e5e:	4931      	ldr	r1, [pc, #196]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e64:	4b2f      	ldr	r3, [pc, #188]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e68:	f023 020c 	bic.w	r2, r3, #12
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	492c      	ldr	r1, [pc, #176]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e76:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7a:	f023 0202 	bic.w	r2, r3, #2
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e82:	4928      	ldr	r1, [pc, #160]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e88:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	4a25      	ldr	r2, [pc, #148]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002e8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e94:	4b23      	ldr	r3, [pc, #140]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	4a22      	ldr	r2, [pc, #136]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ea0:	4b20      	ldr	r3, [pc, #128]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	4a1f      	ldr	r2, [pc, #124]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002ea6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002eac:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	4a1c      	ldr	r2, [pc, #112]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb8:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fd40 	bl	8001948 <HAL_GetTick>
 8002ec8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fe fd3c 	bl	8001948 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e067      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x730>
 8002eea:	e05f      	b.n	8002fac <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eec:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a0c      	ldr	r2, [pc, #48]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002ef2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fd26 	bl	8001948 <HAL_GetTick>
 8002efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f00:	f7fe fd22 	bl	8001948 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e04d      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f12:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x764>
 8002f1e:	e045      	b.n	8002fac <HAL_RCC_OscConfig+0x810>
 8002f20:	58024800 	.word	0x58024800
 8002f24:	58024400 	.word	0x58024400
 8002f28:	fffffc0c 	.word	0xfffffc0c
 8002f2c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f30:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <HAL_RCC_OscConfig+0x81c>)
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <HAL_RCC_OscConfig+0x81c>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d031      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f003 0203 	and.w	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d12a      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	091b      	lsrs	r3, r3, #4
 8002f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d122      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d11a      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	0a5b      	lsrs	r3, r3, #9
 8002f76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d111      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	0c1b      	lsrs	r3, r3, #16
 8002f88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d108      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	0e1b      	lsrs	r3, r3, #24
 8002f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3730      	adds	r7, #48	; 0x30
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	58024400 	.word	0x58024400

08002fbc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e19c      	b.n	800330a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd0:	4b8a      	ldr	r3, [pc, #552]	; (80031fc <HAL_RCC_ClockConfig+0x240>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d910      	bls.n	8003000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	4b87      	ldr	r3, [pc, #540]	; (80031fc <HAL_RCC_ClockConfig+0x240>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 020f 	bic.w	r2, r3, #15
 8002fe6:	4985      	ldr	r1, [pc, #532]	; (80031fc <HAL_RCC_ClockConfig+0x240>)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b83      	ldr	r3, [pc, #524]	; (80031fc <HAL_RCC_ClockConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e184      	b.n	800330a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d010      	beq.n	800302e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	4b7b      	ldr	r3, [pc, #492]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 8003012:	699b      	ldr	r3, [r3, #24]
 8003014:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003018:	429a      	cmp	r2, r3
 800301a:	d908      	bls.n	800302e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800301c:	4b78      	ldr	r3, [pc, #480]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	4975      	ldr	r1, [pc, #468]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 800302a:	4313      	orrs	r3, r2
 800302c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d010      	beq.n	800305c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	4b70      	ldr	r3, [pc, #448]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003046:	429a      	cmp	r2, r3
 8003048:	d908      	bls.n	800305c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800304a:	4b6d      	ldr	r3, [pc, #436]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	496a      	ldr	r1, [pc, #424]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 8003058:	4313      	orrs	r3, r2
 800305a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b00      	cmp	r3, #0
 8003066:	d010      	beq.n	800308a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699a      	ldr	r2, [r3, #24]
 800306c:	4b64      	ldr	r3, [pc, #400]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003074:	429a      	cmp	r2, r3
 8003076:	d908      	bls.n	800308a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003078:	4b61      	ldr	r3, [pc, #388]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	495e      	ldr	r1, [pc, #376]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 8003086:	4313      	orrs	r3, r2
 8003088:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	d010      	beq.n	80030b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69da      	ldr	r2, [r3, #28]
 800309a:	4b59      	ldr	r3, [pc, #356]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d908      	bls.n	80030b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80030a6:	4b56      	ldr	r3, [pc, #344]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	4953      	ldr	r1, [pc, #332]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d010      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	4b4d      	ldr	r3, [pc, #308]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d908      	bls.n	80030e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d4:	4b4a      	ldr	r3, [pc, #296]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f023 020f 	bic.w	r2, r3, #15
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4947      	ldr	r1, [pc, #284]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d055      	beq.n	800319e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030f2:	4b43      	ldr	r3, [pc, #268]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	4940      	ldr	r1, [pc, #256]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 8003100:	4313      	orrs	r3, r2
 8003102:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d107      	bne.n	800311c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800310c:	4b3c      	ldr	r3, [pc, #240]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d121      	bne.n	800315c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0f6      	b.n	800330a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b03      	cmp	r3, #3
 8003122:	d107      	bne.n	8003134 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003124:	4b36      	ldr	r3, [pc, #216]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d115      	bne.n	800315c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0ea      	b.n	800330a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b01      	cmp	r3, #1
 800313a:	d107      	bne.n	800314c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800313c:	4b30      	ldr	r3, [pc, #192]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d109      	bne.n	800315c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0de      	b.n	800330a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800314c:	4b2c      	ldr	r3, [pc, #176]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0d6      	b.n	800330a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800315c:	4b28      	ldr	r3, [pc, #160]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	f023 0207 	bic.w	r2, r3, #7
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4925      	ldr	r1, [pc, #148]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 800316a:	4313      	orrs	r3, r2
 800316c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316e:	f7fe fbeb 	bl	8001948 <HAL_GetTick>
 8003172:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003174:	e00a      	b.n	800318c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003176:	f7fe fbe7 	bl	8001948 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	; 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e0be      	b.n	800330a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318c:	4b1c      	ldr	r3, [pc, #112]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	429a      	cmp	r2, r3
 800319c:	d1eb      	bne.n	8003176 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d010      	beq.n	80031cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	4b14      	ldr	r3, [pc, #80]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d208      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ba:	4b11      	ldr	r3, [pc, #68]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f023 020f 	bic.w	r2, r3, #15
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	490e      	ldr	r1, [pc, #56]	; (8003200 <HAL_RCC_ClockConfig+0x244>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_ClockConfig+0x240>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d214      	bcs.n	8003204 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <HAL_RCC_ClockConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 020f 	bic.w	r2, r3, #15
 80031e2:	4906      	ldr	r1, [pc, #24]	; (80031fc <HAL_RCC_ClockConfig+0x240>)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b04      	ldr	r3, [pc, #16]	; (80031fc <HAL_RCC_ClockConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e086      	b.n	800330a <HAL_RCC_ClockConfig+0x34e>
 80031fc:	52002000 	.word	0x52002000
 8003200:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d010      	beq.n	8003232 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	4b3f      	ldr	r3, [pc, #252]	; (8003314 <HAL_RCC_ClockConfig+0x358>)
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800321c:	429a      	cmp	r2, r3
 800321e:	d208      	bcs.n	8003232 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003220:	4b3c      	ldr	r3, [pc, #240]	; (8003314 <HAL_RCC_ClockConfig+0x358>)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	4939      	ldr	r1, [pc, #228]	; (8003314 <HAL_RCC_ClockConfig+0x358>)
 800322e:	4313      	orrs	r3, r2
 8003230:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	d010      	beq.n	8003260 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	4b34      	ldr	r3, [pc, #208]	; (8003314 <HAL_RCC_ClockConfig+0x358>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800324a:	429a      	cmp	r2, r3
 800324c:	d208      	bcs.n	8003260 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800324e:	4b31      	ldr	r3, [pc, #196]	; (8003314 <HAL_RCC_ClockConfig+0x358>)
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	492e      	ldr	r1, [pc, #184]	; (8003314 <HAL_RCC_ClockConfig+0x358>)
 800325c:	4313      	orrs	r3, r2
 800325e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	d010      	beq.n	800328e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	4b28      	ldr	r3, [pc, #160]	; (8003314 <HAL_RCC_ClockConfig+0x358>)
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003278:	429a      	cmp	r2, r3
 800327a:	d208      	bcs.n	800328e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800327c:	4b25      	ldr	r3, [pc, #148]	; (8003314 <HAL_RCC_ClockConfig+0x358>)
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	4922      	ldr	r1, [pc, #136]	; (8003314 <HAL_RCC_ClockConfig+0x358>)
 800328a:	4313      	orrs	r3, r2
 800328c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b00      	cmp	r3, #0
 8003298:	d010      	beq.n	80032bc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <HAL_RCC_ClockConfig+0x358>)
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d208      	bcs.n	80032bc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032aa:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <HAL_RCC_ClockConfig+0x358>)
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	4917      	ldr	r1, [pc, #92]	; (8003314 <HAL_RCC_ClockConfig+0x358>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032bc:	f000 f834 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 80032c0:	4602      	mov	r2, r0
 80032c2:	4b14      	ldr	r3, [pc, #80]	; (8003314 <HAL_RCC_ClockConfig+0x358>)
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	0a1b      	lsrs	r3, r3, #8
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	4912      	ldr	r1, [pc, #72]	; (8003318 <HAL_RCC_ClockConfig+0x35c>)
 80032ce:	5ccb      	ldrb	r3, [r1, r3]
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
 80032d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032da:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <HAL_RCC_ClockConfig+0x358>)
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	4a0d      	ldr	r2, [pc, #52]	; (8003318 <HAL_RCC_ClockConfig+0x35c>)
 80032e4:	5cd3      	ldrb	r3, [r2, r3]
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	fa22 f303 	lsr.w	r3, r2, r3
 80032f0:	4a0a      	ldr	r2, [pc, #40]	; (800331c <HAL_RCC_ClockConfig+0x360>)
 80032f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032f4:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <HAL_RCC_ClockConfig+0x364>)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <HAL_RCC_ClockConfig+0x368>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe fad8 	bl	80018b4 <HAL_InitTick>
 8003304:	4603      	mov	r3, r0
 8003306:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003308:	7bfb      	ldrb	r3, [r7, #15]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	58024400 	.word	0x58024400
 8003318:	08008ec8 	.word	0x08008ec8
 800331c:	24000004 	.word	0x24000004
 8003320:	24000000 	.word	0x24000000
 8003324:	2400000c 	.word	0x2400000c

08003328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003328:	b480      	push	{r7}
 800332a:	b089      	sub	sp, #36	; 0x24
 800332c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800332e:	4bb3      	ldr	r3, [pc, #716]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003336:	2b18      	cmp	r3, #24
 8003338:	f200 8155 	bhi.w	80035e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800333c:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <HAL_RCC_GetSysClockFreq+0x1c>)
 800333e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003342:	bf00      	nop
 8003344:	080033a9 	.word	0x080033a9
 8003348:	080035e7 	.word	0x080035e7
 800334c:	080035e7 	.word	0x080035e7
 8003350:	080035e7 	.word	0x080035e7
 8003354:	080035e7 	.word	0x080035e7
 8003358:	080035e7 	.word	0x080035e7
 800335c:	080035e7 	.word	0x080035e7
 8003360:	080035e7 	.word	0x080035e7
 8003364:	080033cf 	.word	0x080033cf
 8003368:	080035e7 	.word	0x080035e7
 800336c:	080035e7 	.word	0x080035e7
 8003370:	080035e7 	.word	0x080035e7
 8003374:	080035e7 	.word	0x080035e7
 8003378:	080035e7 	.word	0x080035e7
 800337c:	080035e7 	.word	0x080035e7
 8003380:	080035e7 	.word	0x080035e7
 8003384:	080033d5 	.word	0x080033d5
 8003388:	080035e7 	.word	0x080035e7
 800338c:	080035e7 	.word	0x080035e7
 8003390:	080035e7 	.word	0x080035e7
 8003394:	080035e7 	.word	0x080035e7
 8003398:	080035e7 	.word	0x080035e7
 800339c:	080035e7 	.word	0x080035e7
 80033a0:	080035e7 	.word	0x080035e7
 80033a4:	080033db 	.word	0x080033db
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033a8:	4b94      	ldr	r3, [pc, #592]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d009      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80033b4:	4b91      	ldr	r3, [pc, #580]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	08db      	lsrs	r3, r3, #3
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	4a90      	ldr	r2, [pc, #576]	; (8003600 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
 80033c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80033c6:	e111      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80033c8:	4b8d      	ldr	r3, [pc, #564]	; (8003600 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033ca:	61bb      	str	r3, [r7, #24]
    break;
 80033cc:	e10e      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80033ce:	4b8d      	ldr	r3, [pc, #564]	; (8003604 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033d0:	61bb      	str	r3, [r7, #24]
    break;
 80033d2:	e10b      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80033d4:	4b8c      	ldr	r3, [pc, #560]	; (8003608 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80033d6:	61bb      	str	r3, [r7, #24]
    break;
 80033d8:	e108      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033da:	4b88      	ldr	r3, [pc, #544]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80033e4:	4b85      	ldr	r3, [pc, #532]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033f0:	4b82      	ldr	r3, [pc, #520]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80033fa:	4b80      	ldr	r3, [pc, #512]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	08db      	lsrs	r3, r3, #3
 8003400:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	ee07 3a90 	vmov	s15, r3
 800340e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003412:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80e1 	beq.w	80035e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2b02      	cmp	r3, #2
 8003422:	f000 8083 	beq.w	800352c <HAL_RCC_GetSysClockFreq+0x204>
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b02      	cmp	r3, #2
 800342a:	f200 80a1 	bhi.w	8003570 <HAL_RCC_GetSysClockFreq+0x248>
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0x114>
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d056      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800343a:	e099      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800343c:	4b6f      	ldr	r3, [pc, #444]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d02d      	beq.n	80034a4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003448:	4b6c      	ldr	r3, [pc, #432]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	08db      	lsrs	r3, r3, #3
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	4a6b      	ldr	r2, [pc, #428]	; (8003600 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003454:	fa22 f303 	lsr.w	r3, r2, r3
 8003458:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	ee07 3a90 	vmov	s15, r3
 8003460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	ee07 3a90 	vmov	s15, r3
 800346a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003472:	4b62      	ldr	r3, [pc, #392]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003482:	ed97 6a02 	vldr	s12, [r7, #8]
 8003486:	eddf 5a61 	vldr	s11, [pc, #388]	; 800360c <HAL_RCC_GetSysClockFreq+0x2e4>
 800348a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800348e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800349a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80034a2:	e087      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	ee07 3a90 	vmov	s15, r3
 80034aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003610 <HAL_RCC_GetSysClockFreq+0x2e8>
 80034b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034b6:	4b51      	ldr	r3, [pc, #324]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034be:	ee07 3a90 	vmov	s15, r3
 80034c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800360c <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034e6:	e065      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	ee07 3a90 	vmov	s15, r3
 80034ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003614 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034fa:	4b40      	ldr	r3, [pc, #256]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003502:	ee07 3a90 	vmov	s15, r3
 8003506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800350a:	ed97 6a02 	vldr	s12, [r7, #8]
 800350e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800360c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800351a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800351e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003526:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800352a:	e043      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	ee07 3a90 	vmov	s15, r3
 8003532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003536:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003618 <HAL_RCC_GetSysClockFreq+0x2f0>
 800353a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800353e:	4b2f      	ldr	r3, [pc, #188]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800354e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003552:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800360c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800355a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800355e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800356a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800356e:	e021      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800357a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003614 <HAL_RCC_GetSysClockFreq+0x2ec>
 800357e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003582:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358a:	ee07 3a90 	vmov	s15, r3
 800358e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003592:	ed97 6a02 	vldr	s12, [r7, #8]
 8003596:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800360c <HAL_RCC_GetSysClockFreq+0x2e4>
 800359a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800359e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035b2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035be:	3301      	adds	r3, #1
 80035c0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	ee07 3a90 	vmov	s15, r3
 80035c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80035d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035d8:	ee17 3a90 	vmov	r3, s15
 80035dc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80035de:	e005      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61bb      	str	r3, [r7, #24]
    break;
 80035e4:	e002      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80035e6:	4b07      	ldr	r3, [pc, #28]	; (8003604 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035e8:	61bb      	str	r3, [r7, #24]
    break;
 80035ea:	bf00      	nop
  }

  return sysclockfreq;
 80035ec:	69bb      	ldr	r3, [r7, #24]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3724      	adds	r7, #36	; 0x24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	58024400 	.word	0x58024400
 8003600:	03d09000 	.word	0x03d09000
 8003604:	003d0900 	.word	0x003d0900
 8003608:	007a1200 	.word	0x007a1200
 800360c:	46000000 	.word	0x46000000
 8003610:	4c742400 	.word	0x4c742400
 8003614:	4a742400 	.word	0x4a742400
 8003618:	4af42400 	.word	0x4af42400

0800361c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003624:	2300      	movs	r3, #0
 8003626:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003628:	2300      	movs	r3, #0
 800362a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d03f      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800363c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003640:	d02a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003642:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003646:	d824      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003648:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800364c:	d018      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800364e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003652:	d81e      	bhi.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003658:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800365c:	d007      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800365e:	e018      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003660:	4bab      	ldr	r3, [pc, #684]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	4aaa      	ldr	r2, [pc, #680]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800366a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800366c:	e015      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3304      	adds	r3, #4
 8003672:	2102      	movs	r1, #2
 8003674:	4618      	mov	r0, r3
 8003676:	f000 ff11 	bl	800449c <RCCEx_PLL2_Config>
 800367a:	4603      	mov	r3, r0
 800367c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800367e:	e00c      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3324      	adds	r3, #36	; 0x24
 8003684:	2102      	movs	r1, #2
 8003686:	4618      	mov	r0, r3
 8003688:	f000 ffba 	bl	8004600 <RCCEx_PLL3_Config>
 800368c:	4603      	mov	r3, r0
 800368e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003690:	e003      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	75fb      	strb	r3, [r7, #23]
      break;
 8003696:	e000      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800369a:	7dfb      	ldrb	r3, [r7, #23]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d109      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036a0:	4b9b      	ldr	r3, [pc, #620]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ac:	4998      	ldr	r1, [pc, #608]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	650b      	str	r3, [r1, #80]	; 0x50
 80036b2:	e001      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b4:	7dfb      	ldrb	r3, [r7, #23]
 80036b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d03d      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d826      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80036cc:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80036ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d2:	bf00      	nop
 80036d4:	080036e9 	.word	0x080036e9
 80036d8:	080036f7 	.word	0x080036f7
 80036dc:	08003709 	.word	0x08003709
 80036e0:	08003721 	.word	0x08003721
 80036e4:	08003721 	.word	0x08003721
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e8:	4b89      	ldr	r3, [pc, #548]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	4a88      	ldr	r2, [pc, #544]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036f4:	e015      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3304      	adds	r3, #4
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fecd 	bl	800449c <RCCEx_PLL2_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003706:	e00c      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3324      	adds	r3, #36	; 0x24
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f000 ff76 	bl	8004600 <RCCEx_PLL3_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003718:	e003      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	75fb      	strb	r3, [r7, #23]
      break;
 800371e:	e000      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003722:	7dfb      	ldrb	r3, [r7, #23]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003728:	4b79      	ldr	r3, [pc, #484]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800372a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372c:	f023 0207 	bic.w	r2, r3, #7
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003734:	4976      	ldr	r1, [pc, #472]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003736:	4313      	orrs	r3, r2
 8003738:	650b      	str	r3, [r1, #80]	; 0x50
 800373a:	e001      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373c:	7dfb      	ldrb	r3, [r7, #23]
 800373e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003748:	2b00      	cmp	r3, #0
 800374a:	d042      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003754:	d02b      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375a:	d825      	bhi.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800375c:	2bc0      	cmp	r3, #192	; 0xc0
 800375e:	d028      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003760:	2bc0      	cmp	r3, #192	; 0xc0
 8003762:	d821      	bhi.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003764:	2b80      	cmp	r3, #128	; 0x80
 8003766:	d016      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003768:	2b80      	cmp	r3, #128	; 0x80
 800376a:	d81d      	bhi.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003770:	2b40      	cmp	r3, #64	; 0x40
 8003772:	d007      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003774:	e018      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003776:	4b66      	ldr	r3, [pc, #408]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	4a65      	ldr	r2, [pc, #404]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800377c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003780:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003782:	e017      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3304      	adds	r3, #4
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fe86 	bl	800449c <RCCEx_PLL2_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003794:	e00e      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3324      	adds	r3, #36	; 0x24
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f000 ff2f 	bl	8004600 <RCCEx_PLL3_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037a6:	e005      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	75fb      	strb	r3, [r7, #23]
      break;
 80037ac:	e002      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80037ae:	bf00      	nop
 80037b0:	e000      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80037b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037b4:	7dfb      	ldrb	r3, [r7, #23]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80037ba:	4b55      	ldr	r3, [pc, #340]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037be:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c6:	4952      	ldr	r1, [pc, #328]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	650b      	str	r3, [r1, #80]	; 0x50
 80037cc:	e001      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ce:	7dfb      	ldrb	r3, [r7, #23]
 80037d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d049      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037e8:	d030      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80037ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037ee:	d82a      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037f4:	d02c      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80037f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037fa:	d824      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003800:	d018      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003806:	d81e      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800380c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003810:	d007      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003812:	e018      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003814:	4b3e      	ldr	r3, [pc, #248]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	4a3d      	ldr	r2, [pc, #244]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800381a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003820:	e017      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3304      	adds	r3, #4
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fe37 	bl	800449c <RCCEx_PLL2_Config>
 800382e:	4603      	mov	r3, r0
 8003830:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003832:	e00e      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3324      	adds	r3, #36	; 0x24
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fee0 	bl	8004600 <RCCEx_PLL3_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003844:	e005      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	75fb      	strb	r3, [r7, #23]
      break;
 800384a:	e002      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800384c:	bf00      	nop
 800384e:	e000      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003852:	7dfb      	ldrb	r3, [r7, #23]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003858:	4b2d      	ldr	r3, [pc, #180]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800385a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003866:	492a      	ldr	r1, [pc, #168]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003868:	4313      	orrs	r3, r2
 800386a:	658b      	str	r3, [r1, #88]	; 0x58
 800386c:	e001      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386e:	7dfb      	ldrb	r3, [r7, #23]
 8003870:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387a:	2b00      	cmp	r3, #0
 800387c:	d04c      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003884:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003888:	d030      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800388a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800388e:	d82a      	bhi.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003890:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003894:	d02c      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003896:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800389a:	d824      	bhi.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800389c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038a0:	d018      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80038a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038a6:	d81e      	bhi.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80038ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b0:	d007      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80038b2:	e018      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b4:	4b16      	ldr	r3, [pc, #88]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	4a15      	ldr	r2, [pc, #84]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038c0:	e017      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3304      	adds	r3, #4
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fde7 	bl	800449c <RCCEx_PLL2_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80038d2:	e00e      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3324      	adds	r3, #36	; 0x24
 80038d8:	2100      	movs	r1, #0
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fe90 	bl	8004600 <RCCEx_PLL3_Config>
 80038e0:	4603      	mov	r3, r0
 80038e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038e4:	e005      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	75fb      	strb	r3, [r7, #23]
      break;
 80038ea:	e002      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80038ec:	bf00      	nop
 80038ee:	e000      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80038f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10d      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038fc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003906:	4902      	ldr	r1, [pc, #8]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003908:	4313      	orrs	r3, r2
 800390a:	658b      	str	r3, [r1, #88]	; 0x58
 800390c:	e004      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800390e:	bf00      	nop
 8003910:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	7dfb      	ldrb	r3, [r7, #23]
 8003916:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d032      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003928:	2b30      	cmp	r3, #48	; 0x30
 800392a:	d01c      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800392c:	2b30      	cmp	r3, #48	; 0x30
 800392e:	d817      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003930:	2b20      	cmp	r3, #32
 8003932:	d00c      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003934:	2b20      	cmp	r3, #32
 8003936:	d813      	bhi.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d016      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800393c:	2b10      	cmp	r3, #16
 800393e:	d10f      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003940:	4baf      	ldr	r3, [pc, #700]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	4aae      	ldr	r2, [pc, #696]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800394a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800394c:	e00e      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3304      	adds	r3, #4
 8003952:	2102      	movs	r1, #2
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fda1 	bl	800449c <RCCEx_PLL2_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800395e:	e005      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	75fb      	strb	r3, [r7, #23]
      break;
 8003964:	e002      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003966:	bf00      	nop
 8003968:	e000      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800396a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003972:	4ba3      	ldr	r3, [pc, #652]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003976:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397e:	49a0      	ldr	r1, [pc, #640]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003980:	4313      	orrs	r3, r2
 8003982:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003984:	e001      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003986:	7dfb      	ldrb	r3, [r7, #23]
 8003988:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d047      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800399e:	d030      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80039a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039a4:	d82a      	bhi.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80039a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039aa:	d02c      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80039ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80039b0:	d824      	bhi.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80039b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b6:	d018      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80039b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039bc:	d81e      	bhi.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80039c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c6:	d007      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80039c8:	e018      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ca:	4b8d      	ldr	r3, [pc, #564]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	4a8c      	ldr	r2, [pc, #560]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039d6:	e017      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3304      	adds	r3, #4
 80039dc:	2100      	movs	r1, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fd5c 	bl	800449c <RCCEx_PLL2_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039e8:	e00e      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3324      	adds	r3, #36	; 0x24
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fe05 	bl	8004600 <RCCEx_PLL3_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039fa:	e005      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003a00:	e002      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003a02:	bf00      	nop
 8003a04:	e000      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a0e:	4b7c      	ldr	r3, [pc, #496]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a12:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	4979      	ldr	r1, [pc, #484]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	650b      	str	r3, [r1, #80]	; 0x50
 8003a20:	e001      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d049      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a3a:	d02e      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a40:	d828      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003a42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a46:	d02a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003a48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a4c:	d822      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003a4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a52:	d026      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003a54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a58:	d81c      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003a5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a5e:	d010      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003a60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a64:	d816      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d01d      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6e:	d111      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	2101      	movs	r1, #1
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fd10 	bl	800449c <RCCEx_PLL2_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a80:	e012      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3324      	adds	r3, #36	; 0x24
 8003a86:	2101      	movs	r1, #1
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fdb9 	bl	8004600 <RCCEx_PLL3_Config>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a92:	e009      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	75fb      	strb	r3, [r7, #23]
      break;
 8003a98:	e006      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e004      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003a9e:	bf00      	nop
 8003aa0:	e002      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e000      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003aa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003aae:	4b54      	ldr	r3, [pc, #336]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aba:	4951      	ldr	r1, [pc, #324]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	650b      	str	r3, [r1, #80]	; 0x50
 8003ac0:	e001      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac2:	7dfb      	ldrb	r3, [r7, #23]
 8003ac4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d04b      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003adc:	d02e      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ae2:	d828      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae8:	d02a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aee:	d822      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003af0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003af4:	d026      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003af6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003afa:	d81c      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b00:	d010      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b06:	d816      	bhi.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d01d      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003b0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b10:	d111      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3304      	adds	r3, #4
 8003b16:	2101      	movs	r1, #1
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fcbf 	bl	800449c <RCCEx_PLL2_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b22:	e012      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3324      	adds	r3, #36	; 0x24
 8003b28:	2101      	movs	r1, #1
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fd68 	bl	8004600 <RCCEx_PLL3_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b34:	e009      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	75fb      	strb	r3, [r7, #23]
      break;
 8003b3a:	e006      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003b3c:	bf00      	nop
 8003b3e:	e004      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003b40:	bf00      	nop
 8003b42:	e002      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003b44:	bf00      	nop
 8003b46:	e000      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b50:	4b2b      	ldr	r3, [pc, #172]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b54:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b5e:	4928      	ldr	r1, [pc, #160]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	658b      	str	r3, [r1, #88]	; 0x58
 8003b64:	e001      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
 8003b68:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d02f      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b7e:	d00e      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b84:	d814      	bhi.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d015      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003b8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b8e:	d10f      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b90:	4b1b      	ldr	r3, [pc, #108]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	4a1a      	ldr	r2, [pc, #104]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b9c:	e00c      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fc79 	bl	800449c <RCCEx_PLL2_Config>
 8003baa:	4603      	mov	r3, r0
 8003bac:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003bae:	e003      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb4:	e000      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003bb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bca:	490d      	ldr	r1, [pc, #52]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	650b      	str	r3, [r1, #80]	; 0x50
 8003bd0:	e001      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd2:	7dfb      	ldrb	r3, [r7, #23]
 8003bd4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d033      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	d81c      	bhi.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003bea:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c2b 	.word	0x08003c2b
 8003bf4:	08003c05 	.word	0x08003c05
 8003bf8:	08003c13 	.word	0x08003c13
 8003bfc:	08003c2b 	.word	0x08003c2b
 8003c00:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c04:	4bb8      	ldr	r3, [pc, #736]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	4ab7      	ldr	r2, [pc, #732]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c10:	e00c      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3304      	adds	r3, #4
 8003c16:	2102      	movs	r1, #2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fc3f 	bl	800449c <RCCEx_PLL2_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c22:	e003      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	75fb      	strb	r3, [r7, #23]
      break;
 8003c28:	e000      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003c2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c32:	4bad      	ldr	r3, [pc, #692]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c36:	f023 0203 	bic.w	r2, r3, #3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	49aa      	ldr	r1, [pc, #680]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c44:	e001      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
 8003c48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 8086 	beq.w	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c58:	4ba4      	ldr	r3, [pc, #656]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4aa3      	ldr	r2, [pc, #652]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c64:	f7fd fe70 	bl	8001948 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c6a:	e009      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6c:	f7fd fe6c 	bl	8001948 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d902      	bls.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	75fb      	strb	r3, [r7, #23]
        break;
 8003c7e:	e005      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c80:	4b9a      	ldr	r3, [pc, #616]	; (8003eec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0ef      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d166      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c92:	4b95      	ldr	r3, [pc, #596]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c9c:	4053      	eors	r3, r2
 8003c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d013      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ca6:	4b90      	ldr	r3, [pc, #576]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cb0:	4b8d      	ldr	r3, [pc, #564]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb4:	4a8c      	ldr	r2, [pc, #560]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cbc:	4b8a      	ldr	r3, [pc, #552]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc0:	4a89      	ldr	r2, [pc, #548]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003cc8:	4a87      	ldr	r2, [pc, #540]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cd8:	d115      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cda:	f7fd fe35 	bl	8001948 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ce0:	e00b      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce2:	f7fd fe31 	bl	8001948 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d902      	bls.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	75fb      	strb	r3, [r7, #23]
            break;
 8003cf8:	e005      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cfa:	4b7b      	ldr	r3, [pc, #492]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0ed      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003d06:	7dfb      	ldrb	r3, [r7, #23]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d126      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d1a:	d10d      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003d1c:	4b72      	ldr	r3, [pc, #456]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d2a:	0919      	lsrs	r1, r3, #4
 8003d2c:	4b70      	ldr	r3, [pc, #448]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003d2e:	400b      	ands	r3, r1
 8003d30:	496d      	ldr	r1, [pc, #436]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	610b      	str	r3, [r1, #16]
 8003d36:	e005      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003d38:	4b6b      	ldr	r3, [pc, #428]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	4a6a      	ldr	r2, [pc, #424]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d42:	6113      	str	r3, [r2, #16]
 8003d44:	4b68      	ldr	r3, [pc, #416]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d52:	4965      	ldr	r1, [pc, #404]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	670b      	str	r3, [r1, #112]	; 0x70
 8003d58:	e004      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d5a:	7dfb      	ldrb	r3, [r7, #23]
 8003d5c:	75bb      	strb	r3, [r7, #22]
 8003d5e:	e001      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
 8003d62:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d07e      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d74:	2b28      	cmp	r3, #40	; 0x28
 8003d76:	d867      	bhi.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003e4f 	.word	0x08003e4f
 8003d84:	08003e49 	.word	0x08003e49
 8003d88:	08003e49 	.word	0x08003e49
 8003d8c:	08003e49 	.word	0x08003e49
 8003d90:	08003e49 	.word	0x08003e49
 8003d94:	08003e49 	.word	0x08003e49
 8003d98:	08003e49 	.word	0x08003e49
 8003d9c:	08003e49 	.word	0x08003e49
 8003da0:	08003e25 	.word	0x08003e25
 8003da4:	08003e49 	.word	0x08003e49
 8003da8:	08003e49 	.word	0x08003e49
 8003dac:	08003e49 	.word	0x08003e49
 8003db0:	08003e49 	.word	0x08003e49
 8003db4:	08003e49 	.word	0x08003e49
 8003db8:	08003e49 	.word	0x08003e49
 8003dbc:	08003e49 	.word	0x08003e49
 8003dc0:	08003e37 	.word	0x08003e37
 8003dc4:	08003e49 	.word	0x08003e49
 8003dc8:	08003e49 	.word	0x08003e49
 8003dcc:	08003e49 	.word	0x08003e49
 8003dd0:	08003e49 	.word	0x08003e49
 8003dd4:	08003e49 	.word	0x08003e49
 8003dd8:	08003e49 	.word	0x08003e49
 8003ddc:	08003e49 	.word	0x08003e49
 8003de0:	08003e4f 	.word	0x08003e4f
 8003de4:	08003e49 	.word	0x08003e49
 8003de8:	08003e49 	.word	0x08003e49
 8003dec:	08003e49 	.word	0x08003e49
 8003df0:	08003e49 	.word	0x08003e49
 8003df4:	08003e49 	.word	0x08003e49
 8003df8:	08003e49 	.word	0x08003e49
 8003dfc:	08003e49 	.word	0x08003e49
 8003e00:	08003e4f 	.word	0x08003e4f
 8003e04:	08003e49 	.word	0x08003e49
 8003e08:	08003e49 	.word	0x08003e49
 8003e0c:	08003e49 	.word	0x08003e49
 8003e10:	08003e49 	.word	0x08003e49
 8003e14:	08003e49 	.word	0x08003e49
 8003e18:	08003e49 	.word	0x08003e49
 8003e1c:	08003e49 	.word	0x08003e49
 8003e20:	08003e4f 	.word	0x08003e4f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3304      	adds	r3, #4
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fb36 	bl	800449c <RCCEx_PLL2_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e34:	e00c      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3324      	adds	r3, #36	; 0x24
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fbdf 	bl	8004600 <RCCEx_PLL3_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003e46:	e003      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e4c:	e000      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d109      	bne.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e56:	4b24      	ldr	r3, [pc, #144]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e62:	4921      	ldr	r1, [pc, #132]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	654b      	str	r3, [r1, #84]	; 0x54
 8003e68:	e001      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6a:	7dfb      	ldrb	r3, [r7, #23]
 8003e6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d03e      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7e:	2b05      	cmp	r3, #5
 8003e80:	d820      	bhi.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003e82:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e88:	08003ecb 	.word	0x08003ecb
 8003e8c:	08003ea1 	.word	0x08003ea1
 8003e90:	08003eb3 	.word	0x08003eb3
 8003e94:	08003ecb 	.word	0x08003ecb
 8003e98:	08003ecb 	.word	0x08003ecb
 8003e9c:	08003ecb 	.word	0x08003ecb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 faf8 	bl	800449c <RCCEx_PLL2_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003eb0:	e00c      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3324      	adds	r3, #36	; 0x24
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fba1 	bl	8004600 <RCCEx_PLL3_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003ec2:	e003      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ec8:	e000      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003eca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ecc:	7dfb      	ldrb	r3, [r7, #23]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d110      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ed2:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	f023 0207 	bic.w	r2, r3, #7
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ede:	4902      	ldr	r1, [pc, #8]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	654b      	str	r3, [r1, #84]	; 0x54
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003ee6:	bf00      	nop
 8003ee8:	58024400 	.word	0x58024400
 8003eec:	58024800 	.word	0x58024800
 8003ef0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef4:	7dfb      	ldrb	r3, [r7, #23]
 8003ef6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d039      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0a:	2b05      	cmp	r3, #5
 8003f0c:	d820      	bhi.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003f0e:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f14:	08003f57 	.word	0x08003f57
 8003f18:	08003f2d 	.word	0x08003f2d
 8003f1c:	08003f3f 	.word	0x08003f3f
 8003f20:	08003f57 	.word	0x08003f57
 8003f24:	08003f57 	.word	0x08003f57
 8003f28:	08003f57 	.word	0x08003f57
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	2101      	movs	r1, #1
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fab2 	bl	800449c <RCCEx_PLL2_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f3c:	e00c      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3324      	adds	r3, #36	; 0x24
 8003f42:	2101      	movs	r1, #1
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fb5b 	bl	8004600 <RCCEx_PLL3_Config>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f4e:	e003      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	75fb      	strb	r3, [r7, #23]
      break;
 8003f54:	e000      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10a      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f5e:	4bb7      	ldr	r3, [pc, #732]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f62:	f023 0207 	bic.w	r2, r3, #7
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6c:	49b3      	ldr	r1, [pc, #716]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	658b      	str	r3, [r1, #88]	; 0x58
 8003f72:	e001      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f74:	7dfb      	ldrb	r3, [r7, #23]
 8003f76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d04b      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f8e:	d02e      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f94:	d828      	bhi.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f9a:	d02a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa0:	d822      	bhi.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003fa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fa6:	d026      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003fa8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003fac:	d81c      	bhi.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb2:	d010      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb8:	d816      	bhi.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d01d      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fc2:	d111      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fa66 	bl	800449c <RCCEx_PLL2_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003fd4:	e012      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3324      	adds	r3, #36	; 0x24
 8003fda:	2102      	movs	r1, #2
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fb0f 	bl	8004600 <RCCEx_PLL3_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003fe6:	e009      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	75fb      	strb	r3, [r7, #23]
      break;
 8003fec:	e006      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003fee:	bf00      	nop
 8003ff0:	e004      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003ff2:	bf00      	nop
 8003ff4:	e002      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003ff6:	bf00      	nop
 8003ff8:	e000      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10a      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004002:	4b8e      	ldr	r3, [pc, #568]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004006:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004010:	498a      	ldr	r1, [pc, #552]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004012:	4313      	orrs	r3, r2
 8004014:	654b      	str	r3, [r1, #84]	; 0x54
 8004016:	e001      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004018:	7dfb      	ldrb	r3, [r7, #23]
 800401a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b00      	cmp	r3, #0
 8004026:	d04b      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800402e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004032:	d02e      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8004034:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004038:	d828      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800403a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403e:	d02a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004044:	d822      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004046:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800404a:	d026      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800404c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004050:	d81c      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004056:	d010      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800405c:	d816      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01d      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004066:	d111      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3304      	adds	r3, #4
 800406c:	2100      	movs	r1, #0
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fa14 	bl	800449c <RCCEx_PLL2_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004078:	e012      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3324      	adds	r3, #36	; 0x24
 800407e:	2102      	movs	r1, #2
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fabd 	bl	8004600 <RCCEx_PLL3_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800408a:	e009      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	75fb      	strb	r3, [r7, #23]
      break;
 8004090:	e006      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004092:	bf00      	nop
 8004094:	e004      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004096:	bf00      	nop
 8004098:	e002      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800409a:	bf00      	nop
 800409c:	e000      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800409e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10a      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040a6:	4b65      	ldr	r3, [pc, #404]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040b4:	4961      	ldr	r1, [pc, #388]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	658b      	str	r3, [r1, #88]	; 0x58
 80040ba:	e001      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	7dfb      	ldrb	r3, [r7, #23]
 80040be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d04b      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040d6:	d02e      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80040d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80040dc:	d828      	bhi.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80040de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e2:	d02a      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80040e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e8:	d822      	bhi.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80040ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040ee:	d026      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80040f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80040f4:	d81c      	bhi.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80040f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040fa:	d010      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80040fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004100:	d816      	bhi.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8004102:	2b00      	cmp	r3, #0
 8004104:	d01d      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410a:	d111      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3304      	adds	r3, #4
 8004110:	2100      	movs	r1, #0
 8004112:	4618      	mov	r0, r3
 8004114:	f000 f9c2 	bl	800449c <RCCEx_PLL2_Config>
 8004118:	4603      	mov	r3, r0
 800411a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800411c:	e012      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3324      	adds	r3, #36	; 0x24
 8004122:	2102      	movs	r1, #2
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fa6b 	bl	8004600 <RCCEx_PLL3_Config>
 800412a:	4603      	mov	r3, r0
 800412c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800412e:	e009      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	75fb      	strb	r3, [r7, #23]
      break;
 8004134:	e006      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004136:	bf00      	nop
 8004138:	e004      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800413a:	bf00      	nop
 800413c:	e002      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800413e:	bf00      	nop
 8004140:	e000      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8004142:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004144:	7dfb      	ldrb	r3, [r7, #23]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800414a:	4b3c      	ldr	r3, [pc, #240]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800414c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004158:	4938      	ldr	r1, [pc, #224]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800415a:	4313      	orrs	r3, r2
 800415c:	658b      	str	r3, [r1, #88]	; 0x58
 800415e:	e001      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004160:	7dfb      	ldrb	r3, [r7, #23]
 8004162:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01a      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800417a:	d10a      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3324      	adds	r3, #36	; 0x24
 8004180:	2102      	movs	r1, #2
 8004182:	4618      	mov	r0, r3
 8004184:	f000 fa3c 	bl	8004600 <RCCEx_PLL3_Config>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004192:	4b2a      	ldr	r3, [pc, #168]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004196:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041a0:	4926      	ldr	r1, [pc, #152]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d01a      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041bc:	d10a      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3324      	adds	r3, #36	; 0x24
 80041c2:	2102      	movs	r1, #2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 fa1b 	bl	8004600 <RCCEx_PLL3_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041d4:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e2:	4916      	ldr	r1, [pc, #88]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d036      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041fe:	d01f      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004204:	d817      	bhi.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800420a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420e:	d009      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004210:	e011      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3304      	adds	r3, #4
 8004216:	2100      	movs	r1, #0
 8004218:	4618      	mov	r0, r3
 800421a:	f000 f93f 	bl	800449c <RCCEx_PLL2_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004222:	e00e      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3324      	adds	r3, #36	; 0x24
 8004228:	2102      	movs	r1, #2
 800422a:	4618      	mov	r0, r3
 800422c:	f000 f9e8 	bl	8004600 <RCCEx_PLL3_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004234:	e005      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	75fb      	strb	r3, [r7, #23]
      break;
 800423a:	e002      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800423c:	58024400 	.word	0x58024400
      break;
 8004240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004242:	7dfb      	ldrb	r3, [r7, #23]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004248:	4b93      	ldr	r3, [pc, #588]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800424a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004256:	4990      	ldr	r1, [pc, #576]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004258:	4313      	orrs	r3, r2
 800425a:	658b      	str	r3, [r1, #88]	; 0x58
 800425c:	e001      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425e:	7dfb      	ldrb	r3, [r7, #23]
 8004260:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d033      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004274:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004278:	d01c      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800427a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800427e:	d816      	bhi.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004284:	d003      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004286:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800428a:	d007      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800428c:	e00f      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800428e:	4b82      	ldr	r3, [pc, #520]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004292:	4a81      	ldr	r2, [pc, #516]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004298:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800429a:	e00c      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3324      	adds	r3, #36	; 0x24
 80042a0:	2101      	movs	r1, #1
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 f9ac 	bl	8004600 <RCCEx_PLL3_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80042ac:	e003      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	75fb      	strb	r3, [r7, #23]
      break;
 80042b2:	e000      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80042b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042bc:	4b76      	ldr	r3, [pc, #472]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ca:	4973      	ldr	r1, [pc, #460]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	654b      	str	r3, [r1, #84]	; 0x54
 80042d0:	e001      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
 80042d4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d029      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80042ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ee:	d007      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80042f0:	e00f      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f2:	4b69      	ldr	r3, [pc, #420]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	4a68      	ldr	r2, [pc, #416]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80042f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042fe:	e00b      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3304      	adds	r3, #4
 8004304:	2102      	movs	r1, #2
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f8c8 	bl	800449c <RCCEx_PLL2_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004310:	e002      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	75fb      	strb	r3, [r7, #23]
      break;
 8004316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004318:	7dfb      	ldrb	r3, [r7, #23]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800431e:	4b5e      	ldr	r3, [pc, #376]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004322:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432a:	495b      	ldr	r1, [pc, #364]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800432c:	4313      	orrs	r3, r2
 800432e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004330:	e001      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004332:	7dfb      	ldrb	r3, [r7, #23]
 8004334:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3324      	adds	r3, #36	; 0x24
 8004346:	2102      	movs	r1, #2
 8004348:	4618      	mov	r0, r3
 800434a:	f000 f959 	bl	8004600 <RCCEx_PLL3_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d030      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800436c:	d017      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800436e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004372:	d811      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004378:	d013      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800437a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800437e:	d80b      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004380:	2b00      	cmp	r3, #0
 8004382:	d010      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004388:	d106      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800438a:	4b43      	ldr	r3, [pc, #268]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	4a42      	ldr	r2, [pc, #264]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004394:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004396:	e007      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	75fb      	strb	r3, [r7, #23]
      break;
 800439c:	e004      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800439e:	bf00      	nop
 80043a0:	e002      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80043a2:	bf00      	nop
 80043a4:	e000      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80043a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043ae:	4b3a      	ldr	r3, [pc, #232]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043ba:	4937      	ldr	r1, [pc, #220]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	654b      	str	r3, [r1, #84]	; 0x54
 80043c0:	e001      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
 80043c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d008      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043d2:	4b31      	ldr	r3, [pc, #196]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043de:	492e      	ldr	r1, [pc, #184]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80043f0:	4b29      	ldr	r3, [pc, #164]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043fe:	4926      	ldr	r1, [pc, #152]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004400:	4313      	orrs	r3, r2
 8004402:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d008      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004410:	4b21      	ldr	r3, [pc, #132]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004414:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800441c:	491e      	ldr	r1, [pc, #120]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800441e:	4313      	orrs	r3, r2
 8004420:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00d      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800442e:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	4a19      	ldr	r2, [pc, #100]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004434:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004438:	6113      	str	r3, [r2, #16]
 800443a:	4b17      	ldr	r3, [pc, #92]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004444:	4914      	ldr	r1, [pc, #80]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004446:	4313      	orrs	r3, r2
 8004448:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	da08      	bge.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004452:	4b11      	ldr	r3, [pc, #68]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004456:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445e:	490e      	ldr	r1, [pc, #56]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004460:	4313      	orrs	r3, r2
 8004462:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d009      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004474:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	4906      	ldr	r1, [pc, #24]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004480:	4313      	orrs	r3, r2
 8004482:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004484:	7dbb      	ldrb	r3, [r7, #22]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	e000      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
}
 8004490:	4618      	mov	r0, r3
 8004492:	3718      	adds	r7, #24
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	58024400 	.word	0x58024400

0800449c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044aa:	4b53      	ldr	r3, [pc, #332]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d101      	bne.n	80044ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e099      	b.n	80045ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80044ba:	4b4f      	ldr	r3, [pc, #316]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a4e      	ldr	r2, [pc, #312]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 80044c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c6:	f7fd fa3f 	bl	8001948 <HAL_GetTick>
 80044ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044cc:	e008      	b.n	80044e0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80044ce:	f7fd fa3b 	bl	8001948 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e086      	b.n	80045ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80044e0:	4b45      	ldr	r3, [pc, #276]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f0      	bne.n	80044ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80044ec:	4b42      	ldr	r3, [pc, #264]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	031b      	lsls	r3, r3, #12
 80044fa:	493f      	ldr	r1, [pc, #252]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	628b      	str	r3, [r1, #40]	; 0x28
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	3b01      	subs	r3, #1
 8004506:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	3b01      	subs	r3, #1
 8004510:	025b      	lsls	r3, r3, #9
 8004512:	b29b      	uxth	r3, r3
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	3b01      	subs	r3, #1
 800451c:	041b      	lsls	r3, r3, #16
 800451e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	3b01      	subs	r3, #1
 800452a:	061b      	lsls	r3, r3, #24
 800452c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004530:	4931      	ldr	r1, [pc, #196]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 8004532:	4313      	orrs	r3, r2
 8004534:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004536:	4b30      	ldr	r3, [pc, #192]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	492d      	ldr	r1, [pc, #180]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 8004544:	4313      	orrs	r3, r2
 8004546:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004548:	4b2b      	ldr	r3, [pc, #172]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	f023 0220 	bic.w	r2, r3, #32
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	4928      	ldr	r1, [pc, #160]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 8004556:	4313      	orrs	r3, r2
 8004558:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800455a:	4b27      	ldr	r3, [pc, #156]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	4a26      	ldr	r2, [pc, #152]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 8004560:	f023 0310 	bic.w	r3, r3, #16
 8004564:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004566:	4b24      	ldr	r3, [pc, #144]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 8004568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800456a:	4b24      	ldr	r3, [pc, #144]	; (80045fc <RCCEx_PLL2_Config+0x160>)
 800456c:	4013      	ands	r3, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	69d2      	ldr	r2, [r2, #28]
 8004572:	00d2      	lsls	r2, r2, #3
 8004574:	4920      	ldr	r1, [pc, #128]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 8004576:	4313      	orrs	r3, r2
 8004578:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800457a:	4b1f      	ldr	r3, [pc, #124]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	4a1e      	ldr	r2, [pc, #120]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 8004580:	f043 0310 	orr.w	r3, r3, #16
 8004584:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d106      	bne.n	800459a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800458c:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	4a19      	ldr	r2, [pc, #100]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 8004592:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004596:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004598:	e00f      	b.n	80045ba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d106      	bne.n	80045ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80045a0:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	4a14      	ldr	r2, [pc, #80]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 80045a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045ac:	e005      	b.n	80045ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80045ae:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 80045b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b2:	4a11      	ldr	r2, [pc, #68]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 80045b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80045ba:	4b0f      	ldr	r3, [pc, #60]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a0e      	ldr	r2, [pc, #56]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 80045c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c6:	f7fd f9bf 	bl	8001948 <HAL_GetTick>
 80045ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045cc:	e008      	b.n	80045e0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80045ce:	f7fd f9bb 	bl	8001948 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d901      	bls.n	80045e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e006      	b.n	80045ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <RCCEx_PLL2_Config+0x15c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0f0      	beq.n	80045ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	58024400 	.word	0x58024400
 80045fc:	ffff0007 	.word	0xffff0007

08004600 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800460e:	4b53      	ldr	r3, [pc, #332]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 8004610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b03      	cmp	r3, #3
 8004618:	d101      	bne.n	800461e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e099      	b.n	8004752 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800461e:	4b4f      	ldr	r3, [pc, #316]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a4e      	ldr	r2, [pc, #312]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 8004624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800462a:	f7fd f98d 	bl	8001948 <HAL_GetTick>
 800462e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004630:	e008      	b.n	8004644 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004632:	f7fd f989 	bl	8001948 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e086      	b.n	8004752 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004644:	4b45      	ldr	r3, [pc, #276]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f0      	bne.n	8004632 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004650:	4b42      	ldr	r3, [pc, #264]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	051b      	lsls	r3, r3, #20
 800465e:	493f      	ldr	r1, [pc, #252]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 8004660:	4313      	orrs	r3, r2
 8004662:	628b      	str	r3, [r1, #40]	; 0x28
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	3b01      	subs	r3, #1
 800466a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	3b01      	subs	r3, #1
 8004674:	025b      	lsls	r3, r3, #9
 8004676:	b29b      	uxth	r3, r3
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	3b01      	subs	r3, #1
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	3b01      	subs	r3, #1
 800468e:	061b      	lsls	r3, r3, #24
 8004690:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004694:	4931      	ldr	r1, [pc, #196]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 8004696:	4313      	orrs	r3, r2
 8004698:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800469a:	4b30      	ldr	r3, [pc, #192]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	492d      	ldr	r1, [pc, #180]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80046ac:	4b2b      	ldr	r3, [pc, #172]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	4928      	ldr	r1, [pc, #160]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80046be:	4b27      	ldr	r3, [pc, #156]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	4a26      	ldr	r2, [pc, #152]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 80046c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80046ca:	4b24      	ldr	r3, [pc, #144]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 80046cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ce:	4b24      	ldr	r3, [pc, #144]	; (8004760 <RCCEx_PLL3_Config+0x160>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	69d2      	ldr	r2, [r2, #28]
 80046d6:	00d2      	lsls	r2, r2, #3
 80046d8:	4920      	ldr	r1, [pc, #128]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80046de:	4b1f      	ldr	r3, [pc, #124]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	4a1e      	ldr	r2, [pc, #120]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 80046e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d106      	bne.n	80046fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80046f0:	4b1a      	ldr	r3, [pc, #104]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	4a19      	ldr	r2, [pc, #100]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 80046f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80046fc:	e00f      	b.n	800471e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d106      	bne.n	8004712 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004704:	4b15      	ldr	r3, [pc, #84]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	4a14      	ldr	r2, [pc, #80]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 800470a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800470e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004710:	e005      	b.n	800471e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004712:	4b12      	ldr	r3, [pc, #72]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	4a11      	ldr	r2, [pc, #68]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 8004718:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800471c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800471e:	4b0f      	ldr	r3, [pc, #60]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a0e      	ldr	r2, [pc, #56]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 8004724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800472a:	f7fd f90d 	bl	8001948 <HAL_GetTick>
 800472e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004730:	e008      	b.n	8004744 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004732:	f7fd f909 	bl	8001948 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e006      	b.n	8004752 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004744:	4b05      	ldr	r3, [pc, #20]	; (800475c <RCCEx_PLL3_Config+0x15c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004750:	7bfb      	ldrb	r3, [r7, #15]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	58024400 	.word	0x58024400
 8004760:	ffff0007 	.word	0xffff0007

08004764 <__errno>:
 8004764:	4b01      	ldr	r3, [pc, #4]	; (800476c <__errno+0x8>)
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	24000014 	.word	0x24000014

08004770 <__libc_init_array>:
 8004770:	b570      	push	{r4, r5, r6, lr}
 8004772:	4d0d      	ldr	r5, [pc, #52]	; (80047a8 <__libc_init_array+0x38>)
 8004774:	4c0d      	ldr	r4, [pc, #52]	; (80047ac <__libc_init_array+0x3c>)
 8004776:	1b64      	subs	r4, r4, r5
 8004778:	10a4      	asrs	r4, r4, #2
 800477a:	2600      	movs	r6, #0
 800477c:	42a6      	cmp	r6, r4
 800477e:	d109      	bne.n	8004794 <__libc_init_array+0x24>
 8004780:	4d0b      	ldr	r5, [pc, #44]	; (80047b0 <__libc_init_array+0x40>)
 8004782:	4c0c      	ldr	r4, [pc, #48]	; (80047b4 <__libc_init_array+0x44>)
 8004784:	f004 fb74 	bl	8008e70 <_init>
 8004788:	1b64      	subs	r4, r4, r5
 800478a:	10a4      	asrs	r4, r4, #2
 800478c:	2600      	movs	r6, #0
 800478e:	42a6      	cmp	r6, r4
 8004790:	d105      	bne.n	800479e <__libc_init_array+0x2e>
 8004792:	bd70      	pop	{r4, r5, r6, pc}
 8004794:	f855 3b04 	ldr.w	r3, [r5], #4
 8004798:	4798      	blx	r3
 800479a:	3601      	adds	r6, #1
 800479c:	e7ee      	b.n	800477c <__libc_init_array+0xc>
 800479e:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a2:	4798      	blx	r3
 80047a4:	3601      	adds	r6, #1
 80047a6:	e7f2      	b.n	800478e <__libc_init_array+0x1e>
 80047a8:	0800938c 	.word	0x0800938c
 80047ac:	0800938c 	.word	0x0800938c
 80047b0:	0800938c 	.word	0x0800938c
 80047b4:	08009390 	.word	0x08009390

080047b8 <memset>:
 80047b8:	4402      	add	r2, r0
 80047ba:	4603      	mov	r3, r0
 80047bc:	4293      	cmp	r3, r2
 80047be:	d100      	bne.n	80047c2 <memset+0xa>
 80047c0:	4770      	bx	lr
 80047c2:	f803 1b01 	strb.w	r1, [r3], #1
 80047c6:	e7f9      	b.n	80047bc <memset+0x4>

080047c8 <__cvt>:
 80047c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ca:	ed2d 8b02 	vpush	{d8}
 80047ce:	eeb0 8b40 	vmov.f64	d8, d0
 80047d2:	b085      	sub	sp, #20
 80047d4:	4617      	mov	r7, r2
 80047d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80047d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80047da:	ee18 2a90 	vmov	r2, s17
 80047de:	f025 0520 	bic.w	r5, r5, #32
 80047e2:	2a00      	cmp	r2, #0
 80047e4:	bfb6      	itet	lt
 80047e6:	222d      	movlt	r2, #45	; 0x2d
 80047e8:	2200      	movge	r2, #0
 80047ea:	eeb1 8b40 	vneglt.f64	d8, d0
 80047ee:	2d46      	cmp	r5, #70	; 0x46
 80047f0:	460c      	mov	r4, r1
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	d004      	beq.n	8004800 <__cvt+0x38>
 80047f6:	2d45      	cmp	r5, #69	; 0x45
 80047f8:	d100      	bne.n	80047fc <__cvt+0x34>
 80047fa:	3401      	adds	r4, #1
 80047fc:	2102      	movs	r1, #2
 80047fe:	e000      	b.n	8004802 <__cvt+0x3a>
 8004800:	2103      	movs	r1, #3
 8004802:	ab03      	add	r3, sp, #12
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	ab02      	add	r3, sp, #8
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	4622      	mov	r2, r4
 800480c:	4633      	mov	r3, r6
 800480e:	eeb0 0b48 	vmov.f64	d0, d8
 8004812:	f001 fd51 	bl	80062b8 <_dtoa_r>
 8004816:	2d47      	cmp	r5, #71	; 0x47
 8004818:	d109      	bne.n	800482e <__cvt+0x66>
 800481a:	07fb      	lsls	r3, r7, #31
 800481c:	d407      	bmi.n	800482e <__cvt+0x66>
 800481e:	9b03      	ldr	r3, [sp, #12]
 8004820:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004822:	1a1b      	subs	r3, r3, r0
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	b005      	add	sp, #20
 8004828:	ecbd 8b02 	vpop	{d8}
 800482c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800482e:	2d46      	cmp	r5, #70	; 0x46
 8004830:	eb00 0204 	add.w	r2, r0, r4
 8004834:	d10c      	bne.n	8004850 <__cvt+0x88>
 8004836:	7803      	ldrb	r3, [r0, #0]
 8004838:	2b30      	cmp	r3, #48	; 0x30
 800483a:	d107      	bne.n	800484c <__cvt+0x84>
 800483c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004844:	bf1c      	itt	ne
 8004846:	f1c4 0401 	rsbne	r4, r4, #1
 800484a:	6034      	strne	r4, [r6, #0]
 800484c:	6833      	ldr	r3, [r6, #0]
 800484e:	441a      	add	r2, r3
 8004850:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004858:	bf08      	it	eq
 800485a:	9203      	streq	r2, [sp, #12]
 800485c:	2130      	movs	r1, #48	; 0x30
 800485e:	9b03      	ldr	r3, [sp, #12]
 8004860:	4293      	cmp	r3, r2
 8004862:	d2dc      	bcs.n	800481e <__cvt+0x56>
 8004864:	1c5c      	adds	r4, r3, #1
 8004866:	9403      	str	r4, [sp, #12]
 8004868:	7019      	strb	r1, [r3, #0]
 800486a:	e7f8      	b.n	800485e <__cvt+0x96>

0800486c <__exponent>:
 800486c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800486e:	4603      	mov	r3, r0
 8004870:	2900      	cmp	r1, #0
 8004872:	bfb8      	it	lt
 8004874:	4249      	neglt	r1, r1
 8004876:	f803 2b02 	strb.w	r2, [r3], #2
 800487a:	bfb4      	ite	lt
 800487c:	222d      	movlt	r2, #45	; 0x2d
 800487e:	222b      	movge	r2, #43	; 0x2b
 8004880:	2909      	cmp	r1, #9
 8004882:	7042      	strb	r2, [r0, #1]
 8004884:	dd2a      	ble.n	80048dc <__exponent+0x70>
 8004886:	f10d 0407 	add.w	r4, sp, #7
 800488a:	46a4      	mov	ip, r4
 800488c:	270a      	movs	r7, #10
 800488e:	46a6      	mov	lr, r4
 8004890:	460a      	mov	r2, r1
 8004892:	fb91 f6f7 	sdiv	r6, r1, r7
 8004896:	fb07 1516 	mls	r5, r7, r6, r1
 800489a:	3530      	adds	r5, #48	; 0x30
 800489c:	2a63      	cmp	r2, #99	; 0x63
 800489e:	f104 34ff 	add.w	r4, r4, #4294967295
 80048a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80048a6:	4631      	mov	r1, r6
 80048a8:	dcf1      	bgt.n	800488e <__exponent+0x22>
 80048aa:	3130      	adds	r1, #48	; 0x30
 80048ac:	f1ae 0502 	sub.w	r5, lr, #2
 80048b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80048b4:	1c44      	adds	r4, r0, #1
 80048b6:	4629      	mov	r1, r5
 80048b8:	4561      	cmp	r1, ip
 80048ba:	d30a      	bcc.n	80048d2 <__exponent+0x66>
 80048bc:	f10d 0209 	add.w	r2, sp, #9
 80048c0:	eba2 020e 	sub.w	r2, r2, lr
 80048c4:	4565      	cmp	r5, ip
 80048c6:	bf88      	it	hi
 80048c8:	2200      	movhi	r2, #0
 80048ca:	4413      	add	r3, r2
 80048cc:	1a18      	subs	r0, r3, r0
 80048ce:	b003      	add	sp, #12
 80048d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80048da:	e7ed      	b.n	80048b8 <__exponent+0x4c>
 80048dc:	2330      	movs	r3, #48	; 0x30
 80048de:	3130      	adds	r1, #48	; 0x30
 80048e0:	7083      	strb	r3, [r0, #2]
 80048e2:	70c1      	strb	r1, [r0, #3]
 80048e4:	1d03      	adds	r3, r0, #4
 80048e6:	e7f1      	b.n	80048cc <__exponent+0x60>

080048e8 <_printf_float>:
 80048e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ec:	b08b      	sub	sp, #44	; 0x2c
 80048ee:	460c      	mov	r4, r1
 80048f0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80048f4:	4616      	mov	r6, r2
 80048f6:	461f      	mov	r7, r3
 80048f8:	4605      	mov	r5, r0
 80048fa:	f002 fdcf 	bl	800749c <_localeconv_r>
 80048fe:	f8d0 b000 	ldr.w	fp, [r0]
 8004902:	4658      	mov	r0, fp
 8004904:	f7fb fcec 	bl	80002e0 <strlen>
 8004908:	2300      	movs	r3, #0
 800490a:	9308      	str	r3, [sp, #32]
 800490c:	f8d8 3000 	ldr.w	r3, [r8]
 8004910:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004914:	6822      	ldr	r2, [r4, #0]
 8004916:	3307      	adds	r3, #7
 8004918:	f023 0307 	bic.w	r3, r3, #7
 800491c:	f103 0108 	add.w	r1, r3, #8
 8004920:	f8c8 1000 	str.w	r1, [r8]
 8004924:	4682      	mov	sl, r0
 8004926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800492a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800492e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8004b90 <_printf_float+0x2a8>
 8004932:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8004936:	eeb0 6bc0 	vabs.f64	d6, d0
 800493a:	eeb4 6b47 	vcmp.f64	d6, d7
 800493e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004942:	dd24      	ble.n	800498e <_printf_float+0xa6>
 8004944:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494c:	d502      	bpl.n	8004954 <_printf_float+0x6c>
 800494e:	232d      	movs	r3, #45	; 0x2d
 8004950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004954:	4b90      	ldr	r3, [pc, #576]	; (8004b98 <_printf_float+0x2b0>)
 8004956:	4891      	ldr	r0, [pc, #580]	; (8004b9c <_printf_float+0x2b4>)
 8004958:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800495c:	bf94      	ite	ls
 800495e:	4698      	movls	r8, r3
 8004960:	4680      	movhi	r8, r0
 8004962:	2303      	movs	r3, #3
 8004964:	6123      	str	r3, [r4, #16]
 8004966:	f022 0204 	bic.w	r2, r2, #4
 800496a:	2300      	movs	r3, #0
 800496c:	6022      	str	r2, [r4, #0]
 800496e:	9304      	str	r3, [sp, #16]
 8004970:	9700      	str	r7, [sp, #0]
 8004972:	4633      	mov	r3, r6
 8004974:	aa09      	add	r2, sp, #36	; 0x24
 8004976:	4621      	mov	r1, r4
 8004978:	4628      	mov	r0, r5
 800497a:	f000 f9d3 	bl	8004d24 <_printf_common>
 800497e:	3001      	adds	r0, #1
 8004980:	f040 808a 	bne.w	8004a98 <_printf_float+0x1b0>
 8004984:	f04f 30ff 	mov.w	r0, #4294967295
 8004988:	b00b      	add	sp, #44	; 0x2c
 800498a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800498e:	eeb4 0b40 	vcmp.f64	d0, d0
 8004992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004996:	d709      	bvc.n	80049ac <_printf_float+0xc4>
 8004998:	ee10 3a90 	vmov	r3, s1
 800499c:	2b00      	cmp	r3, #0
 800499e:	bfbc      	itt	lt
 80049a0:	232d      	movlt	r3, #45	; 0x2d
 80049a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80049a6:	487e      	ldr	r0, [pc, #504]	; (8004ba0 <_printf_float+0x2b8>)
 80049a8:	4b7e      	ldr	r3, [pc, #504]	; (8004ba4 <_printf_float+0x2bc>)
 80049aa:	e7d5      	b.n	8004958 <_printf_float+0x70>
 80049ac:	6863      	ldr	r3, [r4, #4]
 80049ae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80049b2:	9104      	str	r1, [sp, #16]
 80049b4:	1c59      	adds	r1, r3, #1
 80049b6:	d13c      	bne.n	8004a32 <_printf_float+0x14a>
 80049b8:	2306      	movs	r3, #6
 80049ba:	6063      	str	r3, [r4, #4]
 80049bc:	2300      	movs	r3, #0
 80049be:	9303      	str	r3, [sp, #12]
 80049c0:	ab08      	add	r3, sp, #32
 80049c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80049c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049ca:	ab07      	add	r3, sp, #28
 80049cc:	6861      	ldr	r1, [r4, #4]
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	6022      	str	r2, [r4, #0]
 80049d2:	f10d 031b 	add.w	r3, sp, #27
 80049d6:	4628      	mov	r0, r5
 80049d8:	f7ff fef6 	bl	80047c8 <__cvt>
 80049dc:	9b04      	ldr	r3, [sp, #16]
 80049de:	9907      	ldr	r1, [sp, #28]
 80049e0:	2b47      	cmp	r3, #71	; 0x47
 80049e2:	4680      	mov	r8, r0
 80049e4:	d108      	bne.n	80049f8 <_printf_float+0x110>
 80049e6:	1cc8      	adds	r0, r1, #3
 80049e8:	db02      	blt.n	80049f0 <_printf_float+0x108>
 80049ea:	6863      	ldr	r3, [r4, #4]
 80049ec:	4299      	cmp	r1, r3
 80049ee:	dd41      	ble.n	8004a74 <_printf_float+0x18c>
 80049f0:	f1a9 0902 	sub.w	r9, r9, #2
 80049f4:	fa5f f989 	uxtb.w	r9, r9
 80049f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80049fc:	d820      	bhi.n	8004a40 <_printf_float+0x158>
 80049fe:	3901      	subs	r1, #1
 8004a00:	464a      	mov	r2, r9
 8004a02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a06:	9107      	str	r1, [sp, #28]
 8004a08:	f7ff ff30 	bl	800486c <__exponent>
 8004a0c:	9a08      	ldr	r2, [sp, #32]
 8004a0e:	9004      	str	r0, [sp, #16]
 8004a10:	1813      	adds	r3, r2, r0
 8004a12:	2a01      	cmp	r2, #1
 8004a14:	6123      	str	r3, [r4, #16]
 8004a16:	dc02      	bgt.n	8004a1e <_printf_float+0x136>
 8004a18:	6822      	ldr	r2, [r4, #0]
 8004a1a:	07d2      	lsls	r2, r2, #31
 8004a1c:	d501      	bpl.n	8004a22 <_printf_float+0x13a>
 8004a1e:	3301      	adds	r3, #1
 8004a20:	6123      	str	r3, [r4, #16]
 8004a22:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0a2      	beq.n	8004970 <_printf_float+0x88>
 8004a2a:	232d      	movs	r3, #45	; 0x2d
 8004a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a30:	e79e      	b.n	8004970 <_printf_float+0x88>
 8004a32:	9904      	ldr	r1, [sp, #16]
 8004a34:	2947      	cmp	r1, #71	; 0x47
 8004a36:	d1c1      	bne.n	80049bc <_printf_float+0xd4>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1bf      	bne.n	80049bc <_printf_float+0xd4>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e7bc      	b.n	80049ba <_printf_float+0xd2>
 8004a40:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004a44:	d118      	bne.n	8004a78 <_printf_float+0x190>
 8004a46:	2900      	cmp	r1, #0
 8004a48:	6863      	ldr	r3, [r4, #4]
 8004a4a:	dd0b      	ble.n	8004a64 <_printf_float+0x17c>
 8004a4c:	6121      	str	r1, [r4, #16]
 8004a4e:	b913      	cbnz	r3, 8004a56 <_printf_float+0x16e>
 8004a50:	6822      	ldr	r2, [r4, #0]
 8004a52:	07d0      	lsls	r0, r2, #31
 8004a54:	d502      	bpl.n	8004a5c <_printf_float+0x174>
 8004a56:	3301      	adds	r3, #1
 8004a58:	440b      	add	r3, r1
 8004a5a:	6123      	str	r3, [r4, #16]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a60:	9304      	str	r3, [sp, #16]
 8004a62:	e7de      	b.n	8004a22 <_printf_float+0x13a>
 8004a64:	b913      	cbnz	r3, 8004a6c <_printf_float+0x184>
 8004a66:	6822      	ldr	r2, [r4, #0]
 8004a68:	07d2      	lsls	r2, r2, #31
 8004a6a:	d501      	bpl.n	8004a70 <_printf_float+0x188>
 8004a6c:	3302      	adds	r3, #2
 8004a6e:	e7f4      	b.n	8004a5a <_printf_float+0x172>
 8004a70:	2301      	movs	r3, #1
 8004a72:	e7f2      	b.n	8004a5a <_printf_float+0x172>
 8004a74:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004a78:	9b08      	ldr	r3, [sp, #32]
 8004a7a:	4299      	cmp	r1, r3
 8004a7c:	db05      	blt.n	8004a8a <_printf_float+0x1a2>
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	6121      	str	r1, [r4, #16]
 8004a82:	07d8      	lsls	r0, r3, #31
 8004a84:	d5ea      	bpl.n	8004a5c <_printf_float+0x174>
 8004a86:	1c4b      	adds	r3, r1, #1
 8004a88:	e7e7      	b.n	8004a5a <_printf_float+0x172>
 8004a8a:	2900      	cmp	r1, #0
 8004a8c:	bfd4      	ite	le
 8004a8e:	f1c1 0202 	rsble	r2, r1, #2
 8004a92:	2201      	movgt	r2, #1
 8004a94:	4413      	add	r3, r2
 8004a96:	e7e0      	b.n	8004a5a <_printf_float+0x172>
 8004a98:	6823      	ldr	r3, [r4, #0]
 8004a9a:	055a      	lsls	r2, r3, #21
 8004a9c:	d407      	bmi.n	8004aae <_printf_float+0x1c6>
 8004a9e:	6923      	ldr	r3, [r4, #16]
 8004aa0:	4642      	mov	r2, r8
 8004aa2:	4631      	mov	r1, r6
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	47b8      	blx	r7
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	d12a      	bne.n	8004b02 <_printf_float+0x21a>
 8004aac:	e76a      	b.n	8004984 <_printf_float+0x9c>
 8004aae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004ab2:	f240 80e2 	bls.w	8004c7a <_printf_float+0x392>
 8004ab6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004aba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac2:	d133      	bne.n	8004b2c <_printf_float+0x244>
 8004ac4:	4a38      	ldr	r2, [pc, #224]	; (8004ba8 <_printf_float+0x2c0>)
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	4631      	mov	r1, r6
 8004aca:	4628      	mov	r0, r5
 8004acc:	47b8      	blx	r7
 8004ace:	3001      	adds	r0, #1
 8004ad0:	f43f af58 	beq.w	8004984 <_printf_float+0x9c>
 8004ad4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	db02      	blt.n	8004ae2 <_printf_float+0x1fa>
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	07d8      	lsls	r0, r3, #31
 8004ae0:	d50f      	bpl.n	8004b02 <_printf_float+0x21a>
 8004ae2:	4653      	mov	r3, sl
 8004ae4:	465a      	mov	r2, fp
 8004ae6:	4631      	mov	r1, r6
 8004ae8:	4628      	mov	r0, r5
 8004aea:	47b8      	blx	r7
 8004aec:	3001      	adds	r0, #1
 8004aee:	f43f af49 	beq.w	8004984 <_printf_float+0x9c>
 8004af2:	f04f 0800 	mov.w	r8, #0
 8004af6:	f104 091a 	add.w	r9, r4, #26
 8004afa:	9b08      	ldr	r3, [sp, #32]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	4543      	cmp	r3, r8
 8004b00:	dc09      	bgt.n	8004b16 <_printf_float+0x22e>
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	079b      	lsls	r3, r3, #30
 8004b06:	f100 8108 	bmi.w	8004d1a <_printf_float+0x432>
 8004b0a:	68e0      	ldr	r0, [r4, #12]
 8004b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b0e:	4298      	cmp	r0, r3
 8004b10:	bfb8      	it	lt
 8004b12:	4618      	movlt	r0, r3
 8004b14:	e738      	b.n	8004988 <_printf_float+0xa0>
 8004b16:	2301      	movs	r3, #1
 8004b18:	464a      	mov	r2, r9
 8004b1a:	4631      	mov	r1, r6
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	47b8      	blx	r7
 8004b20:	3001      	adds	r0, #1
 8004b22:	f43f af2f 	beq.w	8004984 <_printf_float+0x9c>
 8004b26:	f108 0801 	add.w	r8, r8, #1
 8004b2a:	e7e6      	b.n	8004afa <_printf_float+0x212>
 8004b2c:	9b07      	ldr	r3, [sp, #28]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	dc3c      	bgt.n	8004bac <_printf_float+0x2c4>
 8004b32:	4a1d      	ldr	r2, [pc, #116]	; (8004ba8 <_printf_float+0x2c0>)
 8004b34:	2301      	movs	r3, #1
 8004b36:	4631      	mov	r1, r6
 8004b38:	4628      	mov	r0, r5
 8004b3a:	47b8      	blx	r7
 8004b3c:	3001      	adds	r0, #1
 8004b3e:	f43f af21 	beq.w	8004984 <_printf_float+0x9c>
 8004b42:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	d102      	bne.n	8004b50 <_printf_float+0x268>
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	07d9      	lsls	r1, r3, #31
 8004b4e:	d5d8      	bpl.n	8004b02 <_printf_float+0x21a>
 8004b50:	4653      	mov	r3, sl
 8004b52:	465a      	mov	r2, fp
 8004b54:	4631      	mov	r1, r6
 8004b56:	4628      	mov	r0, r5
 8004b58:	47b8      	blx	r7
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	f43f af12 	beq.w	8004984 <_printf_float+0x9c>
 8004b60:	f04f 0900 	mov.w	r9, #0
 8004b64:	f104 0a1a 	add.w	sl, r4, #26
 8004b68:	9b07      	ldr	r3, [sp, #28]
 8004b6a:	425b      	negs	r3, r3
 8004b6c:	454b      	cmp	r3, r9
 8004b6e:	dc01      	bgt.n	8004b74 <_printf_float+0x28c>
 8004b70:	9b08      	ldr	r3, [sp, #32]
 8004b72:	e795      	b.n	8004aa0 <_printf_float+0x1b8>
 8004b74:	2301      	movs	r3, #1
 8004b76:	4652      	mov	r2, sl
 8004b78:	4631      	mov	r1, r6
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	47b8      	blx	r7
 8004b7e:	3001      	adds	r0, #1
 8004b80:	f43f af00 	beq.w	8004984 <_printf_float+0x9c>
 8004b84:	f109 0901 	add.w	r9, r9, #1
 8004b88:	e7ee      	b.n	8004b68 <_printf_float+0x280>
 8004b8a:	bf00      	nop
 8004b8c:	f3af 8000 	nop.w
 8004b90:	ffffffff 	.word	0xffffffff
 8004b94:	7fefffff 	.word	0x7fefffff
 8004b98:	08008edc 	.word	0x08008edc
 8004b9c:	08008ee0 	.word	0x08008ee0
 8004ba0:	08008ee8 	.word	0x08008ee8
 8004ba4:	08008ee4 	.word	0x08008ee4
 8004ba8:	08008eec 	.word	0x08008eec
 8004bac:	9a08      	ldr	r2, [sp, #32]
 8004bae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	bfa8      	it	ge
 8004bb4:	461a      	movge	r2, r3
 8004bb6:	2a00      	cmp	r2, #0
 8004bb8:	4691      	mov	r9, r2
 8004bba:	dc38      	bgt.n	8004c2e <_printf_float+0x346>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	9305      	str	r3, [sp, #20]
 8004bc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bc4:	f104 021a 	add.w	r2, r4, #26
 8004bc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bca:	9905      	ldr	r1, [sp, #20]
 8004bcc:	9304      	str	r3, [sp, #16]
 8004bce:	eba3 0309 	sub.w	r3, r3, r9
 8004bd2:	428b      	cmp	r3, r1
 8004bd4:	dc33      	bgt.n	8004c3e <_printf_float+0x356>
 8004bd6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	db3c      	blt.n	8004c58 <_printf_float+0x370>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	07da      	lsls	r2, r3, #31
 8004be2:	d439      	bmi.n	8004c58 <_printf_float+0x370>
 8004be4:	9a08      	ldr	r2, [sp, #32]
 8004be6:	9b04      	ldr	r3, [sp, #16]
 8004be8:	9907      	ldr	r1, [sp, #28]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	eba2 0901 	sub.w	r9, r2, r1
 8004bf0:	4599      	cmp	r9, r3
 8004bf2:	bfa8      	it	ge
 8004bf4:	4699      	movge	r9, r3
 8004bf6:	f1b9 0f00 	cmp.w	r9, #0
 8004bfa:	dc35      	bgt.n	8004c68 <_printf_float+0x380>
 8004bfc:	f04f 0800 	mov.w	r8, #0
 8004c00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c04:	f104 0a1a 	add.w	sl, r4, #26
 8004c08:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	eba3 0309 	sub.w	r3, r3, r9
 8004c12:	4543      	cmp	r3, r8
 8004c14:	f77f af75 	ble.w	8004b02 <_printf_float+0x21a>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	4652      	mov	r2, sl
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	4628      	mov	r0, r5
 8004c20:	47b8      	blx	r7
 8004c22:	3001      	adds	r0, #1
 8004c24:	f43f aeae 	beq.w	8004984 <_printf_float+0x9c>
 8004c28:	f108 0801 	add.w	r8, r8, #1
 8004c2c:	e7ec      	b.n	8004c08 <_printf_float+0x320>
 8004c2e:	4613      	mov	r3, r2
 8004c30:	4631      	mov	r1, r6
 8004c32:	4642      	mov	r2, r8
 8004c34:	4628      	mov	r0, r5
 8004c36:	47b8      	blx	r7
 8004c38:	3001      	adds	r0, #1
 8004c3a:	d1bf      	bne.n	8004bbc <_printf_float+0x2d4>
 8004c3c:	e6a2      	b.n	8004984 <_printf_float+0x9c>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	4631      	mov	r1, r6
 8004c42:	4628      	mov	r0, r5
 8004c44:	9204      	str	r2, [sp, #16]
 8004c46:	47b8      	blx	r7
 8004c48:	3001      	adds	r0, #1
 8004c4a:	f43f ae9b 	beq.w	8004984 <_printf_float+0x9c>
 8004c4e:	9b05      	ldr	r3, [sp, #20]
 8004c50:	9a04      	ldr	r2, [sp, #16]
 8004c52:	3301      	adds	r3, #1
 8004c54:	9305      	str	r3, [sp, #20]
 8004c56:	e7b7      	b.n	8004bc8 <_printf_float+0x2e0>
 8004c58:	4653      	mov	r3, sl
 8004c5a:	465a      	mov	r2, fp
 8004c5c:	4631      	mov	r1, r6
 8004c5e:	4628      	mov	r0, r5
 8004c60:	47b8      	blx	r7
 8004c62:	3001      	adds	r0, #1
 8004c64:	d1be      	bne.n	8004be4 <_printf_float+0x2fc>
 8004c66:	e68d      	b.n	8004984 <_printf_float+0x9c>
 8004c68:	9a04      	ldr	r2, [sp, #16]
 8004c6a:	464b      	mov	r3, r9
 8004c6c:	4442      	add	r2, r8
 8004c6e:	4631      	mov	r1, r6
 8004c70:	4628      	mov	r0, r5
 8004c72:	47b8      	blx	r7
 8004c74:	3001      	adds	r0, #1
 8004c76:	d1c1      	bne.n	8004bfc <_printf_float+0x314>
 8004c78:	e684      	b.n	8004984 <_printf_float+0x9c>
 8004c7a:	9a08      	ldr	r2, [sp, #32]
 8004c7c:	2a01      	cmp	r2, #1
 8004c7e:	dc01      	bgt.n	8004c84 <_printf_float+0x39c>
 8004c80:	07db      	lsls	r3, r3, #31
 8004c82:	d537      	bpl.n	8004cf4 <_printf_float+0x40c>
 8004c84:	2301      	movs	r3, #1
 8004c86:	4642      	mov	r2, r8
 8004c88:	4631      	mov	r1, r6
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	47b8      	blx	r7
 8004c8e:	3001      	adds	r0, #1
 8004c90:	f43f ae78 	beq.w	8004984 <_printf_float+0x9c>
 8004c94:	4653      	mov	r3, sl
 8004c96:	465a      	mov	r2, fp
 8004c98:	4631      	mov	r1, r6
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	47b8      	blx	r7
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	f43f ae70 	beq.w	8004984 <_printf_float+0x9c>
 8004ca4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004ca8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb0:	d01b      	beq.n	8004cea <_printf_float+0x402>
 8004cb2:	9b08      	ldr	r3, [sp, #32]
 8004cb4:	f108 0201 	add.w	r2, r8, #1
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	4631      	mov	r1, r6
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	47b8      	blx	r7
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d10e      	bne.n	8004ce2 <_printf_float+0x3fa>
 8004cc4:	e65e      	b.n	8004984 <_printf_float+0x9c>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	464a      	mov	r2, r9
 8004cca:	4631      	mov	r1, r6
 8004ccc:	4628      	mov	r0, r5
 8004cce:	47b8      	blx	r7
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	f43f ae57 	beq.w	8004984 <_printf_float+0x9c>
 8004cd6:	f108 0801 	add.w	r8, r8, #1
 8004cda:	9b08      	ldr	r3, [sp, #32]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	4543      	cmp	r3, r8
 8004ce0:	dcf1      	bgt.n	8004cc6 <_printf_float+0x3de>
 8004ce2:	9b04      	ldr	r3, [sp, #16]
 8004ce4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ce8:	e6db      	b.n	8004aa2 <_printf_float+0x1ba>
 8004cea:	f04f 0800 	mov.w	r8, #0
 8004cee:	f104 091a 	add.w	r9, r4, #26
 8004cf2:	e7f2      	b.n	8004cda <_printf_float+0x3f2>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	4642      	mov	r2, r8
 8004cf8:	e7df      	b.n	8004cba <_printf_float+0x3d2>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	464a      	mov	r2, r9
 8004cfe:	4631      	mov	r1, r6
 8004d00:	4628      	mov	r0, r5
 8004d02:	47b8      	blx	r7
 8004d04:	3001      	adds	r0, #1
 8004d06:	f43f ae3d 	beq.w	8004984 <_printf_float+0x9c>
 8004d0a:	f108 0801 	add.w	r8, r8, #1
 8004d0e:	68e3      	ldr	r3, [r4, #12]
 8004d10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d12:	1a5b      	subs	r3, r3, r1
 8004d14:	4543      	cmp	r3, r8
 8004d16:	dcf0      	bgt.n	8004cfa <_printf_float+0x412>
 8004d18:	e6f7      	b.n	8004b0a <_printf_float+0x222>
 8004d1a:	f04f 0800 	mov.w	r8, #0
 8004d1e:	f104 0919 	add.w	r9, r4, #25
 8004d22:	e7f4      	b.n	8004d0e <_printf_float+0x426>

08004d24 <_printf_common>:
 8004d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d28:	4616      	mov	r6, r2
 8004d2a:	4699      	mov	r9, r3
 8004d2c:	688a      	ldr	r2, [r1, #8]
 8004d2e:	690b      	ldr	r3, [r1, #16]
 8004d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d34:	4293      	cmp	r3, r2
 8004d36:	bfb8      	it	lt
 8004d38:	4613      	movlt	r3, r2
 8004d3a:	6033      	str	r3, [r6, #0]
 8004d3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d40:	4607      	mov	r7, r0
 8004d42:	460c      	mov	r4, r1
 8004d44:	b10a      	cbz	r2, 8004d4a <_printf_common+0x26>
 8004d46:	3301      	adds	r3, #1
 8004d48:	6033      	str	r3, [r6, #0]
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	0699      	lsls	r1, r3, #26
 8004d4e:	bf42      	ittt	mi
 8004d50:	6833      	ldrmi	r3, [r6, #0]
 8004d52:	3302      	addmi	r3, #2
 8004d54:	6033      	strmi	r3, [r6, #0]
 8004d56:	6825      	ldr	r5, [r4, #0]
 8004d58:	f015 0506 	ands.w	r5, r5, #6
 8004d5c:	d106      	bne.n	8004d6c <_printf_common+0x48>
 8004d5e:	f104 0a19 	add.w	sl, r4, #25
 8004d62:	68e3      	ldr	r3, [r4, #12]
 8004d64:	6832      	ldr	r2, [r6, #0]
 8004d66:	1a9b      	subs	r3, r3, r2
 8004d68:	42ab      	cmp	r3, r5
 8004d6a:	dc26      	bgt.n	8004dba <_printf_common+0x96>
 8004d6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d70:	1e13      	subs	r3, r2, #0
 8004d72:	6822      	ldr	r2, [r4, #0]
 8004d74:	bf18      	it	ne
 8004d76:	2301      	movne	r3, #1
 8004d78:	0692      	lsls	r2, r2, #26
 8004d7a:	d42b      	bmi.n	8004dd4 <_printf_common+0xb0>
 8004d7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d80:	4649      	mov	r1, r9
 8004d82:	4638      	mov	r0, r7
 8004d84:	47c0      	blx	r8
 8004d86:	3001      	adds	r0, #1
 8004d88:	d01e      	beq.n	8004dc8 <_printf_common+0xa4>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	68e5      	ldr	r5, [r4, #12]
 8004d8e:	6832      	ldr	r2, [r6, #0]
 8004d90:	f003 0306 	and.w	r3, r3, #6
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	bf08      	it	eq
 8004d98:	1aad      	subeq	r5, r5, r2
 8004d9a:	68a3      	ldr	r3, [r4, #8]
 8004d9c:	6922      	ldr	r2, [r4, #16]
 8004d9e:	bf0c      	ite	eq
 8004da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004da4:	2500      	movne	r5, #0
 8004da6:	4293      	cmp	r3, r2
 8004da8:	bfc4      	itt	gt
 8004daa:	1a9b      	subgt	r3, r3, r2
 8004dac:	18ed      	addgt	r5, r5, r3
 8004dae:	2600      	movs	r6, #0
 8004db0:	341a      	adds	r4, #26
 8004db2:	42b5      	cmp	r5, r6
 8004db4:	d11a      	bne.n	8004dec <_printf_common+0xc8>
 8004db6:	2000      	movs	r0, #0
 8004db8:	e008      	b.n	8004dcc <_printf_common+0xa8>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	4652      	mov	r2, sl
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	4638      	mov	r0, r7
 8004dc2:	47c0      	blx	r8
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d103      	bne.n	8004dd0 <_printf_common+0xac>
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd0:	3501      	adds	r5, #1
 8004dd2:	e7c6      	b.n	8004d62 <_printf_common+0x3e>
 8004dd4:	18e1      	adds	r1, r4, r3
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	2030      	movs	r0, #48	; 0x30
 8004dda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dde:	4422      	add	r2, r4
 8004de0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004de4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004de8:	3302      	adds	r3, #2
 8004dea:	e7c7      	b.n	8004d7c <_printf_common+0x58>
 8004dec:	2301      	movs	r3, #1
 8004dee:	4622      	mov	r2, r4
 8004df0:	4649      	mov	r1, r9
 8004df2:	4638      	mov	r0, r7
 8004df4:	47c0      	blx	r8
 8004df6:	3001      	adds	r0, #1
 8004df8:	d0e6      	beq.n	8004dc8 <_printf_common+0xa4>
 8004dfa:	3601      	adds	r6, #1
 8004dfc:	e7d9      	b.n	8004db2 <_printf_common+0x8e>
	...

08004e00 <_printf_i>:
 8004e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e04:	460c      	mov	r4, r1
 8004e06:	4691      	mov	r9, r2
 8004e08:	7e27      	ldrb	r7, [r4, #24]
 8004e0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e0c:	2f78      	cmp	r7, #120	; 0x78
 8004e0e:	4680      	mov	r8, r0
 8004e10:	469a      	mov	sl, r3
 8004e12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e16:	d807      	bhi.n	8004e28 <_printf_i+0x28>
 8004e18:	2f62      	cmp	r7, #98	; 0x62
 8004e1a:	d80a      	bhi.n	8004e32 <_printf_i+0x32>
 8004e1c:	2f00      	cmp	r7, #0
 8004e1e:	f000 80d8 	beq.w	8004fd2 <_printf_i+0x1d2>
 8004e22:	2f58      	cmp	r7, #88	; 0x58
 8004e24:	f000 80a3 	beq.w	8004f6e <_printf_i+0x16e>
 8004e28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e30:	e03a      	b.n	8004ea8 <_printf_i+0xa8>
 8004e32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e36:	2b15      	cmp	r3, #21
 8004e38:	d8f6      	bhi.n	8004e28 <_printf_i+0x28>
 8004e3a:	a001      	add	r0, pc, #4	; (adr r0, 8004e40 <_printf_i+0x40>)
 8004e3c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e40:	08004e99 	.word	0x08004e99
 8004e44:	08004ead 	.word	0x08004ead
 8004e48:	08004e29 	.word	0x08004e29
 8004e4c:	08004e29 	.word	0x08004e29
 8004e50:	08004e29 	.word	0x08004e29
 8004e54:	08004e29 	.word	0x08004e29
 8004e58:	08004ead 	.word	0x08004ead
 8004e5c:	08004e29 	.word	0x08004e29
 8004e60:	08004e29 	.word	0x08004e29
 8004e64:	08004e29 	.word	0x08004e29
 8004e68:	08004e29 	.word	0x08004e29
 8004e6c:	08004fb9 	.word	0x08004fb9
 8004e70:	08004edd 	.word	0x08004edd
 8004e74:	08004f9b 	.word	0x08004f9b
 8004e78:	08004e29 	.word	0x08004e29
 8004e7c:	08004e29 	.word	0x08004e29
 8004e80:	08004fdb 	.word	0x08004fdb
 8004e84:	08004e29 	.word	0x08004e29
 8004e88:	08004edd 	.word	0x08004edd
 8004e8c:	08004e29 	.word	0x08004e29
 8004e90:	08004e29 	.word	0x08004e29
 8004e94:	08004fa3 	.word	0x08004fa3
 8004e98:	680b      	ldr	r3, [r1, #0]
 8004e9a:	1d1a      	adds	r2, r3, #4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	600a      	str	r2, [r1, #0]
 8004ea0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e0a3      	b.n	8004ff4 <_printf_i+0x1f4>
 8004eac:	6825      	ldr	r5, [r4, #0]
 8004eae:	6808      	ldr	r0, [r1, #0]
 8004eb0:	062e      	lsls	r6, r5, #24
 8004eb2:	f100 0304 	add.w	r3, r0, #4
 8004eb6:	d50a      	bpl.n	8004ece <_printf_i+0xce>
 8004eb8:	6805      	ldr	r5, [r0, #0]
 8004eba:	600b      	str	r3, [r1, #0]
 8004ebc:	2d00      	cmp	r5, #0
 8004ebe:	da03      	bge.n	8004ec8 <_printf_i+0xc8>
 8004ec0:	232d      	movs	r3, #45	; 0x2d
 8004ec2:	426d      	negs	r5, r5
 8004ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec8:	485e      	ldr	r0, [pc, #376]	; (8005044 <_printf_i+0x244>)
 8004eca:	230a      	movs	r3, #10
 8004ecc:	e019      	b.n	8004f02 <_printf_i+0x102>
 8004ece:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ed2:	6805      	ldr	r5, [r0, #0]
 8004ed4:	600b      	str	r3, [r1, #0]
 8004ed6:	bf18      	it	ne
 8004ed8:	b22d      	sxthne	r5, r5
 8004eda:	e7ef      	b.n	8004ebc <_printf_i+0xbc>
 8004edc:	680b      	ldr	r3, [r1, #0]
 8004ede:	6825      	ldr	r5, [r4, #0]
 8004ee0:	1d18      	adds	r0, r3, #4
 8004ee2:	6008      	str	r0, [r1, #0]
 8004ee4:	0628      	lsls	r0, r5, #24
 8004ee6:	d501      	bpl.n	8004eec <_printf_i+0xec>
 8004ee8:	681d      	ldr	r5, [r3, #0]
 8004eea:	e002      	b.n	8004ef2 <_printf_i+0xf2>
 8004eec:	0669      	lsls	r1, r5, #25
 8004eee:	d5fb      	bpl.n	8004ee8 <_printf_i+0xe8>
 8004ef0:	881d      	ldrh	r5, [r3, #0]
 8004ef2:	4854      	ldr	r0, [pc, #336]	; (8005044 <_printf_i+0x244>)
 8004ef4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2308      	moveq	r3, #8
 8004efa:	230a      	movne	r3, #10
 8004efc:	2100      	movs	r1, #0
 8004efe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f02:	6866      	ldr	r6, [r4, #4]
 8004f04:	60a6      	str	r6, [r4, #8]
 8004f06:	2e00      	cmp	r6, #0
 8004f08:	bfa2      	ittt	ge
 8004f0a:	6821      	ldrge	r1, [r4, #0]
 8004f0c:	f021 0104 	bicge.w	r1, r1, #4
 8004f10:	6021      	strge	r1, [r4, #0]
 8004f12:	b90d      	cbnz	r5, 8004f18 <_printf_i+0x118>
 8004f14:	2e00      	cmp	r6, #0
 8004f16:	d04d      	beq.n	8004fb4 <_printf_i+0x1b4>
 8004f18:	4616      	mov	r6, r2
 8004f1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f1e:	fb03 5711 	mls	r7, r3, r1, r5
 8004f22:	5dc7      	ldrb	r7, [r0, r7]
 8004f24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f28:	462f      	mov	r7, r5
 8004f2a:	42bb      	cmp	r3, r7
 8004f2c:	460d      	mov	r5, r1
 8004f2e:	d9f4      	bls.n	8004f1a <_printf_i+0x11a>
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d10b      	bne.n	8004f4c <_printf_i+0x14c>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	07df      	lsls	r7, r3, #31
 8004f38:	d508      	bpl.n	8004f4c <_printf_i+0x14c>
 8004f3a:	6923      	ldr	r3, [r4, #16]
 8004f3c:	6861      	ldr	r1, [r4, #4]
 8004f3e:	4299      	cmp	r1, r3
 8004f40:	bfde      	ittt	le
 8004f42:	2330      	movle	r3, #48	; 0x30
 8004f44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f4c:	1b92      	subs	r2, r2, r6
 8004f4e:	6122      	str	r2, [r4, #16]
 8004f50:	f8cd a000 	str.w	sl, [sp]
 8004f54:	464b      	mov	r3, r9
 8004f56:	aa03      	add	r2, sp, #12
 8004f58:	4621      	mov	r1, r4
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	f7ff fee2 	bl	8004d24 <_printf_common>
 8004f60:	3001      	adds	r0, #1
 8004f62:	d14c      	bne.n	8004ffe <_printf_i+0x1fe>
 8004f64:	f04f 30ff 	mov.w	r0, #4294967295
 8004f68:	b004      	add	sp, #16
 8004f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f6e:	4835      	ldr	r0, [pc, #212]	; (8005044 <_printf_i+0x244>)
 8004f70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	680e      	ldr	r6, [r1, #0]
 8004f78:	061f      	lsls	r7, r3, #24
 8004f7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f7e:	600e      	str	r6, [r1, #0]
 8004f80:	d514      	bpl.n	8004fac <_printf_i+0x1ac>
 8004f82:	07d9      	lsls	r1, r3, #31
 8004f84:	bf44      	itt	mi
 8004f86:	f043 0320 	orrmi.w	r3, r3, #32
 8004f8a:	6023      	strmi	r3, [r4, #0]
 8004f8c:	b91d      	cbnz	r5, 8004f96 <_printf_i+0x196>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	f023 0320 	bic.w	r3, r3, #32
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	2310      	movs	r3, #16
 8004f98:	e7b0      	b.n	8004efc <_printf_i+0xfc>
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	f043 0320 	orr.w	r3, r3, #32
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	2378      	movs	r3, #120	; 0x78
 8004fa4:	4828      	ldr	r0, [pc, #160]	; (8005048 <_printf_i+0x248>)
 8004fa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004faa:	e7e3      	b.n	8004f74 <_printf_i+0x174>
 8004fac:	065e      	lsls	r6, r3, #25
 8004fae:	bf48      	it	mi
 8004fb0:	b2ad      	uxthmi	r5, r5
 8004fb2:	e7e6      	b.n	8004f82 <_printf_i+0x182>
 8004fb4:	4616      	mov	r6, r2
 8004fb6:	e7bb      	b.n	8004f30 <_printf_i+0x130>
 8004fb8:	680b      	ldr	r3, [r1, #0]
 8004fba:	6826      	ldr	r6, [r4, #0]
 8004fbc:	6960      	ldr	r0, [r4, #20]
 8004fbe:	1d1d      	adds	r5, r3, #4
 8004fc0:	600d      	str	r5, [r1, #0]
 8004fc2:	0635      	lsls	r5, r6, #24
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	d501      	bpl.n	8004fcc <_printf_i+0x1cc>
 8004fc8:	6018      	str	r0, [r3, #0]
 8004fca:	e002      	b.n	8004fd2 <_printf_i+0x1d2>
 8004fcc:	0671      	lsls	r1, r6, #25
 8004fce:	d5fb      	bpl.n	8004fc8 <_printf_i+0x1c8>
 8004fd0:	8018      	strh	r0, [r3, #0]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6123      	str	r3, [r4, #16]
 8004fd6:	4616      	mov	r6, r2
 8004fd8:	e7ba      	b.n	8004f50 <_printf_i+0x150>
 8004fda:	680b      	ldr	r3, [r1, #0]
 8004fdc:	1d1a      	adds	r2, r3, #4
 8004fde:	600a      	str	r2, [r1, #0]
 8004fe0:	681e      	ldr	r6, [r3, #0]
 8004fe2:	6862      	ldr	r2, [r4, #4]
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f7fb f982 	bl	80002f0 <memchr>
 8004fec:	b108      	cbz	r0, 8004ff2 <_printf_i+0x1f2>
 8004fee:	1b80      	subs	r0, r0, r6
 8004ff0:	6060      	str	r0, [r4, #4]
 8004ff2:	6863      	ldr	r3, [r4, #4]
 8004ff4:	6123      	str	r3, [r4, #16]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ffc:	e7a8      	b.n	8004f50 <_printf_i+0x150>
 8004ffe:	6923      	ldr	r3, [r4, #16]
 8005000:	4632      	mov	r2, r6
 8005002:	4649      	mov	r1, r9
 8005004:	4640      	mov	r0, r8
 8005006:	47d0      	blx	sl
 8005008:	3001      	adds	r0, #1
 800500a:	d0ab      	beq.n	8004f64 <_printf_i+0x164>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	079b      	lsls	r3, r3, #30
 8005010:	d413      	bmi.n	800503a <_printf_i+0x23a>
 8005012:	68e0      	ldr	r0, [r4, #12]
 8005014:	9b03      	ldr	r3, [sp, #12]
 8005016:	4298      	cmp	r0, r3
 8005018:	bfb8      	it	lt
 800501a:	4618      	movlt	r0, r3
 800501c:	e7a4      	b.n	8004f68 <_printf_i+0x168>
 800501e:	2301      	movs	r3, #1
 8005020:	4632      	mov	r2, r6
 8005022:	4649      	mov	r1, r9
 8005024:	4640      	mov	r0, r8
 8005026:	47d0      	blx	sl
 8005028:	3001      	adds	r0, #1
 800502a:	d09b      	beq.n	8004f64 <_printf_i+0x164>
 800502c:	3501      	adds	r5, #1
 800502e:	68e3      	ldr	r3, [r4, #12]
 8005030:	9903      	ldr	r1, [sp, #12]
 8005032:	1a5b      	subs	r3, r3, r1
 8005034:	42ab      	cmp	r3, r5
 8005036:	dcf2      	bgt.n	800501e <_printf_i+0x21e>
 8005038:	e7eb      	b.n	8005012 <_printf_i+0x212>
 800503a:	2500      	movs	r5, #0
 800503c:	f104 0619 	add.w	r6, r4, #25
 8005040:	e7f5      	b.n	800502e <_printf_i+0x22e>
 8005042:	bf00      	nop
 8005044:	08008eee 	.word	0x08008eee
 8005048:	08008eff 	.word	0x08008eff

0800504c <_scanf_float>:
 800504c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005050:	b087      	sub	sp, #28
 8005052:	4617      	mov	r7, r2
 8005054:	9303      	str	r3, [sp, #12]
 8005056:	688b      	ldr	r3, [r1, #8]
 8005058:	1e5a      	subs	r2, r3, #1
 800505a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800505e:	bf83      	ittte	hi
 8005060:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005064:	195b      	addhi	r3, r3, r5
 8005066:	9302      	strhi	r3, [sp, #8]
 8005068:	2300      	movls	r3, #0
 800506a:	bf86      	itte	hi
 800506c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005070:	608b      	strhi	r3, [r1, #8]
 8005072:	9302      	strls	r3, [sp, #8]
 8005074:	680b      	ldr	r3, [r1, #0]
 8005076:	468b      	mov	fp, r1
 8005078:	2500      	movs	r5, #0
 800507a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800507e:	f84b 3b1c 	str.w	r3, [fp], #28
 8005082:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005086:	4680      	mov	r8, r0
 8005088:	460c      	mov	r4, r1
 800508a:	465e      	mov	r6, fp
 800508c:	46aa      	mov	sl, r5
 800508e:	46a9      	mov	r9, r5
 8005090:	9501      	str	r5, [sp, #4]
 8005092:	68a2      	ldr	r2, [r4, #8]
 8005094:	b152      	cbz	r2, 80050ac <_scanf_float+0x60>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b4e      	cmp	r3, #78	; 0x4e
 800509c:	d864      	bhi.n	8005168 <_scanf_float+0x11c>
 800509e:	2b40      	cmp	r3, #64	; 0x40
 80050a0:	d83c      	bhi.n	800511c <_scanf_float+0xd0>
 80050a2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80050a6:	b2c8      	uxtb	r0, r1
 80050a8:	280e      	cmp	r0, #14
 80050aa:	d93a      	bls.n	8005122 <_scanf_float+0xd6>
 80050ac:	f1b9 0f00 	cmp.w	r9, #0
 80050b0:	d003      	beq.n	80050ba <_scanf_float+0x6e>
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b8:	6023      	str	r3, [r4, #0]
 80050ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050be:	f1ba 0f01 	cmp.w	sl, #1
 80050c2:	f200 8113 	bhi.w	80052ec <_scanf_float+0x2a0>
 80050c6:	455e      	cmp	r6, fp
 80050c8:	f200 8105 	bhi.w	80052d6 <_scanf_float+0x28a>
 80050cc:	2501      	movs	r5, #1
 80050ce:	4628      	mov	r0, r5
 80050d0:	b007      	add	sp, #28
 80050d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80050da:	2a0d      	cmp	r2, #13
 80050dc:	d8e6      	bhi.n	80050ac <_scanf_float+0x60>
 80050de:	a101      	add	r1, pc, #4	; (adr r1, 80050e4 <_scanf_float+0x98>)
 80050e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80050e4:	08005223 	.word	0x08005223
 80050e8:	080050ad 	.word	0x080050ad
 80050ec:	080050ad 	.word	0x080050ad
 80050f0:	080050ad 	.word	0x080050ad
 80050f4:	08005283 	.word	0x08005283
 80050f8:	0800525b 	.word	0x0800525b
 80050fc:	080050ad 	.word	0x080050ad
 8005100:	080050ad 	.word	0x080050ad
 8005104:	08005231 	.word	0x08005231
 8005108:	080050ad 	.word	0x080050ad
 800510c:	080050ad 	.word	0x080050ad
 8005110:	080050ad 	.word	0x080050ad
 8005114:	080050ad 	.word	0x080050ad
 8005118:	080051e9 	.word	0x080051e9
 800511c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005120:	e7db      	b.n	80050da <_scanf_float+0x8e>
 8005122:	290e      	cmp	r1, #14
 8005124:	d8c2      	bhi.n	80050ac <_scanf_float+0x60>
 8005126:	a001      	add	r0, pc, #4	; (adr r0, 800512c <_scanf_float+0xe0>)
 8005128:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800512c:	080051db 	.word	0x080051db
 8005130:	080050ad 	.word	0x080050ad
 8005134:	080051db 	.word	0x080051db
 8005138:	0800526f 	.word	0x0800526f
 800513c:	080050ad 	.word	0x080050ad
 8005140:	08005189 	.word	0x08005189
 8005144:	080051c5 	.word	0x080051c5
 8005148:	080051c5 	.word	0x080051c5
 800514c:	080051c5 	.word	0x080051c5
 8005150:	080051c5 	.word	0x080051c5
 8005154:	080051c5 	.word	0x080051c5
 8005158:	080051c5 	.word	0x080051c5
 800515c:	080051c5 	.word	0x080051c5
 8005160:	080051c5 	.word	0x080051c5
 8005164:	080051c5 	.word	0x080051c5
 8005168:	2b6e      	cmp	r3, #110	; 0x6e
 800516a:	d809      	bhi.n	8005180 <_scanf_float+0x134>
 800516c:	2b60      	cmp	r3, #96	; 0x60
 800516e:	d8b2      	bhi.n	80050d6 <_scanf_float+0x8a>
 8005170:	2b54      	cmp	r3, #84	; 0x54
 8005172:	d077      	beq.n	8005264 <_scanf_float+0x218>
 8005174:	2b59      	cmp	r3, #89	; 0x59
 8005176:	d199      	bne.n	80050ac <_scanf_float+0x60>
 8005178:	2d07      	cmp	r5, #7
 800517a:	d197      	bne.n	80050ac <_scanf_float+0x60>
 800517c:	2508      	movs	r5, #8
 800517e:	e029      	b.n	80051d4 <_scanf_float+0x188>
 8005180:	2b74      	cmp	r3, #116	; 0x74
 8005182:	d06f      	beq.n	8005264 <_scanf_float+0x218>
 8005184:	2b79      	cmp	r3, #121	; 0x79
 8005186:	e7f6      	b.n	8005176 <_scanf_float+0x12a>
 8005188:	6821      	ldr	r1, [r4, #0]
 800518a:	05c8      	lsls	r0, r1, #23
 800518c:	d51a      	bpl.n	80051c4 <_scanf_float+0x178>
 800518e:	9b02      	ldr	r3, [sp, #8]
 8005190:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005194:	6021      	str	r1, [r4, #0]
 8005196:	f109 0901 	add.w	r9, r9, #1
 800519a:	b11b      	cbz	r3, 80051a4 <_scanf_float+0x158>
 800519c:	3b01      	subs	r3, #1
 800519e:	3201      	adds	r2, #1
 80051a0:	9302      	str	r3, [sp, #8]
 80051a2:	60a2      	str	r2, [r4, #8]
 80051a4:	68a3      	ldr	r3, [r4, #8]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	60a3      	str	r3, [r4, #8]
 80051aa:	6923      	ldr	r3, [r4, #16]
 80051ac:	3301      	adds	r3, #1
 80051ae:	6123      	str	r3, [r4, #16]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	607b      	str	r3, [r7, #4]
 80051b8:	f340 8084 	ble.w	80052c4 <_scanf_float+0x278>
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	3301      	adds	r3, #1
 80051c0:	603b      	str	r3, [r7, #0]
 80051c2:	e766      	b.n	8005092 <_scanf_float+0x46>
 80051c4:	eb1a 0f05 	cmn.w	sl, r5
 80051c8:	f47f af70 	bne.w	80050ac <_scanf_float+0x60>
 80051cc:	6822      	ldr	r2, [r4, #0]
 80051ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80051d2:	6022      	str	r2, [r4, #0]
 80051d4:	f806 3b01 	strb.w	r3, [r6], #1
 80051d8:	e7e4      	b.n	80051a4 <_scanf_float+0x158>
 80051da:	6822      	ldr	r2, [r4, #0]
 80051dc:	0610      	lsls	r0, r2, #24
 80051de:	f57f af65 	bpl.w	80050ac <_scanf_float+0x60>
 80051e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051e6:	e7f4      	b.n	80051d2 <_scanf_float+0x186>
 80051e8:	f1ba 0f00 	cmp.w	sl, #0
 80051ec:	d10e      	bne.n	800520c <_scanf_float+0x1c0>
 80051ee:	f1b9 0f00 	cmp.w	r9, #0
 80051f2:	d10e      	bne.n	8005212 <_scanf_float+0x1c6>
 80051f4:	6822      	ldr	r2, [r4, #0]
 80051f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80051fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80051fe:	d108      	bne.n	8005212 <_scanf_float+0x1c6>
 8005200:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005204:	6022      	str	r2, [r4, #0]
 8005206:	f04f 0a01 	mov.w	sl, #1
 800520a:	e7e3      	b.n	80051d4 <_scanf_float+0x188>
 800520c:	f1ba 0f02 	cmp.w	sl, #2
 8005210:	d055      	beq.n	80052be <_scanf_float+0x272>
 8005212:	2d01      	cmp	r5, #1
 8005214:	d002      	beq.n	800521c <_scanf_float+0x1d0>
 8005216:	2d04      	cmp	r5, #4
 8005218:	f47f af48 	bne.w	80050ac <_scanf_float+0x60>
 800521c:	3501      	adds	r5, #1
 800521e:	b2ed      	uxtb	r5, r5
 8005220:	e7d8      	b.n	80051d4 <_scanf_float+0x188>
 8005222:	f1ba 0f01 	cmp.w	sl, #1
 8005226:	f47f af41 	bne.w	80050ac <_scanf_float+0x60>
 800522a:	f04f 0a02 	mov.w	sl, #2
 800522e:	e7d1      	b.n	80051d4 <_scanf_float+0x188>
 8005230:	b97d      	cbnz	r5, 8005252 <_scanf_float+0x206>
 8005232:	f1b9 0f00 	cmp.w	r9, #0
 8005236:	f47f af3c 	bne.w	80050b2 <_scanf_float+0x66>
 800523a:	6822      	ldr	r2, [r4, #0]
 800523c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005240:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005244:	f47f af39 	bne.w	80050ba <_scanf_float+0x6e>
 8005248:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800524c:	6022      	str	r2, [r4, #0]
 800524e:	2501      	movs	r5, #1
 8005250:	e7c0      	b.n	80051d4 <_scanf_float+0x188>
 8005252:	2d03      	cmp	r5, #3
 8005254:	d0e2      	beq.n	800521c <_scanf_float+0x1d0>
 8005256:	2d05      	cmp	r5, #5
 8005258:	e7de      	b.n	8005218 <_scanf_float+0x1cc>
 800525a:	2d02      	cmp	r5, #2
 800525c:	f47f af26 	bne.w	80050ac <_scanf_float+0x60>
 8005260:	2503      	movs	r5, #3
 8005262:	e7b7      	b.n	80051d4 <_scanf_float+0x188>
 8005264:	2d06      	cmp	r5, #6
 8005266:	f47f af21 	bne.w	80050ac <_scanf_float+0x60>
 800526a:	2507      	movs	r5, #7
 800526c:	e7b2      	b.n	80051d4 <_scanf_float+0x188>
 800526e:	6822      	ldr	r2, [r4, #0]
 8005270:	0591      	lsls	r1, r2, #22
 8005272:	f57f af1b 	bpl.w	80050ac <_scanf_float+0x60>
 8005276:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800527a:	6022      	str	r2, [r4, #0]
 800527c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005280:	e7a8      	b.n	80051d4 <_scanf_float+0x188>
 8005282:	6822      	ldr	r2, [r4, #0]
 8005284:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005288:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800528c:	d006      	beq.n	800529c <_scanf_float+0x250>
 800528e:	0550      	lsls	r0, r2, #21
 8005290:	f57f af0c 	bpl.w	80050ac <_scanf_float+0x60>
 8005294:	f1b9 0f00 	cmp.w	r9, #0
 8005298:	f43f af0f 	beq.w	80050ba <_scanf_float+0x6e>
 800529c:	0591      	lsls	r1, r2, #22
 800529e:	bf58      	it	pl
 80052a0:	9901      	ldrpl	r1, [sp, #4]
 80052a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80052a6:	bf58      	it	pl
 80052a8:	eba9 0101 	subpl.w	r1, r9, r1
 80052ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80052b0:	bf58      	it	pl
 80052b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80052b6:	6022      	str	r2, [r4, #0]
 80052b8:	f04f 0900 	mov.w	r9, #0
 80052bc:	e78a      	b.n	80051d4 <_scanf_float+0x188>
 80052be:	f04f 0a03 	mov.w	sl, #3
 80052c2:	e787      	b.n	80051d4 <_scanf_float+0x188>
 80052c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80052c8:	4639      	mov	r1, r7
 80052ca:	4640      	mov	r0, r8
 80052cc:	4798      	blx	r3
 80052ce:	2800      	cmp	r0, #0
 80052d0:	f43f aedf 	beq.w	8005092 <_scanf_float+0x46>
 80052d4:	e6ea      	b.n	80050ac <_scanf_float+0x60>
 80052d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80052de:	463a      	mov	r2, r7
 80052e0:	4640      	mov	r0, r8
 80052e2:	4798      	blx	r3
 80052e4:	6923      	ldr	r3, [r4, #16]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	6123      	str	r3, [r4, #16]
 80052ea:	e6ec      	b.n	80050c6 <_scanf_float+0x7a>
 80052ec:	1e6b      	subs	r3, r5, #1
 80052ee:	2b06      	cmp	r3, #6
 80052f0:	d825      	bhi.n	800533e <_scanf_float+0x2f2>
 80052f2:	2d02      	cmp	r5, #2
 80052f4:	d836      	bhi.n	8005364 <_scanf_float+0x318>
 80052f6:	455e      	cmp	r6, fp
 80052f8:	f67f aee8 	bls.w	80050cc <_scanf_float+0x80>
 80052fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005300:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005304:	463a      	mov	r2, r7
 8005306:	4640      	mov	r0, r8
 8005308:	4798      	blx	r3
 800530a:	6923      	ldr	r3, [r4, #16]
 800530c:	3b01      	subs	r3, #1
 800530e:	6123      	str	r3, [r4, #16]
 8005310:	e7f1      	b.n	80052f6 <_scanf_float+0x2aa>
 8005312:	9802      	ldr	r0, [sp, #8]
 8005314:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005318:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800531c:	9002      	str	r0, [sp, #8]
 800531e:	463a      	mov	r2, r7
 8005320:	4640      	mov	r0, r8
 8005322:	4798      	blx	r3
 8005324:	6923      	ldr	r3, [r4, #16]
 8005326:	3b01      	subs	r3, #1
 8005328:	6123      	str	r3, [r4, #16]
 800532a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800532e:	fa5f fa8a 	uxtb.w	sl, sl
 8005332:	f1ba 0f02 	cmp.w	sl, #2
 8005336:	d1ec      	bne.n	8005312 <_scanf_float+0x2c6>
 8005338:	3d03      	subs	r5, #3
 800533a:	b2ed      	uxtb	r5, r5
 800533c:	1b76      	subs	r6, r6, r5
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	05da      	lsls	r2, r3, #23
 8005342:	d52f      	bpl.n	80053a4 <_scanf_float+0x358>
 8005344:	055b      	lsls	r3, r3, #21
 8005346:	d510      	bpl.n	800536a <_scanf_float+0x31e>
 8005348:	455e      	cmp	r6, fp
 800534a:	f67f aebf 	bls.w	80050cc <_scanf_float+0x80>
 800534e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005352:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005356:	463a      	mov	r2, r7
 8005358:	4640      	mov	r0, r8
 800535a:	4798      	blx	r3
 800535c:	6923      	ldr	r3, [r4, #16]
 800535e:	3b01      	subs	r3, #1
 8005360:	6123      	str	r3, [r4, #16]
 8005362:	e7f1      	b.n	8005348 <_scanf_float+0x2fc>
 8005364:	46aa      	mov	sl, r5
 8005366:	9602      	str	r6, [sp, #8]
 8005368:	e7df      	b.n	800532a <_scanf_float+0x2de>
 800536a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800536e:	6923      	ldr	r3, [r4, #16]
 8005370:	2965      	cmp	r1, #101	; 0x65
 8005372:	f103 33ff 	add.w	r3, r3, #4294967295
 8005376:	f106 35ff 	add.w	r5, r6, #4294967295
 800537a:	6123      	str	r3, [r4, #16]
 800537c:	d00c      	beq.n	8005398 <_scanf_float+0x34c>
 800537e:	2945      	cmp	r1, #69	; 0x45
 8005380:	d00a      	beq.n	8005398 <_scanf_float+0x34c>
 8005382:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005386:	463a      	mov	r2, r7
 8005388:	4640      	mov	r0, r8
 800538a:	4798      	blx	r3
 800538c:	6923      	ldr	r3, [r4, #16]
 800538e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005392:	3b01      	subs	r3, #1
 8005394:	1eb5      	subs	r5, r6, #2
 8005396:	6123      	str	r3, [r4, #16]
 8005398:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800539c:	463a      	mov	r2, r7
 800539e:	4640      	mov	r0, r8
 80053a0:	4798      	blx	r3
 80053a2:	462e      	mov	r6, r5
 80053a4:	6825      	ldr	r5, [r4, #0]
 80053a6:	f015 0510 	ands.w	r5, r5, #16
 80053aa:	d14d      	bne.n	8005448 <_scanf_float+0x3fc>
 80053ac:	7035      	strb	r5, [r6, #0]
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b8:	d11a      	bne.n	80053f0 <_scanf_float+0x3a4>
 80053ba:	9b01      	ldr	r3, [sp, #4]
 80053bc:	454b      	cmp	r3, r9
 80053be:	eba3 0209 	sub.w	r2, r3, r9
 80053c2:	d122      	bne.n	800540a <_scanf_float+0x3be>
 80053c4:	2200      	movs	r2, #0
 80053c6:	4659      	mov	r1, fp
 80053c8:	4640      	mov	r0, r8
 80053ca:	f000 fe5b 	bl	8006084 <_strtod_r>
 80053ce:	9b03      	ldr	r3, [sp, #12]
 80053d0:	6821      	ldr	r1, [r4, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f011 0f02 	tst.w	r1, #2
 80053d8:	f103 0204 	add.w	r2, r3, #4
 80053dc:	d020      	beq.n	8005420 <_scanf_float+0x3d4>
 80053de:	9903      	ldr	r1, [sp, #12]
 80053e0:	600a      	str	r2, [r1, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	ed83 0b00 	vstr	d0, [r3]
 80053e8:	68e3      	ldr	r3, [r4, #12]
 80053ea:	3301      	adds	r3, #1
 80053ec:	60e3      	str	r3, [r4, #12]
 80053ee:	e66e      	b.n	80050ce <_scanf_float+0x82>
 80053f0:	9b04      	ldr	r3, [sp, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0e6      	beq.n	80053c4 <_scanf_float+0x378>
 80053f6:	9905      	ldr	r1, [sp, #20]
 80053f8:	230a      	movs	r3, #10
 80053fa:	462a      	mov	r2, r5
 80053fc:	3101      	adds	r1, #1
 80053fe:	4640      	mov	r0, r8
 8005400:	f000 feca 	bl	8006198 <_strtol_r>
 8005404:	9b04      	ldr	r3, [sp, #16]
 8005406:	9e05      	ldr	r6, [sp, #20]
 8005408:	1ac2      	subs	r2, r0, r3
 800540a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800540e:	429e      	cmp	r6, r3
 8005410:	bf28      	it	cs
 8005412:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005416:	490d      	ldr	r1, [pc, #52]	; (800544c <_scanf_float+0x400>)
 8005418:	4630      	mov	r0, r6
 800541a:	f000 f821 	bl	8005460 <siprintf>
 800541e:	e7d1      	b.n	80053c4 <_scanf_float+0x378>
 8005420:	f011 0f04 	tst.w	r1, #4
 8005424:	9903      	ldr	r1, [sp, #12]
 8005426:	600a      	str	r2, [r1, #0]
 8005428:	d1db      	bne.n	80053e2 <_scanf_float+0x396>
 800542a:	eeb4 0b40 	vcmp.f64	d0, d0
 800542e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005432:	681e      	ldr	r6, [r3, #0]
 8005434:	d705      	bvc.n	8005442 <_scanf_float+0x3f6>
 8005436:	4806      	ldr	r0, [pc, #24]	; (8005450 <_scanf_float+0x404>)
 8005438:	f000 f80c 	bl	8005454 <nanf>
 800543c:	ed86 0a00 	vstr	s0, [r6]
 8005440:	e7d2      	b.n	80053e8 <_scanf_float+0x39c>
 8005442:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8005446:	e7f9      	b.n	800543c <_scanf_float+0x3f0>
 8005448:	2500      	movs	r5, #0
 800544a:	e640      	b.n	80050ce <_scanf_float+0x82>
 800544c:	08008f10 	.word	0x08008f10
 8005450:	08009328 	.word	0x08009328

08005454 <nanf>:
 8005454:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800545c <nanf+0x8>
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	7fc00000 	.word	0x7fc00000

08005460 <siprintf>:
 8005460:	b40e      	push	{r1, r2, r3}
 8005462:	b500      	push	{lr}
 8005464:	b09c      	sub	sp, #112	; 0x70
 8005466:	ab1d      	add	r3, sp, #116	; 0x74
 8005468:	9002      	str	r0, [sp, #8]
 800546a:	9006      	str	r0, [sp, #24]
 800546c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005470:	4809      	ldr	r0, [pc, #36]	; (8005498 <siprintf+0x38>)
 8005472:	9107      	str	r1, [sp, #28]
 8005474:	9104      	str	r1, [sp, #16]
 8005476:	4909      	ldr	r1, [pc, #36]	; (800549c <siprintf+0x3c>)
 8005478:	f853 2b04 	ldr.w	r2, [r3], #4
 800547c:	9105      	str	r1, [sp, #20]
 800547e:	6800      	ldr	r0, [r0, #0]
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	a902      	add	r1, sp, #8
 8005484:	f002 fe08 	bl	8008098 <_svfiprintf_r>
 8005488:	9b02      	ldr	r3, [sp, #8]
 800548a:	2200      	movs	r2, #0
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	b01c      	add	sp, #112	; 0x70
 8005490:	f85d eb04 	ldr.w	lr, [sp], #4
 8005494:	b003      	add	sp, #12
 8005496:	4770      	bx	lr
 8005498:	24000014 	.word	0x24000014
 800549c:	ffff0208 	.word	0xffff0208

080054a0 <sulp>:
 80054a0:	b570      	push	{r4, r5, r6, lr}
 80054a2:	4604      	mov	r4, r0
 80054a4:	460d      	mov	r5, r1
 80054a6:	4616      	mov	r6, r2
 80054a8:	ec45 4b10 	vmov	d0, r4, r5
 80054ac:	f002 fb8e 	bl	8007bcc <__ulp>
 80054b0:	b17e      	cbz	r6, 80054d2 <sulp+0x32>
 80054b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80054b6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	dd09      	ble.n	80054d2 <sulp+0x32>
 80054be:	051b      	lsls	r3, r3, #20
 80054c0:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80054c4:	2000      	movs	r0, #0
 80054c6:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80054ca:	ec41 0b17 	vmov	d7, r0, r1
 80054ce:	ee20 0b07 	vmul.f64	d0, d0, d7
 80054d2:	bd70      	pop	{r4, r5, r6, pc}
 80054d4:	0000      	movs	r0, r0
	...

080054d8 <_strtod_l>:
 80054d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	ed2d 8b0c 	vpush	{d8-d13}
 80054e0:	b09d      	sub	sp, #116	; 0x74
 80054e2:	461f      	mov	r7, r3
 80054e4:	2300      	movs	r3, #0
 80054e6:	9318      	str	r3, [sp, #96]	; 0x60
 80054e8:	4ba6      	ldr	r3, [pc, #664]	; (8005784 <_strtod_l+0x2ac>)
 80054ea:	9213      	str	r2, [sp, #76]	; 0x4c
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	9308      	str	r3, [sp, #32]
 80054f0:	4604      	mov	r4, r0
 80054f2:	4618      	mov	r0, r3
 80054f4:	468a      	mov	sl, r1
 80054f6:	f7fa fef3 	bl	80002e0 <strlen>
 80054fa:	f04f 0800 	mov.w	r8, #0
 80054fe:	4605      	mov	r5, r0
 8005500:	f04f 0900 	mov.w	r9, #0
 8005504:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8005508:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800550a:	781a      	ldrb	r2, [r3, #0]
 800550c:	2a2b      	cmp	r2, #43	; 0x2b
 800550e:	d04d      	beq.n	80055ac <_strtod_l+0xd4>
 8005510:	d83a      	bhi.n	8005588 <_strtod_l+0xb0>
 8005512:	2a0d      	cmp	r2, #13
 8005514:	d833      	bhi.n	800557e <_strtod_l+0xa6>
 8005516:	2a08      	cmp	r2, #8
 8005518:	d833      	bhi.n	8005582 <_strtod_l+0xaa>
 800551a:	2a00      	cmp	r2, #0
 800551c:	d03d      	beq.n	800559a <_strtod_l+0xc2>
 800551e:	2300      	movs	r3, #0
 8005520:	930b      	str	r3, [sp, #44]	; 0x2c
 8005522:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005524:	7833      	ldrb	r3, [r6, #0]
 8005526:	2b30      	cmp	r3, #48	; 0x30
 8005528:	f040 80b6 	bne.w	8005698 <_strtod_l+0x1c0>
 800552c:	7873      	ldrb	r3, [r6, #1]
 800552e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005532:	2b58      	cmp	r3, #88	; 0x58
 8005534:	d16d      	bne.n	8005612 <_strtod_l+0x13a>
 8005536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005538:	9301      	str	r3, [sp, #4]
 800553a:	ab18      	add	r3, sp, #96	; 0x60
 800553c:	9702      	str	r7, [sp, #8]
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	4a91      	ldr	r2, [pc, #580]	; (8005788 <_strtod_l+0x2b0>)
 8005542:	ab19      	add	r3, sp, #100	; 0x64
 8005544:	a917      	add	r1, sp, #92	; 0x5c
 8005546:	4620      	mov	r0, r4
 8005548:	f001 fca0 	bl	8006e8c <__gethex>
 800554c:	f010 0507 	ands.w	r5, r0, #7
 8005550:	4607      	mov	r7, r0
 8005552:	d005      	beq.n	8005560 <_strtod_l+0x88>
 8005554:	2d06      	cmp	r5, #6
 8005556:	d12b      	bne.n	80055b0 <_strtod_l+0xd8>
 8005558:	3601      	adds	r6, #1
 800555a:	2300      	movs	r3, #0
 800555c:	9617      	str	r6, [sp, #92]	; 0x5c
 800555e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005560:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005562:	2b00      	cmp	r3, #0
 8005564:	f040 856e 	bne.w	8006044 <_strtod_l+0xb6c>
 8005568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800556a:	b1e3      	cbz	r3, 80055a6 <_strtod_l+0xce>
 800556c:	ec49 8b17 	vmov	d7, r8, r9
 8005570:	eeb1 0b47 	vneg.f64	d0, d7
 8005574:	b01d      	add	sp, #116	; 0x74
 8005576:	ecbd 8b0c 	vpop	{d8-d13}
 800557a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557e:	2a20      	cmp	r2, #32
 8005580:	d1cd      	bne.n	800551e <_strtod_l+0x46>
 8005582:	3301      	adds	r3, #1
 8005584:	9317      	str	r3, [sp, #92]	; 0x5c
 8005586:	e7bf      	b.n	8005508 <_strtod_l+0x30>
 8005588:	2a2d      	cmp	r2, #45	; 0x2d
 800558a:	d1c8      	bne.n	800551e <_strtod_l+0x46>
 800558c:	2201      	movs	r2, #1
 800558e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	9217      	str	r2, [sp, #92]	; 0x5c
 8005594:	785b      	ldrb	r3, [r3, #1]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1c3      	bne.n	8005522 <_strtod_l+0x4a>
 800559a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800559c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f040 854d 	bne.w	8006040 <_strtod_l+0xb68>
 80055a6:	ec49 8b10 	vmov	d0, r8, r9
 80055aa:	e7e3      	b.n	8005574 <_strtod_l+0x9c>
 80055ac:	2200      	movs	r2, #0
 80055ae:	e7ee      	b.n	800558e <_strtod_l+0xb6>
 80055b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80055b2:	b13a      	cbz	r2, 80055c4 <_strtod_l+0xec>
 80055b4:	2135      	movs	r1, #53	; 0x35
 80055b6:	a81a      	add	r0, sp, #104	; 0x68
 80055b8:	f002 fc14 	bl	8007de4 <__copybits>
 80055bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80055be:	4620      	mov	r0, r4
 80055c0:	f001 ffd8 	bl	8007574 <_Bfree>
 80055c4:	3d01      	subs	r5, #1
 80055c6:	2d05      	cmp	r5, #5
 80055c8:	d807      	bhi.n	80055da <_strtod_l+0x102>
 80055ca:	e8df f005 	tbb	[pc, r5]
 80055ce:	0b0e      	.short	0x0b0e
 80055d0:	030e1d18 	.word	0x030e1d18
 80055d4:	f04f 0900 	mov.w	r9, #0
 80055d8:	46c8      	mov	r8, r9
 80055da:	073b      	lsls	r3, r7, #28
 80055dc:	d5c0      	bpl.n	8005560 <_strtod_l+0x88>
 80055de:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80055e2:	e7bd      	b.n	8005560 <_strtod_l+0x88>
 80055e4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 80055e8:	e7f7      	b.n	80055da <_strtod_l+0x102>
 80055ea:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 80055ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80055f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80055f4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80055f8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80055fc:	e7ed      	b.n	80055da <_strtod_l+0x102>
 80055fe:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800578c <_strtod_l+0x2b4>
 8005602:	f04f 0800 	mov.w	r8, #0
 8005606:	e7e8      	b.n	80055da <_strtod_l+0x102>
 8005608:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800560c:	f04f 38ff 	mov.w	r8, #4294967295
 8005610:	e7e3      	b.n	80055da <_strtod_l+0x102>
 8005612:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	9217      	str	r2, [sp, #92]	; 0x5c
 8005618:	785b      	ldrb	r3, [r3, #1]
 800561a:	2b30      	cmp	r3, #48	; 0x30
 800561c:	d0f9      	beq.n	8005612 <_strtod_l+0x13a>
 800561e:	2b00      	cmp	r3, #0
 8005620:	d09e      	beq.n	8005560 <_strtod_l+0x88>
 8005622:	2301      	movs	r3, #1
 8005624:	9306      	str	r3, [sp, #24]
 8005626:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005628:	930c      	str	r3, [sp, #48]	; 0x30
 800562a:	2300      	movs	r3, #0
 800562c:	9304      	str	r3, [sp, #16]
 800562e:	930a      	str	r3, [sp, #40]	; 0x28
 8005630:	461e      	mov	r6, r3
 8005632:	220a      	movs	r2, #10
 8005634:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005636:	f890 b000 	ldrb.w	fp, [r0]
 800563a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800563e:	b2d9      	uxtb	r1, r3
 8005640:	2909      	cmp	r1, #9
 8005642:	d92b      	bls.n	800569c <_strtod_l+0x1c4>
 8005644:	9908      	ldr	r1, [sp, #32]
 8005646:	462a      	mov	r2, r5
 8005648:	f002 fe3e 	bl	80082c8 <strncmp>
 800564c:	2800      	cmp	r0, #0
 800564e:	d035      	beq.n	80056bc <_strtod_l+0x1e4>
 8005650:	2000      	movs	r0, #0
 8005652:	465a      	mov	r2, fp
 8005654:	4633      	mov	r3, r6
 8005656:	4683      	mov	fp, r0
 8005658:	4601      	mov	r1, r0
 800565a:	2a65      	cmp	r2, #101	; 0x65
 800565c:	d001      	beq.n	8005662 <_strtod_l+0x18a>
 800565e:	2a45      	cmp	r2, #69	; 0x45
 8005660:	d118      	bne.n	8005694 <_strtod_l+0x1bc>
 8005662:	b91b      	cbnz	r3, 800566c <_strtod_l+0x194>
 8005664:	9b06      	ldr	r3, [sp, #24]
 8005666:	4303      	orrs	r3, r0
 8005668:	d097      	beq.n	800559a <_strtod_l+0xc2>
 800566a:	2300      	movs	r3, #0
 800566c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8005670:	f10a 0201 	add.w	r2, sl, #1
 8005674:	9217      	str	r2, [sp, #92]	; 0x5c
 8005676:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800567a:	2a2b      	cmp	r2, #43	; 0x2b
 800567c:	d077      	beq.n	800576e <_strtod_l+0x296>
 800567e:	2a2d      	cmp	r2, #45	; 0x2d
 8005680:	d07d      	beq.n	800577e <_strtod_l+0x2a6>
 8005682:	f04f 0e00 	mov.w	lr, #0
 8005686:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800568a:	2d09      	cmp	r5, #9
 800568c:	f240 8084 	bls.w	8005798 <_strtod_l+0x2c0>
 8005690:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8005694:	2500      	movs	r5, #0
 8005696:	e09f      	b.n	80057d8 <_strtod_l+0x300>
 8005698:	2300      	movs	r3, #0
 800569a:	e7c3      	b.n	8005624 <_strtod_l+0x14c>
 800569c:	2e08      	cmp	r6, #8
 800569e:	bfd5      	itete	le
 80056a0:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80056a2:	9904      	ldrgt	r1, [sp, #16]
 80056a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80056a8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80056ac:	f100 0001 	add.w	r0, r0, #1
 80056b0:	bfd4      	ite	le
 80056b2:	930a      	strle	r3, [sp, #40]	; 0x28
 80056b4:	9304      	strgt	r3, [sp, #16]
 80056b6:	3601      	adds	r6, #1
 80056b8:	9017      	str	r0, [sp, #92]	; 0x5c
 80056ba:	e7bb      	b.n	8005634 <_strtod_l+0x15c>
 80056bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056be:	195a      	adds	r2, r3, r5
 80056c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80056c2:	5d5a      	ldrb	r2, [r3, r5]
 80056c4:	b3ae      	cbz	r6, 8005732 <_strtod_l+0x25a>
 80056c6:	4683      	mov	fp, r0
 80056c8:	4633      	mov	r3, r6
 80056ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80056ce:	2909      	cmp	r1, #9
 80056d0:	d912      	bls.n	80056f8 <_strtod_l+0x220>
 80056d2:	2101      	movs	r1, #1
 80056d4:	e7c1      	b.n	800565a <_strtod_l+0x182>
 80056d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	9217      	str	r2, [sp, #92]	; 0x5c
 80056dc:	785a      	ldrb	r2, [r3, #1]
 80056de:	3001      	adds	r0, #1
 80056e0:	2a30      	cmp	r2, #48	; 0x30
 80056e2:	d0f8      	beq.n	80056d6 <_strtod_l+0x1fe>
 80056e4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	f200 84b0 	bhi.w	800604e <_strtod_l+0xb76>
 80056ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056f0:	930c      	str	r3, [sp, #48]	; 0x30
 80056f2:	4683      	mov	fp, r0
 80056f4:	2000      	movs	r0, #0
 80056f6:	4603      	mov	r3, r0
 80056f8:	3a30      	subs	r2, #48	; 0x30
 80056fa:	f100 0101 	add.w	r1, r0, #1
 80056fe:	d012      	beq.n	8005726 <_strtod_l+0x24e>
 8005700:	448b      	add	fp, r1
 8005702:	eb00 0c03 	add.w	ip, r0, r3
 8005706:	4619      	mov	r1, r3
 8005708:	250a      	movs	r5, #10
 800570a:	4561      	cmp	r1, ip
 800570c:	d113      	bne.n	8005736 <_strtod_l+0x25e>
 800570e:	1819      	adds	r1, r3, r0
 8005710:	2908      	cmp	r1, #8
 8005712:	f103 0301 	add.w	r3, r3, #1
 8005716:	4403      	add	r3, r0
 8005718:	dc1d      	bgt.n	8005756 <_strtod_l+0x27e>
 800571a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800571c:	210a      	movs	r1, #10
 800571e:	fb01 2200 	mla	r2, r1, r0, r2
 8005722:	920a      	str	r2, [sp, #40]	; 0x28
 8005724:	2100      	movs	r1, #0
 8005726:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005728:	1c50      	adds	r0, r2, #1
 800572a:	9017      	str	r0, [sp, #92]	; 0x5c
 800572c:	7852      	ldrb	r2, [r2, #1]
 800572e:	4608      	mov	r0, r1
 8005730:	e7cb      	b.n	80056ca <_strtod_l+0x1f2>
 8005732:	4630      	mov	r0, r6
 8005734:	e7d4      	b.n	80056e0 <_strtod_l+0x208>
 8005736:	2908      	cmp	r1, #8
 8005738:	dc04      	bgt.n	8005744 <_strtod_l+0x26c>
 800573a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800573c:	436f      	muls	r7, r5
 800573e:	970a      	str	r7, [sp, #40]	; 0x28
 8005740:	3101      	adds	r1, #1
 8005742:	e7e2      	b.n	800570a <_strtod_l+0x232>
 8005744:	f101 0e01 	add.w	lr, r1, #1
 8005748:	f1be 0f10 	cmp.w	lr, #16
 800574c:	bfde      	ittt	le
 800574e:	9f04      	ldrle	r7, [sp, #16]
 8005750:	436f      	mulle	r7, r5
 8005752:	9704      	strle	r7, [sp, #16]
 8005754:	e7f4      	b.n	8005740 <_strtod_l+0x268>
 8005756:	2b10      	cmp	r3, #16
 8005758:	bfdf      	itttt	le
 800575a:	9804      	ldrle	r0, [sp, #16]
 800575c:	210a      	movle	r1, #10
 800575e:	fb01 2200 	mlale	r2, r1, r0, r2
 8005762:	9204      	strle	r2, [sp, #16]
 8005764:	e7de      	b.n	8005724 <_strtod_l+0x24c>
 8005766:	f04f 0b00 	mov.w	fp, #0
 800576a:	2101      	movs	r1, #1
 800576c:	e77a      	b.n	8005664 <_strtod_l+0x18c>
 800576e:	f04f 0e00 	mov.w	lr, #0
 8005772:	f10a 0202 	add.w	r2, sl, #2
 8005776:	9217      	str	r2, [sp, #92]	; 0x5c
 8005778:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800577c:	e783      	b.n	8005686 <_strtod_l+0x1ae>
 800577e:	f04f 0e01 	mov.w	lr, #1
 8005782:	e7f6      	b.n	8005772 <_strtod_l+0x29a>
 8005784:	08009168 	.word	0x08009168
 8005788:	08008f18 	.word	0x08008f18
 800578c:	7ff00000 	.word	0x7ff00000
 8005790:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005792:	1c55      	adds	r5, r2, #1
 8005794:	9517      	str	r5, [sp, #92]	; 0x5c
 8005796:	7852      	ldrb	r2, [r2, #1]
 8005798:	2a30      	cmp	r2, #48	; 0x30
 800579a:	d0f9      	beq.n	8005790 <_strtod_l+0x2b8>
 800579c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80057a0:	2d08      	cmp	r5, #8
 80057a2:	f63f af77 	bhi.w	8005694 <_strtod_l+0x1bc>
 80057a6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80057aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80057ac:	9208      	str	r2, [sp, #32]
 80057ae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80057b0:	1c55      	adds	r5, r2, #1
 80057b2:	9517      	str	r5, [sp, #92]	; 0x5c
 80057b4:	7852      	ldrb	r2, [r2, #1]
 80057b6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80057ba:	2f09      	cmp	r7, #9
 80057bc:	d937      	bls.n	800582e <_strtod_l+0x356>
 80057be:	9f08      	ldr	r7, [sp, #32]
 80057c0:	1bed      	subs	r5, r5, r7
 80057c2:	2d08      	cmp	r5, #8
 80057c4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80057c8:	dc02      	bgt.n	80057d0 <_strtod_l+0x2f8>
 80057ca:	4565      	cmp	r5, ip
 80057cc:	bfa8      	it	ge
 80057ce:	4665      	movge	r5, ip
 80057d0:	f1be 0f00 	cmp.w	lr, #0
 80057d4:	d000      	beq.n	80057d8 <_strtod_l+0x300>
 80057d6:	426d      	negs	r5, r5
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d14f      	bne.n	800587c <_strtod_l+0x3a4>
 80057dc:	9b06      	ldr	r3, [sp, #24]
 80057de:	4303      	orrs	r3, r0
 80057e0:	f47f aebe 	bne.w	8005560 <_strtod_l+0x88>
 80057e4:	2900      	cmp	r1, #0
 80057e6:	f47f aed8 	bne.w	800559a <_strtod_l+0xc2>
 80057ea:	2a69      	cmp	r2, #105	; 0x69
 80057ec:	d027      	beq.n	800583e <_strtod_l+0x366>
 80057ee:	dc24      	bgt.n	800583a <_strtod_l+0x362>
 80057f0:	2a49      	cmp	r2, #73	; 0x49
 80057f2:	d024      	beq.n	800583e <_strtod_l+0x366>
 80057f4:	2a4e      	cmp	r2, #78	; 0x4e
 80057f6:	f47f aed0 	bne.w	800559a <_strtod_l+0xc2>
 80057fa:	499b      	ldr	r1, [pc, #620]	; (8005a68 <_strtod_l+0x590>)
 80057fc:	a817      	add	r0, sp, #92	; 0x5c
 80057fe:	f001 fd9d 	bl	800733c <__match>
 8005802:	2800      	cmp	r0, #0
 8005804:	f43f aec9 	beq.w	800559a <_strtod_l+0xc2>
 8005808:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b28      	cmp	r3, #40	; 0x28
 800580e:	d12d      	bne.n	800586c <_strtod_l+0x394>
 8005810:	4996      	ldr	r1, [pc, #600]	; (8005a6c <_strtod_l+0x594>)
 8005812:	aa1a      	add	r2, sp, #104	; 0x68
 8005814:	a817      	add	r0, sp, #92	; 0x5c
 8005816:	f001 fda5 	bl	8007364 <__hexnan>
 800581a:	2805      	cmp	r0, #5
 800581c:	d126      	bne.n	800586c <_strtod_l+0x394>
 800581e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005820:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005824:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005828:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800582c:	e698      	b.n	8005560 <_strtod_l+0x88>
 800582e:	250a      	movs	r5, #10
 8005830:	fb05 250c 	mla	r5, r5, ip, r2
 8005834:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8005838:	e7b9      	b.n	80057ae <_strtod_l+0x2d6>
 800583a:	2a6e      	cmp	r2, #110	; 0x6e
 800583c:	e7db      	b.n	80057f6 <_strtod_l+0x31e>
 800583e:	498c      	ldr	r1, [pc, #560]	; (8005a70 <_strtod_l+0x598>)
 8005840:	a817      	add	r0, sp, #92	; 0x5c
 8005842:	f001 fd7b 	bl	800733c <__match>
 8005846:	2800      	cmp	r0, #0
 8005848:	f43f aea7 	beq.w	800559a <_strtod_l+0xc2>
 800584c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800584e:	4989      	ldr	r1, [pc, #548]	; (8005a74 <_strtod_l+0x59c>)
 8005850:	3b01      	subs	r3, #1
 8005852:	a817      	add	r0, sp, #92	; 0x5c
 8005854:	9317      	str	r3, [sp, #92]	; 0x5c
 8005856:	f001 fd71 	bl	800733c <__match>
 800585a:	b910      	cbnz	r0, 8005862 <_strtod_l+0x38a>
 800585c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800585e:	3301      	adds	r3, #1
 8005860:	9317      	str	r3, [sp, #92]	; 0x5c
 8005862:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8005a88 <_strtod_l+0x5b0>
 8005866:	f04f 0800 	mov.w	r8, #0
 800586a:	e679      	b.n	8005560 <_strtod_l+0x88>
 800586c:	4882      	ldr	r0, [pc, #520]	; (8005a78 <_strtod_l+0x5a0>)
 800586e:	f002 fd13 	bl	8008298 <nan>
 8005872:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005876:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800587a:	e671      	b.n	8005560 <_strtod_l+0x88>
 800587c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8005880:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005884:	eba5 020b 	sub.w	r2, r5, fp
 8005888:	2e00      	cmp	r6, #0
 800588a:	bf08      	it	eq
 800588c:	461e      	moveq	r6, r3
 800588e:	2b10      	cmp	r3, #16
 8005890:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005894:	9206      	str	r2, [sp, #24]
 8005896:	461a      	mov	r2, r3
 8005898:	bfa8      	it	ge
 800589a:	2210      	movge	r2, #16
 800589c:	2b09      	cmp	r3, #9
 800589e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80058a2:	dd0e      	ble.n	80058c2 <_strtod_l+0x3ea>
 80058a4:	4975      	ldr	r1, [pc, #468]	; (8005a7c <_strtod_l+0x5a4>)
 80058a6:	eddd 7a04 	vldr	s15, [sp, #16]
 80058aa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80058ae:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80058b2:	ed9d 5b08 	vldr	d5, [sp, #32]
 80058b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80058ba:	eea5 7b06 	vfma.f64	d7, d5, d6
 80058be:	ec59 8b17 	vmov	r8, r9, d7
 80058c2:	2b0f      	cmp	r3, #15
 80058c4:	dc37      	bgt.n	8005936 <_strtod_l+0x45e>
 80058c6:	9906      	ldr	r1, [sp, #24]
 80058c8:	2900      	cmp	r1, #0
 80058ca:	f43f ae49 	beq.w	8005560 <_strtod_l+0x88>
 80058ce:	dd23      	ble.n	8005918 <_strtod_l+0x440>
 80058d0:	2916      	cmp	r1, #22
 80058d2:	dc0b      	bgt.n	80058ec <_strtod_l+0x414>
 80058d4:	4b69      	ldr	r3, [pc, #420]	; (8005a7c <_strtod_l+0x5a4>)
 80058d6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80058da:	ed93 7b00 	vldr	d7, [r3]
 80058de:	ec49 8b16 	vmov	d6, r8, r9
 80058e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80058e6:	ec59 8b17 	vmov	r8, r9, d7
 80058ea:	e639      	b.n	8005560 <_strtod_l+0x88>
 80058ec:	9806      	ldr	r0, [sp, #24]
 80058ee:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80058f2:	4281      	cmp	r1, r0
 80058f4:	db1f      	blt.n	8005936 <_strtod_l+0x45e>
 80058f6:	4a61      	ldr	r2, [pc, #388]	; (8005a7c <_strtod_l+0x5a4>)
 80058f8:	f1c3 030f 	rsb	r3, r3, #15
 80058fc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8005900:	ed91 7b00 	vldr	d7, [r1]
 8005904:	ec49 8b16 	vmov	d6, r8, r9
 8005908:	1ac3      	subs	r3, r0, r3
 800590a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800590e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005912:	ed92 6b00 	vldr	d6, [r2]
 8005916:	e7e4      	b.n	80058e2 <_strtod_l+0x40a>
 8005918:	9906      	ldr	r1, [sp, #24]
 800591a:	3116      	adds	r1, #22
 800591c:	db0b      	blt.n	8005936 <_strtod_l+0x45e>
 800591e:	4b57      	ldr	r3, [pc, #348]	; (8005a7c <_strtod_l+0x5a4>)
 8005920:	ebab 0505 	sub.w	r5, fp, r5
 8005924:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005928:	ed95 7b00 	vldr	d7, [r5]
 800592c:	ec49 8b16 	vmov	d6, r8, r9
 8005930:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005934:	e7d7      	b.n	80058e6 <_strtod_l+0x40e>
 8005936:	9906      	ldr	r1, [sp, #24]
 8005938:	1a9a      	subs	r2, r3, r2
 800593a:	440a      	add	r2, r1
 800593c:	2a00      	cmp	r2, #0
 800593e:	dd74      	ble.n	8005a2a <_strtod_l+0x552>
 8005940:	f012 000f 	ands.w	r0, r2, #15
 8005944:	d00a      	beq.n	800595c <_strtod_l+0x484>
 8005946:	494d      	ldr	r1, [pc, #308]	; (8005a7c <_strtod_l+0x5a4>)
 8005948:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800594c:	ed91 7b00 	vldr	d7, [r1]
 8005950:	ec49 8b16 	vmov	d6, r8, r9
 8005954:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005958:	ec59 8b17 	vmov	r8, r9, d7
 800595c:	f032 020f 	bics.w	r2, r2, #15
 8005960:	d04f      	beq.n	8005a02 <_strtod_l+0x52a>
 8005962:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8005966:	dd22      	ble.n	80059ae <_strtod_l+0x4d6>
 8005968:	2500      	movs	r5, #0
 800596a:	462e      	mov	r6, r5
 800596c:	950a      	str	r5, [sp, #40]	; 0x28
 800596e:	462f      	mov	r7, r5
 8005970:	2322      	movs	r3, #34	; 0x22
 8005972:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8005a88 <_strtod_l+0x5b0>
 8005976:	6023      	str	r3, [r4, #0]
 8005978:	f04f 0800 	mov.w	r8, #0
 800597c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800597e:	2b00      	cmp	r3, #0
 8005980:	f43f adee 	beq.w	8005560 <_strtod_l+0x88>
 8005984:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005986:	4620      	mov	r0, r4
 8005988:	f001 fdf4 	bl	8007574 <_Bfree>
 800598c:	4639      	mov	r1, r7
 800598e:	4620      	mov	r0, r4
 8005990:	f001 fdf0 	bl	8007574 <_Bfree>
 8005994:	4631      	mov	r1, r6
 8005996:	4620      	mov	r0, r4
 8005998:	f001 fdec 	bl	8007574 <_Bfree>
 800599c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800599e:	4620      	mov	r0, r4
 80059a0:	f001 fde8 	bl	8007574 <_Bfree>
 80059a4:	4629      	mov	r1, r5
 80059a6:	4620      	mov	r0, r4
 80059a8:	f001 fde4 	bl	8007574 <_Bfree>
 80059ac:	e5d8      	b.n	8005560 <_strtod_l+0x88>
 80059ae:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80059b2:	2000      	movs	r0, #0
 80059b4:	4f32      	ldr	r7, [pc, #200]	; (8005a80 <_strtod_l+0x5a8>)
 80059b6:	1112      	asrs	r2, r2, #4
 80059b8:	4601      	mov	r1, r0
 80059ba:	2a01      	cmp	r2, #1
 80059bc:	dc24      	bgt.n	8005a08 <_strtod_l+0x530>
 80059be:	b108      	cbz	r0, 80059c4 <_strtod_l+0x4ec>
 80059c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80059c4:	4a2e      	ldr	r2, [pc, #184]	; (8005a80 <_strtod_l+0x5a8>)
 80059c6:	482f      	ldr	r0, [pc, #188]	; (8005a84 <_strtod_l+0x5ac>)
 80059c8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80059cc:	ed91 7b00 	vldr	d7, [r1]
 80059d0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80059d4:	ec49 8b16 	vmov	d6, r8, r9
 80059d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80059dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80059e0:	9905      	ldr	r1, [sp, #20]
 80059e2:	4a29      	ldr	r2, [pc, #164]	; (8005a88 <_strtod_l+0x5b0>)
 80059e4:	400a      	ands	r2, r1
 80059e6:	4282      	cmp	r2, r0
 80059e8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80059ec:	d8bc      	bhi.n	8005968 <_strtod_l+0x490>
 80059ee:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80059f2:	4282      	cmp	r2, r0
 80059f4:	bf86      	itte	hi
 80059f6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005a8c <_strtod_l+0x5b4>
 80059fa:	f04f 38ff 	movhi.w	r8, #4294967295
 80059fe:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8005a02:	2200      	movs	r2, #0
 8005a04:	9204      	str	r2, [sp, #16]
 8005a06:	e07f      	b.n	8005b08 <_strtod_l+0x630>
 8005a08:	f012 0f01 	tst.w	r2, #1
 8005a0c:	d00a      	beq.n	8005a24 <_strtod_l+0x54c>
 8005a0e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8005a12:	ed90 7b00 	vldr	d7, [r0]
 8005a16:	ed9d 6b04 	vldr	d6, [sp, #16]
 8005a1a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005a1e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005a22:	2001      	movs	r0, #1
 8005a24:	3101      	adds	r1, #1
 8005a26:	1052      	asrs	r2, r2, #1
 8005a28:	e7c7      	b.n	80059ba <_strtod_l+0x4e2>
 8005a2a:	d0ea      	beq.n	8005a02 <_strtod_l+0x52a>
 8005a2c:	4252      	negs	r2, r2
 8005a2e:	f012 000f 	ands.w	r0, r2, #15
 8005a32:	d00a      	beq.n	8005a4a <_strtod_l+0x572>
 8005a34:	4911      	ldr	r1, [pc, #68]	; (8005a7c <_strtod_l+0x5a4>)
 8005a36:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005a3a:	ed91 7b00 	vldr	d7, [r1]
 8005a3e:	ec49 8b16 	vmov	d6, r8, r9
 8005a42:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005a46:	ec59 8b17 	vmov	r8, r9, d7
 8005a4a:	1112      	asrs	r2, r2, #4
 8005a4c:	d0d9      	beq.n	8005a02 <_strtod_l+0x52a>
 8005a4e:	2a1f      	cmp	r2, #31
 8005a50:	dd1e      	ble.n	8005a90 <_strtod_l+0x5b8>
 8005a52:	2500      	movs	r5, #0
 8005a54:	462e      	mov	r6, r5
 8005a56:	950a      	str	r5, [sp, #40]	; 0x28
 8005a58:	462f      	mov	r7, r5
 8005a5a:	2322      	movs	r3, #34	; 0x22
 8005a5c:	f04f 0800 	mov.w	r8, #0
 8005a60:	f04f 0900 	mov.w	r9, #0
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	e789      	b.n	800597c <_strtod_l+0x4a4>
 8005a68:	08008ee9 	.word	0x08008ee9
 8005a6c:	08008f2c 	.word	0x08008f2c
 8005a70:	08008ee1 	.word	0x08008ee1
 8005a74:	0800906c 	.word	0x0800906c
 8005a78:	08009328 	.word	0x08009328
 8005a7c:	08009208 	.word	0x08009208
 8005a80:	080091e0 	.word	0x080091e0
 8005a84:	7ca00000 	.word	0x7ca00000
 8005a88:	7ff00000 	.word	0x7ff00000
 8005a8c:	7fefffff 	.word	0x7fefffff
 8005a90:	f012 0110 	ands.w	r1, r2, #16
 8005a94:	bf18      	it	ne
 8005a96:	216a      	movne	r1, #106	; 0x6a
 8005a98:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8005a9c:	9104      	str	r1, [sp, #16]
 8005a9e:	49c0      	ldr	r1, [pc, #768]	; (8005da0 <_strtod_l+0x8c8>)
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	07d7      	lsls	r7, r2, #31
 8005aa4:	d508      	bpl.n	8005ab8 <_strtod_l+0x5e0>
 8005aa6:	ed9d 6b08 	vldr	d6, [sp, #32]
 8005aaa:	ed91 7b00 	vldr	d7, [r1]
 8005aae:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005ab2:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005ab6:	2001      	movs	r0, #1
 8005ab8:	1052      	asrs	r2, r2, #1
 8005aba:	f101 0108 	add.w	r1, r1, #8
 8005abe:	d1f0      	bne.n	8005aa2 <_strtod_l+0x5ca>
 8005ac0:	b108      	cbz	r0, 8005ac6 <_strtod_l+0x5ee>
 8005ac2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8005ac6:	9a04      	ldr	r2, [sp, #16]
 8005ac8:	b1ba      	cbz	r2, 8005afa <_strtod_l+0x622>
 8005aca:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005ace:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8005ad2:	2a00      	cmp	r2, #0
 8005ad4:	4649      	mov	r1, r9
 8005ad6:	dd10      	ble.n	8005afa <_strtod_l+0x622>
 8005ad8:	2a1f      	cmp	r2, #31
 8005ada:	f340 8132 	ble.w	8005d42 <_strtod_l+0x86a>
 8005ade:	2a34      	cmp	r2, #52	; 0x34
 8005ae0:	bfde      	ittt	le
 8005ae2:	3a20      	suble	r2, #32
 8005ae4:	f04f 30ff 	movle.w	r0, #4294967295
 8005ae8:	fa00 f202 	lslle.w	r2, r0, r2
 8005aec:	f04f 0800 	mov.w	r8, #0
 8005af0:	bfcc      	ite	gt
 8005af2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005af6:	ea02 0901 	andle.w	r9, r2, r1
 8005afa:	ec49 8b17 	vmov	d7, r8, r9
 8005afe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b06:	d0a4      	beq.n	8005a52 <_strtod_l+0x57a>
 8005b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b0a:	9200      	str	r2, [sp, #0]
 8005b0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b0e:	4632      	mov	r2, r6
 8005b10:	4620      	mov	r0, r4
 8005b12:	f001 fd9b 	bl	800764c <__s2b>
 8005b16:	900a      	str	r0, [sp, #40]	; 0x28
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	f43f af25 	beq.w	8005968 <_strtod_l+0x490>
 8005b1e:	9b06      	ldr	r3, [sp, #24]
 8005b20:	ebab 0505 	sub.w	r5, fp, r5
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	bfb4      	ite	lt
 8005b28:	462b      	movlt	r3, r5
 8005b2a:	2300      	movge	r3, #0
 8005b2c:	930c      	str	r3, [sp, #48]	; 0x30
 8005b2e:	9b06      	ldr	r3, [sp, #24]
 8005b30:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8005d88 <_strtod_l+0x8b0>
 8005b34:	ed9f ab96 	vldr	d10, [pc, #600]	; 8005d90 <_strtod_l+0x8b8>
 8005b38:	ed9f bb97 	vldr	d11, [pc, #604]	; 8005d98 <_strtod_l+0x8c0>
 8005b3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005b40:	2500      	movs	r5, #0
 8005b42:	9312      	str	r3, [sp, #72]	; 0x48
 8005b44:	462e      	mov	r6, r5
 8005b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b48:	4620      	mov	r0, r4
 8005b4a:	6859      	ldr	r1, [r3, #4]
 8005b4c:	f001 fcd2 	bl	80074f4 <_Balloc>
 8005b50:	4607      	mov	r7, r0
 8005b52:	2800      	cmp	r0, #0
 8005b54:	f43f af0c 	beq.w	8005970 <_strtod_l+0x498>
 8005b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	3202      	adds	r2, #2
 8005b5e:	f103 010c 	add.w	r1, r3, #12
 8005b62:	0092      	lsls	r2, r2, #2
 8005b64:	300c      	adds	r0, #12
 8005b66:	f001 fcb7 	bl	80074d8 <memcpy>
 8005b6a:	ec49 8b10 	vmov	d0, r8, r9
 8005b6e:	aa1a      	add	r2, sp, #104	; 0x68
 8005b70:	a919      	add	r1, sp, #100	; 0x64
 8005b72:	4620      	mov	r0, r4
 8005b74:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8005b78:	f002 f8a4 	bl	8007cc4 <__d2b>
 8005b7c:	9018      	str	r0, [sp, #96]	; 0x60
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	f43f aef6 	beq.w	8005970 <_strtod_l+0x498>
 8005b84:	2101      	movs	r1, #1
 8005b86:	4620      	mov	r0, r4
 8005b88:	f001 fdfa 	bl	8007780 <__i2b>
 8005b8c:	4606      	mov	r6, r0
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	f43f aeee 	beq.w	8005970 <_strtod_l+0x498>
 8005b94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b96:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	bfab      	itete	ge
 8005b9c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005b9e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005ba0:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8005ba4:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8005ba8:	bfac      	ite	ge
 8005baa:	eb03 0b02 	addge.w	fp, r3, r2
 8005bae:	eba2 0a03 	sublt.w	sl, r2, r3
 8005bb2:	9a04      	ldr	r2, [sp, #16]
 8005bb4:	1a9b      	subs	r3, r3, r2
 8005bb6:	440b      	add	r3, r1
 8005bb8:	4a7a      	ldr	r2, [pc, #488]	; (8005da4 <_strtod_l+0x8cc>)
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8005bc2:	f280 80d1 	bge.w	8005d68 <_strtod_l+0x890>
 8005bc6:	1ad2      	subs	r2, r2, r3
 8005bc8:	2a1f      	cmp	r2, #31
 8005bca:	eba1 0102 	sub.w	r1, r1, r2
 8005bce:	f04f 0001 	mov.w	r0, #1
 8005bd2:	f300 80bd 	bgt.w	8005d50 <_strtod_l+0x878>
 8005bd6:	fa00 f302 	lsl.w	r3, r0, r2
 8005bda:	930e      	str	r3, [sp, #56]	; 0x38
 8005bdc:	2300      	movs	r3, #0
 8005bde:	930d      	str	r3, [sp, #52]	; 0x34
 8005be0:	eb0b 0301 	add.w	r3, fp, r1
 8005be4:	9a04      	ldr	r2, [sp, #16]
 8005be6:	459b      	cmp	fp, r3
 8005be8:	448a      	add	sl, r1
 8005bea:	4492      	add	sl, r2
 8005bec:	465a      	mov	r2, fp
 8005bee:	bfa8      	it	ge
 8005bf0:	461a      	movge	r2, r3
 8005bf2:	4552      	cmp	r2, sl
 8005bf4:	bfa8      	it	ge
 8005bf6:	4652      	movge	r2, sl
 8005bf8:	2a00      	cmp	r2, #0
 8005bfa:	bfc2      	ittt	gt
 8005bfc:	1a9b      	subgt	r3, r3, r2
 8005bfe:	ebaa 0a02 	subgt.w	sl, sl, r2
 8005c02:	ebab 0b02 	subgt.w	fp, fp, r2
 8005c06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c08:	2a00      	cmp	r2, #0
 8005c0a:	dd18      	ble.n	8005c3e <_strtod_l+0x766>
 8005c0c:	4631      	mov	r1, r6
 8005c0e:	4620      	mov	r0, r4
 8005c10:	9315      	str	r3, [sp, #84]	; 0x54
 8005c12:	f001 fe71 	bl	80078f8 <__pow5mult>
 8005c16:	4606      	mov	r6, r0
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	f43f aea9 	beq.w	8005970 <_strtod_l+0x498>
 8005c1e:	4601      	mov	r1, r0
 8005c20:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005c22:	4620      	mov	r0, r4
 8005c24:	f001 fdc2 	bl	80077ac <__multiply>
 8005c28:	9014      	str	r0, [sp, #80]	; 0x50
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	f43f aea0 	beq.w	8005970 <_strtod_l+0x498>
 8005c30:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005c32:	4620      	mov	r0, r4
 8005c34:	f001 fc9e 	bl	8007574 <_Bfree>
 8005c38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005c3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c3c:	9218      	str	r2, [sp, #96]	; 0x60
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f300 8097 	bgt.w	8005d72 <_strtod_l+0x89a>
 8005c44:	9b06      	ldr	r3, [sp, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	dd08      	ble.n	8005c5c <_strtod_l+0x784>
 8005c4a:	4639      	mov	r1, r7
 8005c4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f001 fe52 	bl	80078f8 <__pow5mult>
 8005c54:	4607      	mov	r7, r0
 8005c56:	2800      	cmp	r0, #0
 8005c58:	f43f ae8a 	beq.w	8005970 <_strtod_l+0x498>
 8005c5c:	f1ba 0f00 	cmp.w	sl, #0
 8005c60:	dd08      	ble.n	8005c74 <_strtod_l+0x79c>
 8005c62:	4639      	mov	r1, r7
 8005c64:	4652      	mov	r2, sl
 8005c66:	4620      	mov	r0, r4
 8005c68:	f001 fea0 	bl	80079ac <__lshift>
 8005c6c:	4607      	mov	r7, r0
 8005c6e:	2800      	cmp	r0, #0
 8005c70:	f43f ae7e 	beq.w	8005970 <_strtod_l+0x498>
 8005c74:	f1bb 0f00 	cmp.w	fp, #0
 8005c78:	dd08      	ble.n	8005c8c <_strtod_l+0x7b4>
 8005c7a:	4631      	mov	r1, r6
 8005c7c:	465a      	mov	r2, fp
 8005c7e:	4620      	mov	r0, r4
 8005c80:	f001 fe94 	bl	80079ac <__lshift>
 8005c84:	4606      	mov	r6, r0
 8005c86:	2800      	cmp	r0, #0
 8005c88:	f43f ae72 	beq.w	8005970 <_strtod_l+0x498>
 8005c8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005c8e:	463a      	mov	r2, r7
 8005c90:	4620      	mov	r0, r4
 8005c92:	f001 ff13 	bl	8007abc <__mdiff>
 8005c96:	4605      	mov	r5, r0
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	f43f ae69 	beq.w	8005970 <_strtod_l+0x498>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8005ca4:	60c3      	str	r3, [r0, #12]
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	f001 feec 	bl	8007a84 <__mcmp>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	da7f      	bge.n	8005db0 <_strtod_l+0x8d8>
 8005cb0:	ea5a 0308 	orrs.w	r3, sl, r8
 8005cb4:	f040 80a5 	bne.w	8005e02 <_strtod_l+0x92a>
 8005cb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f040 80a0 	bne.w	8005e02 <_strtod_l+0x92a>
 8005cc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005cc6:	0d1b      	lsrs	r3, r3, #20
 8005cc8:	051b      	lsls	r3, r3, #20
 8005cca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005cce:	f240 8098 	bls.w	8005e02 <_strtod_l+0x92a>
 8005cd2:	696b      	ldr	r3, [r5, #20]
 8005cd4:	b91b      	cbnz	r3, 8005cde <_strtod_l+0x806>
 8005cd6:	692b      	ldr	r3, [r5, #16]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	f340 8092 	ble.w	8005e02 <_strtod_l+0x92a>
 8005cde:	4629      	mov	r1, r5
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f001 fe62 	bl	80079ac <__lshift>
 8005ce8:	4631      	mov	r1, r6
 8005cea:	4605      	mov	r5, r0
 8005cec:	f001 feca 	bl	8007a84 <__mcmp>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	f340 8086 	ble.w	8005e02 <_strtod_l+0x92a>
 8005cf6:	9904      	ldr	r1, [sp, #16]
 8005cf8:	4a2b      	ldr	r2, [pc, #172]	; (8005da8 <_strtod_l+0x8d0>)
 8005cfa:	464b      	mov	r3, r9
 8005cfc:	2900      	cmp	r1, #0
 8005cfe:	f000 80a1 	beq.w	8005e44 <_strtod_l+0x96c>
 8005d02:	ea02 0109 	and.w	r1, r2, r9
 8005d06:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005d0a:	f300 809b 	bgt.w	8005e44 <_strtod_l+0x96c>
 8005d0e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005d12:	f77f aea2 	ble.w	8005a5a <_strtod_l+0x582>
 8005d16:	4a25      	ldr	r2, [pc, #148]	; (8005dac <_strtod_l+0x8d4>)
 8005d18:	2300      	movs	r3, #0
 8005d1a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8005d1e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8005d22:	ec49 8b17 	vmov	d7, r8, r9
 8005d26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005d2a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005d2e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	bf08      	it	eq
 8005d36:	2322      	moveq	r3, #34	; 0x22
 8005d38:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005d3c:	bf08      	it	eq
 8005d3e:	6023      	streq	r3, [r4, #0]
 8005d40:	e620      	b.n	8005984 <_strtod_l+0x4ac>
 8005d42:	f04f 31ff 	mov.w	r1, #4294967295
 8005d46:	fa01 f202 	lsl.w	r2, r1, r2
 8005d4a:	ea02 0808 	and.w	r8, r2, r8
 8005d4e:	e6d4      	b.n	8005afa <_strtod_l+0x622>
 8005d50:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8005d54:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8005d58:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8005d5c:	33e2      	adds	r3, #226	; 0xe2
 8005d5e:	fa00 f303 	lsl.w	r3, r0, r3
 8005d62:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8005d66:	e73b      	b.n	8005be0 <_strtod_l+0x708>
 8005d68:	2000      	movs	r0, #0
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8005d70:	e736      	b.n	8005be0 <_strtod_l+0x708>
 8005d72:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005d74:	461a      	mov	r2, r3
 8005d76:	4620      	mov	r0, r4
 8005d78:	f001 fe18 	bl	80079ac <__lshift>
 8005d7c:	9018      	str	r0, [sp, #96]	; 0x60
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	f47f af60 	bne.w	8005c44 <_strtod_l+0x76c>
 8005d84:	e5f4      	b.n	8005970 <_strtod_l+0x498>
 8005d86:	bf00      	nop
 8005d88:	94a03595 	.word	0x94a03595
 8005d8c:	3fcfffff 	.word	0x3fcfffff
 8005d90:	94a03595 	.word	0x94a03595
 8005d94:	3fdfffff 	.word	0x3fdfffff
 8005d98:	35afe535 	.word	0x35afe535
 8005d9c:	3fe00000 	.word	0x3fe00000
 8005da0:	08008f40 	.word	0x08008f40
 8005da4:	fffffc02 	.word	0xfffffc02
 8005da8:	7ff00000 	.word	0x7ff00000
 8005dac:	39500000 	.word	0x39500000
 8005db0:	46cb      	mov	fp, r9
 8005db2:	d165      	bne.n	8005e80 <_strtod_l+0x9a8>
 8005db4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005db8:	f1ba 0f00 	cmp.w	sl, #0
 8005dbc:	d02a      	beq.n	8005e14 <_strtod_l+0x93c>
 8005dbe:	4aaa      	ldr	r2, [pc, #680]	; (8006068 <_strtod_l+0xb90>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d12b      	bne.n	8005e1c <_strtod_l+0x944>
 8005dc4:	9b04      	ldr	r3, [sp, #16]
 8005dc6:	4641      	mov	r1, r8
 8005dc8:	b1fb      	cbz	r3, 8005e0a <_strtod_l+0x932>
 8005dca:	4aa8      	ldr	r2, [pc, #672]	; (800606c <_strtod_l+0xb94>)
 8005dcc:	ea09 0202 	and.w	r2, r9, r2
 8005dd0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd8:	d81a      	bhi.n	8005e10 <_strtod_l+0x938>
 8005dda:	0d12      	lsrs	r2, r2, #20
 8005ddc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005de0:	fa00 f303 	lsl.w	r3, r0, r3
 8005de4:	4299      	cmp	r1, r3
 8005de6:	d119      	bne.n	8005e1c <_strtod_l+0x944>
 8005de8:	4ba1      	ldr	r3, [pc, #644]	; (8006070 <_strtod_l+0xb98>)
 8005dea:	459b      	cmp	fp, r3
 8005dec:	d102      	bne.n	8005df4 <_strtod_l+0x91c>
 8005dee:	3101      	adds	r1, #1
 8005df0:	f43f adbe 	beq.w	8005970 <_strtod_l+0x498>
 8005df4:	4b9d      	ldr	r3, [pc, #628]	; (800606c <_strtod_l+0xb94>)
 8005df6:	ea0b 0303 	and.w	r3, fp, r3
 8005dfa:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8005dfe:	f04f 0800 	mov.w	r8, #0
 8005e02:	9b04      	ldr	r3, [sp, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d186      	bne.n	8005d16 <_strtod_l+0x83e>
 8005e08:	e5bc      	b.n	8005984 <_strtod_l+0x4ac>
 8005e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e0e:	e7e9      	b.n	8005de4 <_strtod_l+0x90c>
 8005e10:	4603      	mov	r3, r0
 8005e12:	e7e7      	b.n	8005de4 <_strtod_l+0x90c>
 8005e14:	ea53 0308 	orrs.w	r3, r3, r8
 8005e18:	f43f af6d 	beq.w	8005cf6 <_strtod_l+0x81e>
 8005e1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e1e:	b1db      	cbz	r3, 8005e58 <_strtod_l+0x980>
 8005e20:	ea13 0f0b 	tst.w	r3, fp
 8005e24:	d0ed      	beq.n	8005e02 <_strtod_l+0x92a>
 8005e26:	9a04      	ldr	r2, [sp, #16]
 8005e28:	4640      	mov	r0, r8
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	f1ba 0f00 	cmp.w	sl, #0
 8005e30:	d016      	beq.n	8005e60 <_strtod_l+0x988>
 8005e32:	f7ff fb35 	bl	80054a0 <sulp>
 8005e36:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005e3a:	ee37 7b00 	vadd.f64	d7, d7, d0
 8005e3e:	ec59 8b17 	vmov	r8, r9, d7
 8005e42:	e7de      	b.n	8005e02 <_strtod_l+0x92a>
 8005e44:	4013      	ands	r3, r2
 8005e46:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005e4a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005e4e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005e52:	f04f 38ff 	mov.w	r8, #4294967295
 8005e56:	e7d4      	b.n	8005e02 <_strtod_l+0x92a>
 8005e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e5a:	ea13 0f08 	tst.w	r3, r8
 8005e5e:	e7e1      	b.n	8005e24 <_strtod_l+0x94c>
 8005e60:	f7ff fb1e 	bl	80054a0 <sulp>
 8005e64:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005e68:	ee37 7b40 	vsub.f64	d7, d7, d0
 8005e6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005e70:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e78:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005e7c:	d1c1      	bne.n	8005e02 <_strtod_l+0x92a>
 8005e7e:	e5ec      	b.n	8005a5a <_strtod_l+0x582>
 8005e80:	4631      	mov	r1, r6
 8005e82:	4628      	mov	r0, r5
 8005e84:	f001 ff7a 	bl	8007d7c <__ratio>
 8005e88:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8005e8c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8005e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e94:	d867      	bhi.n	8005f66 <_strtod_l+0xa8e>
 8005e96:	f1ba 0f00 	cmp.w	sl, #0
 8005e9a:	d044      	beq.n	8005f26 <_strtod_l+0xa4e>
 8005e9c:	4b75      	ldr	r3, [pc, #468]	; (8006074 <_strtod_l+0xb9c>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8005ea4:	4971      	ldr	r1, [pc, #452]	; (800606c <_strtod_l+0xb94>)
 8005ea6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8006080 <_strtod_l+0xba8>
 8005eaa:	ea0b 0001 	and.w	r0, fp, r1
 8005eae:	4560      	cmp	r0, ip
 8005eb0:	900d      	str	r0, [sp, #52]	; 0x34
 8005eb2:	f040 808b 	bne.w	8005fcc <_strtod_l+0xaf4>
 8005eb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005eba:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8005ebe:	ec49 8b10 	vmov	d0, r8, r9
 8005ec2:	ec43 2b1c 	vmov	d12, r2, r3
 8005ec6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005eca:	f001 fe7f 	bl	8007bcc <__ulp>
 8005ece:	ec49 8b1d 	vmov	d13, r8, r9
 8005ed2:	eeac db00 	vfma.f64	d13, d12, d0
 8005ed6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8005eda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005edc:	4963      	ldr	r1, [pc, #396]	; (800606c <_strtod_l+0xb94>)
 8005ede:	4a66      	ldr	r2, [pc, #408]	; (8006078 <_strtod_l+0xba0>)
 8005ee0:	4019      	ands	r1, r3
 8005ee2:	4291      	cmp	r1, r2
 8005ee4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8005ee8:	d947      	bls.n	8005f7a <_strtod_l+0xaa2>
 8005eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d103      	bne.n	8005efc <_strtod_l+0xa24>
 8005ef4:	9b08      	ldr	r3, [sp, #32]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	f43f ad3a 	beq.w	8005970 <_strtod_l+0x498>
 8005efc:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8006070 <_strtod_l+0xb98>
 8005f00:	f04f 38ff 	mov.w	r8, #4294967295
 8005f04:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005f06:	4620      	mov	r0, r4
 8005f08:	f001 fb34 	bl	8007574 <_Bfree>
 8005f0c:	4639      	mov	r1, r7
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f001 fb30 	bl	8007574 <_Bfree>
 8005f14:	4631      	mov	r1, r6
 8005f16:	4620      	mov	r0, r4
 8005f18:	f001 fb2c 	bl	8007574 <_Bfree>
 8005f1c:	4629      	mov	r1, r5
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f001 fb28 	bl	8007574 <_Bfree>
 8005f24:	e60f      	b.n	8005b46 <_strtod_l+0x66e>
 8005f26:	f1b8 0f00 	cmp.w	r8, #0
 8005f2a:	d112      	bne.n	8005f52 <_strtod_l+0xa7a>
 8005f2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f30:	b9b3      	cbnz	r3, 8005f60 <_strtod_l+0xa88>
 8005f32:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8005f36:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8005f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f3e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8005f42:	d401      	bmi.n	8005f48 <_strtod_l+0xa70>
 8005f44:	ee20 8b08 	vmul.f64	d8, d0, d8
 8005f48:	eeb1 7b48 	vneg.f64	d7, d8
 8005f4c:	ec53 2b17 	vmov	r2, r3, d7
 8005f50:	e7a8      	b.n	8005ea4 <_strtod_l+0x9cc>
 8005f52:	f1b8 0f01 	cmp.w	r8, #1
 8005f56:	d103      	bne.n	8005f60 <_strtod_l+0xa88>
 8005f58:	f1b9 0f00 	cmp.w	r9, #0
 8005f5c:	f43f ad7d 	beq.w	8005a5a <_strtod_l+0x582>
 8005f60:	4b46      	ldr	r3, [pc, #280]	; (800607c <_strtod_l+0xba4>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	e79c      	b.n	8005ea0 <_strtod_l+0x9c8>
 8005f66:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8005f6a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8005f6e:	f1ba 0f00 	cmp.w	sl, #0
 8005f72:	d0e9      	beq.n	8005f48 <_strtod_l+0xa70>
 8005f74:	ec53 2b18 	vmov	r2, r3, d8
 8005f78:	e794      	b.n	8005ea4 <_strtod_l+0x9cc>
 8005f7a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005f7e:	9b04      	ldr	r3, [sp, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1bf      	bne.n	8005f04 <_strtod_l+0xa2c>
 8005f84:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f8a:	0d1b      	lsrs	r3, r3, #20
 8005f8c:	051b      	lsls	r3, r3, #20
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d1b8      	bne.n	8005f04 <_strtod_l+0xa2c>
 8005f92:	ec51 0b18 	vmov	r0, r1, d8
 8005f96:	f7fa fbb7 	bl	8000708 <__aeabi_d2lz>
 8005f9a:	f7fa fb87 	bl	80006ac <__aeabi_l2d>
 8005f9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005fa2:	ec41 0b17 	vmov	d7, r0, r1
 8005fa6:	ea43 0308 	orr.w	r3, r3, r8
 8005faa:	ea53 030a 	orrs.w	r3, r3, sl
 8005fae:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005fb2:	d03e      	beq.n	8006032 <_strtod_l+0xb5a>
 8005fb4:	eeb4 8bca 	vcmpe.f64	d8, d10
 8005fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fbc:	f53f ace2 	bmi.w	8005984 <_strtod_l+0x4ac>
 8005fc0:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8005fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fc8:	dd9c      	ble.n	8005f04 <_strtod_l+0xa2c>
 8005fca:	e4db      	b.n	8005984 <_strtod_l+0x4ac>
 8005fcc:	9904      	ldr	r1, [sp, #16]
 8005fce:	b301      	cbz	r1, 8006012 <_strtod_l+0xb3a>
 8005fd0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005fd2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8005fd6:	d81c      	bhi.n	8006012 <_strtod_l+0xb3a>
 8005fd8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8006060 <_strtod_l+0xb88>
 8005fdc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fe4:	d811      	bhi.n	800600a <_strtod_l+0xb32>
 8005fe6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8005fea:	ee18 3a10 	vmov	r3, s16
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	bf38      	it	cc
 8005ff2:	2301      	movcc	r3, #1
 8005ff4:	ee08 3a10 	vmov	s16, r3
 8005ff8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8005ffc:	f1ba 0f00 	cmp.w	sl, #0
 8006000:	d114      	bne.n	800602c <_strtod_l+0xb54>
 8006002:	eeb1 7b48 	vneg.f64	d7, d8
 8006006:	ec53 2b17 	vmov	r2, r3, d7
 800600a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800600c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8006010:	1a0b      	subs	r3, r1, r0
 8006012:	ed9d 0b08 	vldr	d0, [sp, #32]
 8006016:	ec43 2b1c 	vmov	d12, r2, r3
 800601a:	f001 fdd7 	bl	8007bcc <__ulp>
 800601e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8006022:	eeac 7b00 	vfma.f64	d7, d12, d0
 8006026:	ec59 8b17 	vmov	r8, r9, d7
 800602a:	e7a8      	b.n	8005f7e <_strtod_l+0xaa6>
 800602c:	ec53 2b18 	vmov	r2, r3, d8
 8006030:	e7eb      	b.n	800600a <_strtod_l+0xb32>
 8006032:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8006036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800603a:	f57f af63 	bpl.w	8005f04 <_strtod_l+0xa2c>
 800603e:	e4a1      	b.n	8005984 <_strtod_l+0x4ac>
 8006040:	2300      	movs	r3, #0
 8006042:	930b      	str	r3, [sp, #44]	; 0x2c
 8006044:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006046:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	f7ff ba8d 	b.w	8005568 <_strtod_l+0x90>
 800604e:	2a65      	cmp	r2, #101	; 0x65
 8006050:	f43f ab89 	beq.w	8005766 <_strtod_l+0x28e>
 8006054:	2a45      	cmp	r2, #69	; 0x45
 8006056:	f43f ab86 	beq.w	8005766 <_strtod_l+0x28e>
 800605a:	2101      	movs	r1, #1
 800605c:	f7ff bbbe 	b.w	80057dc <_strtod_l+0x304>
 8006060:	ffc00000 	.word	0xffc00000
 8006064:	41dfffff 	.word	0x41dfffff
 8006068:	000fffff 	.word	0x000fffff
 800606c:	7ff00000 	.word	0x7ff00000
 8006070:	7fefffff 	.word	0x7fefffff
 8006074:	3ff00000 	.word	0x3ff00000
 8006078:	7c9fffff 	.word	0x7c9fffff
 800607c:	bff00000 	.word	0xbff00000
 8006080:	7fe00000 	.word	0x7fe00000

08006084 <_strtod_r>:
 8006084:	4b01      	ldr	r3, [pc, #4]	; (800608c <_strtod_r+0x8>)
 8006086:	f7ff ba27 	b.w	80054d8 <_strtod_l>
 800608a:	bf00      	nop
 800608c:	2400007c 	.word	0x2400007c

08006090 <_strtol_l.isra.0>:
 8006090:	2b01      	cmp	r3, #1
 8006092:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006096:	d001      	beq.n	800609c <_strtol_l.isra.0+0xc>
 8006098:	2b24      	cmp	r3, #36	; 0x24
 800609a:	d906      	bls.n	80060aa <_strtol_l.isra.0+0x1a>
 800609c:	f7fe fb62 	bl	8004764 <__errno>
 80060a0:	2316      	movs	r3, #22
 80060a2:	6003      	str	r3, [r0, #0]
 80060a4:	2000      	movs	r0, #0
 80060a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060aa:	4f3a      	ldr	r7, [pc, #232]	; (8006194 <_strtol_l.isra.0+0x104>)
 80060ac:	468e      	mov	lr, r1
 80060ae:	4676      	mov	r6, lr
 80060b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80060b4:	5de5      	ldrb	r5, [r4, r7]
 80060b6:	f015 0508 	ands.w	r5, r5, #8
 80060ba:	d1f8      	bne.n	80060ae <_strtol_l.isra.0+0x1e>
 80060bc:	2c2d      	cmp	r4, #45	; 0x2d
 80060be:	d134      	bne.n	800612a <_strtol_l.isra.0+0x9a>
 80060c0:	f89e 4000 	ldrb.w	r4, [lr]
 80060c4:	f04f 0801 	mov.w	r8, #1
 80060c8:	f106 0e02 	add.w	lr, r6, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d05c      	beq.n	800618a <_strtol_l.isra.0+0xfa>
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	d10c      	bne.n	80060ee <_strtol_l.isra.0+0x5e>
 80060d4:	2c30      	cmp	r4, #48	; 0x30
 80060d6:	d10a      	bne.n	80060ee <_strtol_l.isra.0+0x5e>
 80060d8:	f89e 4000 	ldrb.w	r4, [lr]
 80060dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80060e0:	2c58      	cmp	r4, #88	; 0x58
 80060e2:	d14d      	bne.n	8006180 <_strtol_l.isra.0+0xf0>
 80060e4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80060e8:	2310      	movs	r3, #16
 80060ea:	f10e 0e02 	add.w	lr, lr, #2
 80060ee:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80060f2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80060f6:	2600      	movs	r6, #0
 80060f8:	fbbc f9f3 	udiv	r9, ip, r3
 80060fc:	4635      	mov	r5, r6
 80060fe:	fb03 ca19 	mls	sl, r3, r9, ip
 8006102:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006106:	2f09      	cmp	r7, #9
 8006108:	d818      	bhi.n	800613c <_strtol_l.isra.0+0xac>
 800610a:	463c      	mov	r4, r7
 800610c:	42a3      	cmp	r3, r4
 800610e:	dd24      	ble.n	800615a <_strtol_l.isra.0+0xca>
 8006110:	2e00      	cmp	r6, #0
 8006112:	db1f      	blt.n	8006154 <_strtol_l.isra.0+0xc4>
 8006114:	45a9      	cmp	r9, r5
 8006116:	d31d      	bcc.n	8006154 <_strtol_l.isra.0+0xc4>
 8006118:	d101      	bne.n	800611e <_strtol_l.isra.0+0x8e>
 800611a:	45a2      	cmp	sl, r4
 800611c:	db1a      	blt.n	8006154 <_strtol_l.isra.0+0xc4>
 800611e:	fb05 4503 	mla	r5, r5, r3, r4
 8006122:	2601      	movs	r6, #1
 8006124:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006128:	e7eb      	b.n	8006102 <_strtol_l.isra.0+0x72>
 800612a:	2c2b      	cmp	r4, #43	; 0x2b
 800612c:	bf08      	it	eq
 800612e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006132:	46a8      	mov	r8, r5
 8006134:	bf08      	it	eq
 8006136:	f106 0e02 	addeq.w	lr, r6, #2
 800613a:	e7c7      	b.n	80060cc <_strtol_l.isra.0+0x3c>
 800613c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006140:	2f19      	cmp	r7, #25
 8006142:	d801      	bhi.n	8006148 <_strtol_l.isra.0+0xb8>
 8006144:	3c37      	subs	r4, #55	; 0x37
 8006146:	e7e1      	b.n	800610c <_strtol_l.isra.0+0x7c>
 8006148:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800614c:	2f19      	cmp	r7, #25
 800614e:	d804      	bhi.n	800615a <_strtol_l.isra.0+0xca>
 8006150:	3c57      	subs	r4, #87	; 0x57
 8006152:	e7db      	b.n	800610c <_strtol_l.isra.0+0x7c>
 8006154:	f04f 36ff 	mov.w	r6, #4294967295
 8006158:	e7e4      	b.n	8006124 <_strtol_l.isra.0+0x94>
 800615a:	2e00      	cmp	r6, #0
 800615c:	da05      	bge.n	800616a <_strtol_l.isra.0+0xda>
 800615e:	2322      	movs	r3, #34	; 0x22
 8006160:	6003      	str	r3, [r0, #0]
 8006162:	4665      	mov	r5, ip
 8006164:	b942      	cbnz	r2, 8006178 <_strtol_l.isra.0+0xe8>
 8006166:	4628      	mov	r0, r5
 8006168:	e79d      	b.n	80060a6 <_strtol_l.isra.0+0x16>
 800616a:	f1b8 0f00 	cmp.w	r8, #0
 800616e:	d000      	beq.n	8006172 <_strtol_l.isra.0+0xe2>
 8006170:	426d      	negs	r5, r5
 8006172:	2a00      	cmp	r2, #0
 8006174:	d0f7      	beq.n	8006166 <_strtol_l.isra.0+0xd6>
 8006176:	b10e      	cbz	r6, 800617c <_strtol_l.isra.0+0xec>
 8006178:	f10e 31ff 	add.w	r1, lr, #4294967295
 800617c:	6011      	str	r1, [r2, #0]
 800617e:	e7f2      	b.n	8006166 <_strtol_l.isra.0+0xd6>
 8006180:	2430      	movs	r4, #48	; 0x30
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1b3      	bne.n	80060ee <_strtol_l.isra.0+0x5e>
 8006186:	2308      	movs	r3, #8
 8006188:	e7b1      	b.n	80060ee <_strtol_l.isra.0+0x5e>
 800618a:	2c30      	cmp	r4, #48	; 0x30
 800618c:	d0a4      	beq.n	80060d8 <_strtol_l.isra.0+0x48>
 800618e:	230a      	movs	r3, #10
 8006190:	e7ad      	b.n	80060ee <_strtol_l.isra.0+0x5e>
 8006192:	bf00      	nop
 8006194:	08008f69 	.word	0x08008f69

08006198 <_strtol_r>:
 8006198:	f7ff bf7a 	b.w	8006090 <_strtol_l.isra.0>

0800619c <quorem>:
 800619c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a0:	6903      	ldr	r3, [r0, #16]
 80061a2:	690c      	ldr	r4, [r1, #16]
 80061a4:	42a3      	cmp	r3, r4
 80061a6:	4607      	mov	r7, r0
 80061a8:	f2c0 8081 	blt.w	80062ae <quorem+0x112>
 80061ac:	3c01      	subs	r4, #1
 80061ae:	f101 0814 	add.w	r8, r1, #20
 80061b2:	f100 0514 	add.w	r5, r0, #20
 80061b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061ba:	9301      	str	r3, [sp, #4]
 80061bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061c4:	3301      	adds	r3, #1
 80061c6:	429a      	cmp	r2, r3
 80061c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80061d4:	d331      	bcc.n	800623a <quorem+0x9e>
 80061d6:	f04f 0e00 	mov.w	lr, #0
 80061da:	4640      	mov	r0, r8
 80061dc:	46ac      	mov	ip, r5
 80061de:	46f2      	mov	sl, lr
 80061e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80061e4:	b293      	uxth	r3, r2
 80061e6:	fb06 e303 	mla	r3, r6, r3, lr
 80061ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	ebaa 0303 	sub.w	r3, sl, r3
 80061f4:	0c12      	lsrs	r2, r2, #16
 80061f6:	f8dc a000 	ldr.w	sl, [ip]
 80061fa:	fb06 e202 	mla	r2, r6, r2, lr
 80061fe:	fa13 f38a 	uxtah	r3, r3, sl
 8006202:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006206:	fa1f fa82 	uxth.w	sl, r2
 800620a:	f8dc 2000 	ldr.w	r2, [ip]
 800620e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006212:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006216:	b29b      	uxth	r3, r3
 8006218:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800621c:	4581      	cmp	r9, r0
 800621e:	f84c 3b04 	str.w	r3, [ip], #4
 8006222:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006226:	d2db      	bcs.n	80061e0 <quorem+0x44>
 8006228:	f855 300b 	ldr.w	r3, [r5, fp]
 800622c:	b92b      	cbnz	r3, 800623a <quorem+0x9e>
 800622e:	9b01      	ldr	r3, [sp, #4]
 8006230:	3b04      	subs	r3, #4
 8006232:	429d      	cmp	r5, r3
 8006234:	461a      	mov	r2, r3
 8006236:	d32e      	bcc.n	8006296 <quorem+0xfa>
 8006238:	613c      	str	r4, [r7, #16]
 800623a:	4638      	mov	r0, r7
 800623c:	f001 fc22 	bl	8007a84 <__mcmp>
 8006240:	2800      	cmp	r0, #0
 8006242:	db24      	blt.n	800628e <quorem+0xf2>
 8006244:	3601      	adds	r6, #1
 8006246:	4628      	mov	r0, r5
 8006248:	f04f 0c00 	mov.w	ip, #0
 800624c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006250:	f8d0 e000 	ldr.w	lr, [r0]
 8006254:	b293      	uxth	r3, r2
 8006256:	ebac 0303 	sub.w	r3, ip, r3
 800625a:	0c12      	lsrs	r2, r2, #16
 800625c:	fa13 f38e 	uxtah	r3, r3, lr
 8006260:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006264:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006268:	b29b      	uxth	r3, r3
 800626a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800626e:	45c1      	cmp	r9, r8
 8006270:	f840 3b04 	str.w	r3, [r0], #4
 8006274:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006278:	d2e8      	bcs.n	800624c <quorem+0xb0>
 800627a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800627e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006282:	b922      	cbnz	r2, 800628e <quorem+0xf2>
 8006284:	3b04      	subs	r3, #4
 8006286:	429d      	cmp	r5, r3
 8006288:	461a      	mov	r2, r3
 800628a:	d30a      	bcc.n	80062a2 <quorem+0x106>
 800628c:	613c      	str	r4, [r7, #16]
 800628e:	4630      	mov	r0, r6
 8006290:	b003      	add	sp, #12
 8006292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006296:	6812      	ldr	r2, [r2, #0]
 8006298:	3b04      	subs	r3, #4
 800629a:	2a00      	cmp	r2, #0
 800629c:	d1cc      	bne.n	8006238 <quorem+0x9c>
 800629e:	3c01      	subs	r4, #1
 80062a0:	e7c7      	b.n	8006232 <quorem+0x96>
 80062a2:	6812      	ldr	r2, [r2, #0]
 80062a4:	3b04      	subs	r3, #4
 80062a6:	2a00      	cmp	r2, #0
 80062a8:	d1f0      	bne.n	800628c <quorem+0xf0>
 80062aa:	3c01      	subs	r4, #1
 80062ac:	e7eb      	b.n	8006286 <quorem+0xea>
 80062ae:	2000      	movs	r0, #0
 80062b0:	e7ee      	b.n	8006290 <quorem+0xf4>
 80062b2:	0000      	movs	r0, r0
 80062b4:	0000      	movs	r0, r0
	...

080062b8 <_dtoa_r>:
 80062b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062bc:	ec59 8b10 	vmov	r8, r9, d0
 80062c0:	b095      	sub	sp, #84	; 0x54
 80062c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80062c4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80062c6:	9107      	str	r1, [sp, #28]
 80062c8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80062cc:	4606      	mov	r6, r0
 80062ce:	9209      	str	r2, [sp, #36]	; 0x24
 80062d0:	9310      	str	r3, [sp, #64]	; 0x40
 80062d2:	b975      	cbnz	r5, 80062f2 <_dtoa_r+0x3a>
 80062d4:	2010      	movs	r0, #16
 80062d6:	f001 f8e5 	bl	80074a4 <malloc>
 80062da:	4602      	mov	r2, r0
 80062dc:	6270      	str	r0, [r6, #36]	; 0x24
 80062de:	b920      	cbnz	r0, 80062ea <_dtoa_r+0x32>
 80062e0:	4bab      	ldr	r3, [pc, #684]	; (8006590 <_dtoa_r+0x2d8>)
 80062e2:	21ea      	movs	r1, #234	; 0xea
 80062e4:	48ab      	ldr	r0, [pc, #684]	; (8006594 <_dtoa_r+0x2dc>)
 80062e6:	f002 f80f 	bl	8008308 <__assert_func>
 80062ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062ee:	6005      	str	r5, [r0, #0]
 80062f0:	60c5      	str	r5, [r0, #12]
 80062f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80062f4:	6819      	ldr	r1, [r3, #0]
 80062f6:	b151      	cbz	r1, 800630e <_dtoa_r+0x56>
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	604a      	str	r2, [r1, #4]
 80062fc:	2301      	movs	r3, #1
 80062fe:	4093      	lsls	r3, r2
 8006300:	608b      	str	r3, [r1, #8]
 8006302:	4630      	mov	r0, r6
 8006304:	f001 f936 	bl	8007574 <_Bfree>
 8006308:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	f1b9 0300 	subs.w	r3, r9, #0
 8006312:	bfbb      	ittet	lt
 8006314:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006318:	9303      	strlt	r3, [sp, #12]
 800631a:	2300      	movge	r3, #0
 800631c:	2201      	movlt	r2, #1
 800631e:	bfac      	ite	ge
 8006320:	6023      	strge	r3, [r4, #0]
 8006322:	6022      	strlt	r2, [r4, #0]
 8006324:	4b9c      	ldr	r3, [pc, #624]	; (8006598 <_dtoa_r+0x2e0>)
 8006326:	9c03      	ldr	r4, [sp, #12]
 8006328:	43a3      	bics	r3, r4
 800632a:	d11a      	bne.n	8006362 <_dtoa_r+0xaa>
 800632c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800632e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006338:	ea53 0308 	orrs.w	r3, r3, r8
 800633c:	f000 8512 	beq.w	8006d64 <_dtoa_r+0xaac>
 8006340:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006342:	b953      	cbnz	r3, 800635a <_dtoa_r+0xa2>
 8006344:	4b95      	ldr	r3, [pc, #596]	; (800659c <_dtoa_r+0x2e4>)
 8006346:	e01f      	b.n	8006388 <_dtoa_r+0xd0>
 8006348:	4b95      	ldr	r3, [pc, #596]	; (80065a0 <_dtoa_r+0x2e8>)
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	3308      	adds	r3, #8
 800634e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	9800      	ldr	r0, [sp, #0]
 8006354:	b015      	add	sp, #84	; 0x54
 8006356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800635a:	4b90      	ldr	r3, [pc, #576]	; (800659c <_dtoa_r+0x2e4>)
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	3303      	adds	r3, #3
 8006360:	e7f5      	b.n	800634e <_dtoa_r+0x96>
 8006362:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006366:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800636a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800636e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006372:	d10b      	bne.n	800638c <_dtoa_r+0xd4>
 8006374:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006376:	2301      	movs	r3, #1
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 84ee 	beq.w	8006d5e <_dtoa_r+0xaa6>
 8006382:	4888      	ldr	r0, [pc, #544]	; (80065a4 <_dtoa_r+0x2ec>)
 8006384:	6018      	str	r0, [r3, #0]
 8006386:	1e43      	subs	r3, r0, #1
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	e7e2      	b.n	8006352 <_dtoa_r+0x9a>
 800638c:	a913      	add	r1, sp, #76	; 0x4c
 800638e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006392:	aa12      	add	r2, sp, #72	; 0x48
 8006394:	4630      	mov	r0, r6
 8006396:	f001 fc95 	bl	8007cc4 <__d2b>
 800639a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800639e:	4605      	mov	r5, r0
 80063a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80063a2:	2900      	cmp	r1, #0
 80063a4:	d047      	beq.n	8006436 <_dtoa_r+0x17e>
 80063a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80063a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80063ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063b0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80063b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80063b8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80063bc:	2400      	movs	r4, #0
 80063be:	ec43 2b16 	vmov	d6, r2, r3
 80063c2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80063c6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8006578 <_dtoa_r+0x2c0>
 80063ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80063ce:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8006580 <_dtoa_r+0x2c8>
 80063d2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80063d6:	eeb0 7b46 	vmov.f64	d7, d6
 80063da:	ee06 1a90 	vmov	s13, r1
 80063de:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80063e2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8006588 <_dtoa_r+0x2d0>
 80063e6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80063ea:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80063ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80063f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f6:	ee16 ba90 	vmov	fp, s13
 80063fa:	9411      	str	r4, [sp, #68]	; 0x44
 80063fc:	d508      	bpl.n	8006410 <_dtoa_r+0x158>
 80063fe:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006402:	eeb4 6b47 	vcmp.f64	d6, d7
 8006406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800640a:	bf18      	it	ne
 800640c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8006410:	f1bb 0f16 	cmp.w	fp, #22
 8006414:	d832      	bhi.n	800647c <_dtoa_r+0x1c4>
 8006416:	4b64      	ldr	r3, [pc, #400]	; (80065a8 <_dtoa_r+0x2f0>)
 8006418:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800641c:	ed93 7b00 	vldr	d7, [r3]
 8006420:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8006424:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800642c:	d501      	bpl.n	8006432 <_dtoa_r+0x17a>
 800642e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006432:	2300      	movs	r3, #0
 8006434:	e023      	b.n	800647e <_dtoa_r+0x1c6>
 8006436:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006438:	4401      	add	r1, r0
 800643a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800643e:	2b20      	cmp	r3, #32
 8006440:	bfc3      	ittte	gt
 8006442:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006446:	fa04 f303 	lslgt.w	r3, r4, r3
 800644a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800644e:	f1c3 0320 	rsble	r3, r3, #32
 8006452:	bfc6      	itte	gt
 8006454:	fa28 f804 	lsrgt.w	r8, r8, r4
 8006458:	ea43 0308 	orrgt.w	r3, r3, r8
 800645c:	fa08 f303 	lslle.w	r3, r8, r3
 8006460:	ee07 3a90 	vmov	s15, r3
 8006464:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006468:	3901      	subs	r1, #1
 800646a:	ed8d 7b00 	vstr	d7, [sp]
 800646e:	9c01      	ldr	r4, [sp, #4]
 8006470:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006474:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8006478:	2401      	movs	r4, #1
 800647a:	e7a0      	b.n	80063be <_dtoa_r+0x106>
 800647c:	2301      	movs	r3, #1
 800647e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006480:	1a43      	subs	r3, r0, r1
 8006482:	1e5a      	subs	r2, r3, #1
 8006484:	bf45      	ittet	mi
 8006486:	f1c3 0301 	rsbmi	r3, r3, #1
 800648a:	9305      	strmi	r3, [sp, #20]
 800648c:	2300      	movpl	r3, #0
 800648e:	2300      	movmi	r3, #0
 8006490:	9206      	str	r2, [sp, #24]
 8006492:	bf54      	ite	pl
 8006494:	9305      	strpl	r3, [sp, #20]
 8006496:	9306      	strmi	r3, [sp, #24]
 8006498:	f1bb 0f00 	cmp.w	fp, #0
 800649c:	db18      	blt.n	80064d0 <_dtoa_r+0x218>
 800649e:	9b06      	ldr	r3, [sp, #24]
 80064a0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80064a4:	445b      	add	r3, fp
 80064a6:	9306      	str	r3, [sp, #24]
 80064a8:	2300      	movs	r3, #0
 80064aa:	9a07      	ldr	r2, [sp, #28]
 80064ac:	2a09      	cmp	r2, #9
 80064ae:	d849      	bhi.n	8006544 <_dtoa_r+0x28c>
 80064b0:	2a05      	cmp	r2, #5
 80064b2:	bfc4      	itt	gt
 80064b4:	3a04      	subgt	r2, #4
 80064b6:	9207      	strgt	r2, [sp, #28]
 80064b8:	9a07      	ldr	r2, [sp, #28]
 80064ba:	f1a2 0202 	sub.w	r2, r2, #2
 80064be:	bfcc      	ite	gt
 80064c0:	2400      	movgt	r4, #0
 80064c2:	2401      	movle	r4, #1
 80064c4:	2a03      	cmp	r2, #3
 80064c6:	d848      	bhi.n	800655a <_dtoa_r+0x2a2>
 80064c8:	e8df f002 	tbb	[pc, r2]
 80064cc:	3a2c2e0b 	.word	0x3a2c2e0b
 80064d0:	9b05      	ldr	r3, [sp, #20]
 80064d2:	2200      	movs	r2, #0
 80064d4:	eba3 030b 	sub.w	r3, r3, fp
 80064d8:	9305      	str	r3, [sp, #20]
 80064da:	920e      	str	r2, [sp, #56]	; 0x38
 80064dc:	f1cb 0300 	rsb	r3, fp, #0
 80064e0:	e7e3      	b.n	80064aa <_dtoa_r+0x1f2>
 80064e2:	2200      	movs	r2, #0
 80064e4:	9208      	str	r2, [sp, #32]
 80064e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064e8:	2a00      	cmp	r2, #0
 80064ea:	dc39      	bgt.n	8006560 <_dtoa_r+0x2a8>
 80064ec:	f04f 0a01 	mov.w	sl, #1
 80064f0:	46d1      	mov	r9, sl
 80064f2:	4652      	mov	r2, sl
 80064f4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80064f8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80064fa:	2100      	movs	r1, #0
 80064fc:	6079      	str	r1, [r7, #4]
 80064fe:	2004      	movs	r0, #4
 8006500:	f100 0c14 	add.w	ip, r0, #20
 8006504:	4594      	cmp	ip, r2
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	d92f      	bls.n	800656a <_dtoa_r+0x2b2>
 800650a:	4630      	mov	r0, r6
 800650c:	930c      	str	r3, [sp, #48]	; 0x30
 800650e:	f000 fff1 	bl	80074f4 <_Balloc>
 8006512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006514:	9000      	str	r0, [sp, #0]
 8006516:	4602      	mov	r2, r0
 8006518:	2800      	cmp	r0, #0
 800651a:	d149      	bne.n	80065b0 <_dtoa_r+0x2f8>
 800651c:	4b23      	ldr	r3, [pc, #140]	; (80065ac <_dtoa_r+0x2f4>)
 800651e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006522:	e6df      	b.n	80062e4 <_dtoa_r+0x2c>
 8006524:	2201      	movs	r2, #1
 8006526:	e7dd      	b.n	80064e4 <_dtoa_r+0x22c>
 8006528:	2200      	movs	r2, #0
 800652a:	9208      	str	r2, [sp, #32]
 800652c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800652e:	eb0b 0a02 	add.w	sl, fp, r2
 8006532:	f10a 0901 	add.w	r9, sl, #1
 8006536:	464a      	mov	r2, r9
 8006538:	2a01      	cmp	r2, #1
 800653a:	bfb8      	it	lt
 800653c:	2201      	movlt	r2, #1
 800653e:	e7db      	b.n	80064f8 <_dtoa_r+0x240>
 8006540:	2201      	movs	r2, #1
 8006542:	e7f2      	b.n	800652a <_dtoa_r+0x272>
 8006544:	2401      	movs	r4, #1
 8006546:	2200      	movs	r2, #0
 8006548:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800654c:	f04f 3aff 	mov.w	sl, #4294967295
 8006550:	2100      	movs	r1, #0
 8006552:	46d1      	mov	r9, sl
 8006554:	2212      	movs	r2, #18
 8006556:	9109      	str	r1, [sp, #36]	; 0x24
 8006558:	e7ce      	b.n	80064f8 <_dtoa_r+0x240>
 800655a:	2201      	movs	r2, #1
 800655c:	9208      	str	r2, [sp, #32]
 800655e:	e7f5      	b.n	800654c <_dtoa_r+0x294>
 8006560:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8006564:	46d1      	mov	r9, sl
 8006566:	4652      	mov	r2, sl
 8006568:	e7c6      	b.n	80064f8 <_dtoa_r+0x240>
 800656a:	3101      	adds	r1, #1
 800656c:	6079      	str	r1, [r7, #4]
 800656e:	0040      	lsls	r0, r0, #1
 8006570:	e7c6      	b.n	8006500 <_dtoa_r+0x248>
 8006572:	bf00      	nop
 8006574:	f3af 8000 	nop.w
 8006578:	636f4361 	.word	0x636f4361
 800657c:	3fd287a7 	.word	0x3fd287a7
 8006580:	8b60c8b3 	.word	0x8b60c8b3
 8006584:	3fc68a28 	.word	0x3fc68a28
 8006588:	509f79fb 	.word	0x509f79fb
 800658c:	3fd34413 	.word	0x3fd34413
 8006590:	08009076 	.word	0x08009076
 8006594:	0800908d 	.word	0x0800908d
 8006598:	7ff00000 	.word	0x7ff00000
 800659c:	08009072 	.word	0x08009072
 80065a0:	08009069 	.word	0x08009069
 80065a4:	08008eed 	.word	0x08008eed
 80065a8:	08009208 	.word	0x08009208
 80065ac:	080090ec 	.word	0x080090ec
 80065b0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80065b2:	9900      	ldr	r1, [sp, #0]
 80065b4:	6011      	str	r1, [r2, #0]
 80065b6:	f1b9 0f0e 	cmp.w	r9, #14
 80065ba:	d872      	bhi.n	80066a2 <_dtoa_r+0x3ea>
 80065bc:	2c00      	cmp	r4, #0
 80065be:	d070      	beq.n	80066a2 <_dtoa_r+0x3ea>
 80065c0:	f1bb 0f00 	cmp.w	fp, #0
 80065c4:	f340 80a6 	ble.w	8006714 <_dtoa_r+0x45c>
 80065c8:	49ca      	ldr	r1, [pc, #808]	; (80068f4 <_dtoa_r+0x63c>)
 80065ca:	f00b 020f 	and.w	r2, fp, #15
 80065ce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80065d2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80065d6:	ed92 7b00 	vldr	d7, [r2]
 80065da:	ea4f 112b 	mov.w	r1, fp, asr #4
 80065de:	f000 808d 	beq.w	80066fc <_dtoa_r+0x444>
 80065e2:	4ac5      	ldr	r2, [pc, #788]	; (80068f8 <_dtoa_r+0x640>)
 80065e4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80065e8:	ed92 6b08 	vldr	d6, [r2, #32]
 80065ec:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80065f0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80065f4:	f001 010f 	and.w	r1, r1, #15
 80065f8:	2203      	movs	r2, #3
 80065fa:	48bf      	ldr	r0, [pc, #764]	; (80068f8 <_dtoa_r+0x640>)
 80065fc:	2900      	cmp	r1, #0
 80065fe:	d17f      	bne.n	8006700 <_dtoa_r+0x448>
 8006600:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006604:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006608:	ed8d 7b02 	vstr	d7, [sp, #8]
 800660c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800660e:	2900      	cmp	r1, #0
 8006610:	f000 80b2 	beq.w	8006778 <_dtoa_r+0x4c0>
 8006614:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006618:	ed9d 7b02 	vldr	d7, [sp, #8]
 800661c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006624:	f140 80a8 	bpl.w	8006778 <_dtoa_r+0x4c0>
 8006628:	f1b9 0f00 	cmp.w	r9, #0
 800662c:	f000 80a4 	beq.w	8006778 <_dtoa_r+0x4c0>
 8006630:	f1ba 0f00 	cmp.w	sl, #0
 8006634:	dd31      	ble.n	800669a <_dtoa_r+0x3e2>
 8006636:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800663a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800663e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006642:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006646:	3201      	adds	r2, #1
 8006648:	4650      	mov	r0, sl
 800664a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800664e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006652:	ee07 2a90 	vmov	s15, r2
 8006656:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800665a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800665e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8006662:	9c03      	ldr	r4, [sp, #12]
 8006664:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006668:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800666c:	2800      	cmp	r0, #0
 800666e:	f040 8086 	bne.w	800677e <_dtoa_r+0x4c6>
 8006672:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006676:	ee36 6b47 	vsub.f64	d6, d6, d7
 800667a:	ec42 1b17 	vmov	d7, r1, r2
 800667e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006686:	f300 8272 	bgt.w	8006b6e <_dtoa_r+0x8b6>
 800668a:	eeb1 7b47 	vneg.f64	d7, d7
 800668e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006696:	f100 8267 	bmi.w	8006b68 <_dtoa_r+0x8b0>
 800669a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800669e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80066a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80066a4:	2a00      	cmp	r2, #0
 80066a6:	f2c0 8129 	blt.w	80068fc <_dtoa_r+0x644>
 80066aa:	f1bb 0f0e 	cmp.w	fp, #14
 80066ae:	f300 8125 	bgt.w	80068fc <_dtoa_r+0x644>
 80066b2:	4b90      	ldr	r3, [pc, #576]	; (80068f4 <_dtoa_r+0x63c>)
 80066b4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80066b8:	ed93 6b00 	vldr	d6, [r3]
 80066bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f280 80c3 	bge.w	800684a <_dtoa_r+0x592>
 80066c4:	f1b9 0f00 	cmp.w	r9, #0
 80066c8:	f300 80bf 	bgt.w	800684a <_dtoa_r+0x592>
 80066cc:	f040 824c 	bne.w	8006b68 <_dtoa_r+0x8b0>
 80066d0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80066d4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80066d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80066e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e4:	464c      	mov	r4, r9
 80066e6:	464f      	mov	r7, r9
 80066e8:	f280 8222 	bge.w	8006b30 <_dtoa_r+0x878>
 80066ec:	f8dd 8000 	ldr.w	r8, [sp]
 80066f0:	2331      	movs	r3, #49	; 0x31
 80066f2:	f808 3b01 	strb.w	r3, [r8], #1
 80066f6:	f10b 0b01 	add.w	fp, fp, #1
 80066fa:	e21e      	b.n	8006b3a <_dtoa_r+0x882>
 80066fc:	2202      	movs	r2, #2
 80066fe:	e77c      	b.n	80065fa <_dtoa_r+0x342>
 8006700:	07cc      	lsls	r4, r1, #31
 8006702:	d504      	bpl.n	800670e <_dtoa_r+0x456>
 8006704:	ed90 6b00 	vldr	d6, [r0]
 8006708:	3201      	adds	r2, #1
 800670a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800670e:	1049      	asrs	r1, r1, #1
 8006710:	3008      	adds	r0, #8
 8006712:	e773      	b.n	80065fc <_dtoa_r+0x344>
 8006714:	d02e      	beq.n	8006774 <_dtoa_r+0x4bc>
 8006716:	f1cb 0100 	rsb	r1, fp, #0
 800671a:	4a76      	ldr	r2, [pc, #472]	; (80068f4 <_dtoa_r+0x63c>)
 800671c:	f001 000f 	and.w	r0, r1, #15
 8006720:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006724:	ed92 7b00 	vldr	d7, [r2]
 8006728:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800672c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006730:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006734:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8006738:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800673c:	486e      	ldr	r0, [pc, #440]	; (80068f8 <_dtoa_r+0x640>)
 800673e:	1109      	asrs	r1, r1, #4
 8006740:	2400      	movs	r4, #0
 8006742:	2202      	movs	r2, #2
 8006744:	b939      	cbnz	r1, 8006756 <_dtoa_r+0x49e>
 8006746:	2c00      	cmp	r4, #0
 8006748:	f43f af60 	beq.w	800660c <_dtoa_r+0x354>
 800674c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006754:	e75a      	b.n	800660c <_dtoa_r+0x354>
 8006756:	07cf      	lsls	r7, r1, #31
 8006758:	d509      	bpl.n	800676e <_dtoa_r+0x4b6>
 800675a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800675e:	ed90 7b00 	vldr	d7, [r0]
 8006762:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006766:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800676a:	3201      	adds	r2, #1
 800676c:	2401      	movs	r4, #1
 800676e:	1049      	asrs	r1, r1, #1
 8006770:	3008      	adds	r0, #8
 8006772:	e7e7      	b.n	8006744 <_dtoa_r+0x48c>
 8006774:	2202      	movs	r2, #2
 8006776:	e749      	b.n	800660c <_dtoa_r+0x354>
 8006778:	465f      	mov	r7, fp
 800677a:	4648      	mov	r0, r9
 800677c:	e765      	b.n	800664a <_dtoa_r+0x392>
 800677e:	ec42 1b17 	vmov	d7, r1, r2
 8006782:	4a5c      	ldr	r2, [pc, #368]	; (80068f4 <_dtoa_r+0x63c>)
 8006784:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006788:	ed12 4b02 	vldr	d4, [r2, #-8]
 800678c:	9a00      	ldr	r2, [sp, #0]
 800678e:	1814      	adds	r4, r2, r0
 8006790:	9a08      	ldr	r2, [sp, #32]
 8006792:	b352      	cbz	r2, 80067ea <_dtoa_r+0x532>
 8006794:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006798:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800679c:	f8dd 8000 	ldr.w	r8, [sp]
 80067a0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80067a4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80067a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80067ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80067b0:	ee14 2a90 	vmov	r2, s9
 80067b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80067b8:	3230      	adds	r2, #48	; 0x30
 80067ba:	ee36 6b45 	vsub.f64	d6, d6, d5
 80067be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80067c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067c6:	f808 2b01 	strb.w	r2, [r8], #1
 80067ca:	d439      	bmi.n	8006840 <_dtoa_r+0x588>
 80067cc:	ee32 5b46 	vsub.f64	d5, d2, d6
 80067d0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80067d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d8:	d472      	bmi.n	80068c0 <_dtoa_r+0x608>
 80067da:	45a0      	cmp	r8, r4
 80067dc:	f43f af5d 	beq.w	800669a <_dtoa_r+0x3e2>
 80067e0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80067e4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80067e8:	e7e0      	b.n	80067ac <_dtoa_r+0x4f4>
 80067ea:	f8dd 8000 	ldr.w	r8, [sp]
 80067ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 80067f2:	4621      	mov	r1, r4
 80067f4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80067f8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80067fc:	ee14 2a90 	vmov	r2, s9
 8006800:	3230      	adds	r2, #48	; 0x30
 8006802:	f808 2b01 	strb.w	r2, [r8], #1
 8006806:	45a0      	cmp	r8, r4
 8006808:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800680c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006810:	d118      	bne.n	8006844 <_dtoa_r+0x58c>
 8006812:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006816:	ee37 4b05 	vadd.f64	d4, d7, d5
 800681a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800681e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006822:	dc4d      	bgt.n	80068c0 <_dtoa_r+0x608>
 8006824:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006828:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800682c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006830:	f57f af33 	bpl.w	800669a <_dtoa_r+0x3e2>
 8006834:	4688      	mov	r8, r1
 8006836:	3901      	subs	r1, #1
 8006838:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800683c:	2b30      	cmp	r3, #48	; 0x30
 800683e:	d0f9      	beq.n	8006834 <_dtoa_r+0x57c>
 8006840:	46bb      	mov	fp, r7
 8006842:	e02a      	b.n	800689a <_dtoa_r+0x5e2>
 8006844:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006848:	e7d6      	b.n	80067f8 <_dtoa_r+0x540>
 800684a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800684e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006852:	f8dd 8000 	ldr.w	r8, [sp]
 8006856:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800685a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800685e:	ee15 3a10 	vmov	r3, s10
 8006862:	3330      	adds	r3, #48	; 0x30
 8006864:	f808 3b01 	strb.w	r3, [r8], #1
 8006868:	9b00      	ldr	r3, [sp, #0]
 800686a:	eba8 0303 	sub.w	r3, r8, r3
 800686e:	4599      	cmp	r9, r3
 8006870:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006874:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006878:	d133      	bne.n	80068e2 <_dtoa_r+0x62a>
 800687a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800687e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006886:	dc1a      	bgt.n	80068be <_dtoa_r+0x606>
 8006888:	eeb4 7b46 	vcmp.f64	d7, d6
 800688c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006890:	d103      	bne.n	800689a <_dtoa_r+0x5e2>
 8006892:	ee15 3a10 	vmov	r3, s10
 8006896:	07d9      	lsls	r1, r3, #31
 8006898:	d411      	bmi.n	80068be <_dtoa_r+0x606>
 800689a:	4629      	mov	r1, r5
 800689c:	4630      	mov	r0, r6
 800689e:	f000 fe69 	bl	8007574 <_Bfree>
 80068a2:	2300      	movs	r3, #0
 80068a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068a6:	f888 3000 	strb.w	r3, [r8]
 80068aa:	f10b 0301 	add.w	r3, fp, #1
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f43f ad4d 	beq.w	8006352 <_dtoa_r+0x9a>
 80068b8:	f8c3 8000 	str.w	r8, [r3]
 80068bc:	e549      	b.n	8006352 <_dtoa_r+0x9a>
 80068be:	465f      	mov	r7, fp
 80068c0:	4643      	mov	r3, r8
 80068c2:	4698      	mov	r8, r3
 80068c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068c8:	2a39      	cmp	r2, #57	; 0x39
 80068ca:	d106      	bne.n	80068da <_dtoa_r+0x622>
 80068cc:	9a00      	ldr	r2, [sp, #0]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d1f7      	bne.n	80068c2 <_dtoa_r+0x60a>
 80068d2:	9900      	ldr	r1, [sp, #0]
 80068d4:	2230      	movs	r2, #48	; 0x30
 80068d6:	3701      	adds	r7, #1
 80068d8:	700a      	strb	r2, [r1, #0]
 80068da:	781a      	ldrb	r2, [r3, #0]
 80068dc:	3201      	adds	r2, #1
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	e7ae      	b.n	8006840 <_dtoa_r+0x588>
 80068e2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80068e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80068ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ee:	d1b2      	bne.n	8006856 <_dtoa_r+0x59e>
 80068f0:	e7d3      	b.n	800689a <_dtoa_r+0x5e2>
 80068f2:	bf00      	nop
 80068f4:	08009208 	.word	0x08009208
 80068f8:	080091e0 	.word	0x080091e0
 80068fc:	9908      	ldr	r1, [sp, #32]
 80068fe:	2900      	cmp	r1, #0
 8006900:	f000 80d1 	beq.w	8006aa6 <_dtoa_r+0x7ee>
 8006904:	9907      	ldr	r1, [sp, #28]
 8006906:	2901      	cmp	r1, #1
 8006908:	f300 80b4 	bgt.w	8006a74 <_dtoa_r+0x7bc>
 800690c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800690e:	2900      	cmp	r1, #0
 8006910:	f000 80ac 	beq.w	8006a6c <_dtoa_r+0x7b4>
 8006914:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006918:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800691c:	461c      	mov	r4, r3
 800691e:	930a      	str	r3, [sp, #40]	; 0x28
 8006920:	9b05      	ldr	r3, [sp, #20]
 8006922:	4413      	add	r3, r2
 8006924:	9305      	str	r3, [sp, #20]
 8006926:	9b06      	ldr	r3, [sp, #24]
 8006928:	2101      	movs	r1, #1
 800692a:	4413      	add	r3, r2
 800692c:	4630      	mov	r0, r6
 800692e:	9306      	str	r3, [sp, #24]
 8006930:	f000 ff26 	bl	8007780 <__i2b>
 8006934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006936:	4607      	mov	r7, r0
 8006938:	f1b8 0f00 	cmp.w	r8, #0
 800693c:	dd0d      	ble.n	800695a <_dtoa_r+0x6a2>
 800693e:	9a06      	ldr	r2, [sp, #24]
 8006940:	2a00      	cmp	r2, #0
 8006942:	dd0a      	ble.n	800695a <_dtoa_r+0x6a2>
 8006944:	4542      	cmp	r2, r8
 8006946:	9905      	ldr	r1, [sp, #20]
 8006948:	bfa8      	it	ge
 800694a:	4642      	movge	r2, r8
 800694c:	1a89      	subs	r1, r1, r2
 800694e:	9105      	str	r1, [sp, #20]
 8006950:	9906      	ldr	r1, [sp, #24]
 8006952:	eba8 0802 	sub.w	r8, r8, r2
 8006956:	1a8a      	subs	r2, r1, r2
 8006958:	9206      	str	r2, [sp, #24]
 800695a:	b303      	cbz	r3, 800699e <_dtoa_r+0x6e6>
 800695c:	9a08      	ldr	r2, [sp, #32]
 800695e:	2a00      	cmp	r2, #0
 8006960:	f000 80a6 	beq.w	8006ab0 <_dtoa_r+0x7f8>
 8006964:	2c00      	cmp	r4, #0
 8006966:	dd13      	ble.n	8006990 <_dtoa_r+0x6d8>
 8006968:	4639      	mov	r1, r7
 800696a:	4622      	mov	r2, r4
 800696c:	4630      	mov	r0, r6
 800696e:	930c      	str	r3, [sp, #48]	; 0x30
 8006970:	f000 ffc2 	bl	80078f8 <__pow5mult>
 8006974:	462a      	mov	r2, r5
 8006976:	4601      	mov	r1, r0
 8006978:	4607      	mov	r7, r0
 800697a:	4630      	mov	r0, r6
 800697c:	f000 ff16 	bl	80077ac <__multiply>
 8006980:	4629      	mov	r1, r5
 8006982:	900a      	str	r0, [sp, #40]	; 0x28
 8006984:	4630      	mov	r0, r6
 8006986:	f000 fdf5 	bl	8007574 <_Bfree>
 800698a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800698c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800698e:	4615      	mov	r5, r2
 8006990:	1b1a      	subs	r2, r3, r4
 8006992:	d004      	beq.n	800699e <_dtoa_r+0x6e6>
 8006994:	4629      	mov	r1, r5
 8006996:	4630      	mov	r0, r6
 8006998:	f000 ffae 	bl	80078f8 <__pow5mult>
 800699c:	4605      	mov	r5, r0
 800699e:	2101      	movs	r1, #1
 80069a0:	4630      	mov	r0, r6
 80069a2:	f000 feed 	bl	8007780 <__i2b>
 80069a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	4604      	mov	r4, r0
 80069ac:	f340 8082 	ble.w	8006ab4 <_dtoa_r+0x7fc>
 80069b0:	461a      	mov	r2, r3
 80069b2:	4601      	mov	r1, r0
 80069b4:	4630      	mov	r0, r6
 80069b6:	f000 ff9f 	bl	80078f8 <__pow5mult>
 80069ba:	9b07      	ldr	r3, [sp, #28]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	4604      	mov	r4, r0
 80069c0:	dd7b      	ble.n	8006aba <_dtoa_r+0x802>
 80069c2:	2300      	movs	r3, #0
 80069c4:	930a      	str	r3, [sp, #40]	; 0x28
 80069c6:	6922      	ldr	r2, [r4, #16]
 80069c8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80069cc:	6910      	ldr	r0, [r2, #16]
 80069ce:	f000 fe87 	bl	80076e0 <__hi0bits>
 80069d2:	f1c0 0020 	rsb	r0, r0, #32
 80069d6:	9b06      	ldr	r3, [sp, #24]
 80069d8:	4418      	add	r0, r3
 80069da:	f010 001f 	ands.w	r0, r0, #31
 80069de:	f000 808d 	beq.w	8006afc <_dtoa_r+0x844>
 80069e2:	f1c0 0220 	rsb	r2, r0, #32
 80069e6:	2a04      	cmp	r2, #4
 80069e8:	f340 8086 	ble.w	8006af8 <_dtoa_r+0x840>
 80069ec:	f1c0 001c 	rsb	r0, r0, #28
 80069f0:	9b05      	ldr	r3, [sp, #20]
 80069f2:	4403      	add	r3, r0
 80069f4:	9305      	str	r3, [sp, #20]
 80069f6:	9b06      	ldr	r3, [sp, #24]
 80069f8:	4403      	add	r3, r0
 80069fa:	4480      	add	r8, r0
 80069fc:	9306      	str	r3, [sp, #24]
 80069fe:	9b05      	ldr	r3, [sp, #20]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	dd05      	ble.n	8006a10 <_dtoa_r+0x758>
 8006a04:	4629      	mov	r1, r5
 8006a06:	461a      	mov	r2, r3
 8006a08:	4630      	mov	r0, r6
 8006a0a:	f000 ffcf 	bl	80079ac <__lshift>
 8006a0e:	4605      	mov	r5, r0
 8006a10:	9b06      	ldr	r3, [sp, #24]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	dd05      	ble.n	8006a22 <_dtoa_r+0x76a>
 8006a16:	4621      	mov	r1, r4
 8006a18:	461a      	mov	r2, r3
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	f000 ffc6 	bl	80079ac <__lshift>
 8006a20:	4604      	mov	r4, r0
 8006a22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d06b      	beq.n	8006b00 <_dtoa_r+0x848>
 8006a28:	4621      	mov	r1, r4
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f001 f82a 	bl	8007a84 <__mcmp>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	da65      	bge.n	8006b00 <_dtoa_r+0x848>
 8006a34:	2300      	movs	r3, #0
 8006a36:	4629      	mov	r1, r5
 8006a38:	220a      	movs	r2, #10
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	f000 fdbc 	bl	80075b8 <__multadd>
 8006a40:	9b08      	ldr	r3, [sp, #32]
 8006a42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a46:	4605      	mov	r5, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8192 	beq.w	8006d72 <_dtoa_r+0xaba>
 8006a4e:	4639      	mov	r1, r7
 8006a50:	2300      	movs	r3, #0
 8006a52:	220a      	movs	r2, #10
 8006a54:	4630      	mov	r0, r6
 8006a56:	f000 fdaf 	bl	80075b8 <__multadd>
 8006a5a:	f1ba 0f00 	cmp.w	sl, #0
 8006a5e:	4607      	mov	r7, r0
 8006a60:	f300 808e 	bgt.w	8006b80 <_dtoa_r+0x8c8>
 8006a64:	9b07      	ldr	r3, [sp, #28]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	dc51      	bgt.n	8006b0e <_dtoa_r+0x856>
 8006a6a:	e089      	b.n	8006b80 <_dtoa_r+0x8c8>
 8006a6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a6e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006a72:	e751      	b.n	8006918 <_dtoa_r+0x660>
 8006a74:	f109 34ff 	add.w	r4, r9, #4294967295
 8006a78:	42a3      	cmp	r3, r4
 8006a7a:	bfbf      	itttt	lt
 8006a7c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006a7e:	1ae3      	sublt	r3, r4, r3
 8006a80:	18d2      	addlt	r2, r2, r3
 8006a82:	4613      	movlt	r3, r2
 8006a84:	bfb7      	itett	lt
 8006a86:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006a88:	1b1c      	subge	r4, r3, r4
 8006a8a:	4623      	movlt	r3, r4
 8006a8c:	2400      	movlt	r4, #0
 8006a8e:	f1b9 0f00 	cmp.w	r9, #0
 8006a92:	bfb5      	itete	lt
 8006a94:	9a05      	ldrlt	r2, [sp, #20]
 8006a96:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8006a9a:	eba2 0809 	sublt.w	r8, r2, r9
 8006a9e:	464a      	movge	r2, r9
 8006aa0:	bfb8      	it	lt
 8006aa2:	2200      	movlt	r2, #0
 8006aa4:	e73b      	b.n	800691e <_dtoa_r+0x666>
 8006aa6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8006aaa:	9f08      	ldr	r7, [sp, #32]
 8006aac:	461c      	mov	r4, r3
 8006aae:	e743      	b.n	8006938 <_dtoa_r+0x680>
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	e76f      	b.n	8006994 <_dtoa_r+0x6dc>
 8006ab4:	9b07      	ldr	r3, [sp, #28]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	dc18      	bgt.n	8006aec <_dtoa_r+0x834>
 8006aba:	9b02      	ldr	r3, [sp, #8]
 8006abc:	b9b3      	cbnz	r3, 8006aec <_dtoa_r+0x834>
 8006abe:	9b03      	ldr	r3, [sp, #12]
 8006ac0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006ac4:	b9a2      	cbnz	r2, 8006af0 <_dtoa_r+0x838>
 8006ac6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006aca:	0d12      	lsrs	r2, r2, #20
 8006acc:	0512      	lsls	r2, r2, #20
 8006ace:	b18a      	cbz	r2, 8006af4 <_dtoa_r+0x83c>
 8006ad0:	9b05      	ldr	r3, [sp, #20]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	9305      	str	r3, [sp, #20]
 8006ad6:	9b06      	ldr	r3, [sp, #24]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	9306      	str	r3, [sp, #24]
 8006adc:	2301      	movs	r3, #1
 8006ade:	930a      	str	r3, [sp, #40]	; 0x28
 8006ae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f47f af6f 	bne.w	80069c6 <_dtoa_r+0x70e>
 8006ae8:	2001      	movs	r0, #1
 8006aea:	e774      	b.n	80069d6 <_dtoa_r+0x71e>
 8006aec:	2300      	movs	r3, #0
 8006aee:	e7f6      	b.n	8006ade <_dtoa_r+0x826>
 8006af0:	9b02      	ldr	r3, [sp, #8]
 8006af2:	e7f4      	b.n	8006ade <_dtoa_r+0x826>
 8006af4:	920a      	str	r2, [sp, #40]	; 0x28
 8006af6:	e7f3      	b.n	8006ae0 <_dtoa_r+0x828>
 8006af8:	d081      	beq.n	80069fe <_dtoa_r+0x746>
 8006afa:	4610      	mov	r0, r2
 8006afc:	301c      	adds	r0, #28
 8006afe:	e777      	b.n	80069f0 <_dtoa_r+0x738>
 8006b00:	f1b9 0f00 	cmp.w	r9, #0
 8006b04:	dc37      	bgt.n	8006b76 <_dtoa_r+0x8be>
 8006b06:	9b07      	ldr	r3, [sp, #28]
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	dd34      	ble.n	8006b76 <_dtoa_r+0x8be>
 8006b0c:	46ca      	mov	sl, r9
 8006b0e:	f1ba 0f00 	cmp.w	sl, #0
 8006b12:	d10d      	bne.n	8006b30 <_dtoa_r+0x878>
 8006b14:	4621      	mov	r1, r4
 8006b16:	4653      	mov	r3, sl
 8006b18:	2205      	movs	r2, #5
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f000 fd4c 	bl	80075b8 <__multadd>
 8006b20:	4601      	mov	r1, r0
 8006b22:	4604      	mov	r4, r0
 8006b24:	4628      	mov	r0, r5
 8006b26:	f000 ffad 	bl	8007a84 <__mcmp>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	f73f adde 	bgt.w	80066ec <_dtoa_r+0x434>
 8006b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b32:	f8dd 8000 	ldr.w	r8, [sp]
 8006b36:	ea6f 0b03 	mvn.w	fp, r3
 8006b3a:	f04f 0900 	mov.w	r9, #0
 8006b3e:	4621      	mov	r1, r4
 8006b40:	4630      	mov	r0, r6
 8006b42:	f000 fd17 	bl	8007574 <_Bfree>
 8006b46:	2f00      	cmp	r7, #0
 8006b48:	f43f aea7 	beq.w	800689a <_dtoa_r+0x5e2>
 8006b4c:	f1b9 0f00 	cmp.w	r9, #0
 8006b50:	d005      	beq.n	8006b5e <_dtoa_r+0x8a6>
 8006b52:	45b9      	cmp	r9, r7
 8006b54:	d003      	beq.n	8006b5e <_dtoa_r+0x8a6>
 8006b56:	4649      	mov	r1, r9
 8006b58:	4630      	mov	r0, r6
 8006b5a:	f000 fd0b 	bl	8007574 <_Bfree>
 8006b5e:	4639      	mov	r1, r7
 8006b60:	4630      	mov	r0, r6
 8006b62:	f000 fd07 	bl	8007574 <_Bfree>
 8006b66:	e698      	b.n	800689a <_dtoa_r+0x5e2>
 8006b68:	2400      	movs	r4, #0
 8006b6a:	4627      	mov	r7, r4
 8006b6c:	e7e0      	b.n	8006b30 <_dtoa_r+0x878>
 8006b6e:	46bb      	mov	fp, r7
 8006b70:	4604      	mov	r4, r0
 8006b72:	4607      	mov	r7, r0
 8006b74:	e5ba      	b.n	80066ec <_dtoa_r+0x434>
 8006b76:	9b08      	ldr	r3, [sp, #32]
 8006b78:	46ca      	mov	sl, r9
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 8100 	beq.w	8006d80 <_dtoa_r+0xac8>
 8006b80:	f1b8 0f00 	cmp.w	r8, #0
 8006b84:	dd05      	ble.n	8006b92 <_dtoa_r+0x8da>
 8006b86:	4639      	mov	r1, r7
 8006b88:	4642      	mov	r2, r8
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f000 ff0e 	bl	80079ac <__lshift>
 8006b90:	4607      	mov	r7, r0
 8006b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d05d      	beq.n	8006c54 <_dtoa_r+0x99c>
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f000 fcaa 	bl	80074f4 <_Balloc>
 8006ba0:	4680      	mov	r8, r0
 8006ba2:	b928      	cbnz	r0, 8006bb0 <_dtoa_r+0x8f8>
 8006ba4:	4b82      	ldr	r3, [pc, #520]	; (8006db0 <_dtoa_r+0xaf8>)
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006bac:	f7ff bb9a 	b.w	80062e4 <_dtoa_r+0x2c>
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	3202      	adds	r2, #2
 8006bb4:	0092      	lsls	r2, r2, #2
 8006bb6:	f107 010c 	add.w	r1, r7, #12
 8006bba:	300c      	adds	r0, #12
 8006bbc:	f000 fc8c 	bl	80074d8 <memcpy>
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	4641      	mov	r1, r8
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	f000 fef1 	bl	80079ac <__lshift>
 8006bca:	9b00      	ldr	r3, [sp, #0]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	9305      	str	r3, [sp, #20]
 8006bd0:	9b00      	ldr	r3, [sp, #0]
 8006bd2:	4453      	add	r3, sl
 8006bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8006bd6:	9b02      	ldr	r3, [sp, #8]
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	46b9      	mov	r9, r7
 8006bde:	9308      	str	r3, [sp, #32]
 8006be0:	4607      	mov	r7, r0
 8006be2:	9b05      	ldr	r3, [sp, #20]
 8006be4:	4621      	mov	r1, r4
 8006be6:	3b01      	subs	r3, #1
 8006be8:	4628      	mov	r0, r5
 8006bea:	9302      	str	r3, [sp, #8]
 8006bec:	f7ff fad6 	bl	800619c <quorem>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	3330      	adds	r3, #48	; 0x30
 8006bf4:	9006      	str	r0, [sp, #24]
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	930a      	str	r3, [sp, #40]	; 0x28
 8006bfc:	f000 ff42 	bl	8007a84 <__mcmp>
 8006c00:	463a      	mov	r2, r7
 8006c02:	4682      	mov	sl, r0
 8006c04:	4621      	mov	r1, r4
 8006c06:	4630      	mov	r0, r6
 8006c08:	f000 ff58 	bl	8007abc <__mdiff>
 8006c0c:	68c2      	ldr	r2, [r0, #12]
 8006c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c10:	4680      	mov	r8, r0
 8006c12:	bb0a      	cbnz	r2, 8006c58 <_dtoa_r+0x9a0>
 8006c14:	4601      	mov	r1, r0
 8006c16:	4628      	mov	r0, r5
 8006c18:	f000 ff34 	bl	8007a84 <__mcmp>
 8006c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c1e:	4602      	mov	r2, r0
 8006c20:	4641      	mov	r1, r8
 8006c22:	4630      	mov	r0, r6
 8006c24:	920e      	str	r2, [sp, #56]	; 0x38
 8006c26:	930a      	str	r3, [sp, #40]	; 0x28
 8006c28:	f000 fca4 	bl	8007574 <_Bfree>
 8006c2c:	9b07      	ldr	r3, [sp, #28]
 8006c2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c30:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8006c34:	ea43 0102 	orr.w	r1, r3, r2
 8006c38:	9b08      	ldr	r3, [sp, #32]
 8006c3a:	430b      	orrs	r3, r1
 8006c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c3e:	d10d      	bne.n	8006c5c <_dtoa_r+0x9a4>
 8006c40:	2b39      	cmp	r3, #57	; 0x39
 8006c42:	d029      	beq.n	8006c98 <_dtoa_r+0x9e0>
 8006c44:	f1ba 0f00 	cmp.w	sl, #0
 8006c48:	dd01      	ble.n	8006c4e <_dtoa_r+0x996>
 8006c4a:	9b06      	ldr	r3, [sp, #24]
 8006c4c:	3331      	adds	r3, #49	; 0x31
 8006c4e:	9a02      	ldr	r2, [sp, #8]
 8006c50:	7013      	strb	r3, [r2, #0]
 8006c52:	e774      	b.n	8006b3e <_dtoa_r+0x886>
 8006c54:	4638      	mov	r0, r7
 8006c56:	e7b8      	b.n	8006bca <_dtoa_r+0x912>
 8006c58:	2201      	movs	r2, #1
 8006c5a:	e7e1      	b.n	8006c20 <_dtoa_r+0x968>
 8006c5c:	f1ba 0f00 	cmp.w	sl, #0
 8006c60:	db06      	blt.n	8006c70 <_dtoa_r+0x9b8>
 8006c62:	9907      	ldr	r1, [sp, #28]
 8006c64:	ea41 0a0a 	orr.w	sl, r1, sl
 8006c68:	9908      	ldr	r1, [sp, #32]
 8006c6a:	ea5a 0101 	orrs.w	r1, sl, r1
 8006c6e:	d120      	bne.n	8006cb2 <_dtoa_r+0x9fa>
 8006c70:	2a00      	cmp	r2, #0
 8006c72:	ddec      	ble.n	8006c4e <_dtoa_r+0x996>
 8006c74:	4629      	mov	r1, r5
 8006c76:	2201      	movs	r2, #1
 8006c78:	4630      	mov	r0, r6
 8006c7a:	9305      	str	r3, [sp, #20]
 8006c7c:	f000 fe96 	bl	80079ac <__lshift>
 8006c80:	4621      	mov	r1, r4
 8006c82:	4605      	mov	r5, r0
 8006c84:	f000 fefe 	bl	8007a84 <__mcmp>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	9b05      	ldr	r3, [sp, #20]
 8006c8c:	dc02      	bgt.n	8006c94 <_dtoa_r+0x9dc>
 8006c8e:	d1de      	bne.n	8006c4e <_dtoa_r+0x996>
 8006c90:	07da      	lsls	r2, r3, #31
 8006c92:	d5dc      	bpl.n	8006c4e <_dtoa_r+0x996>
 8006c94:	2b39      	cmp	r3, #57	; 0x39
 8006c96:	d1d8      	bne.n	8006c4a <_dtoa_r+0x992>
 8006c98:	9a02      	ldr	r2, [sp, #8]
 8006c9a:	2339      	movs	r3, #57	; 0x39
 8006c9c:	7013      	strb	r3, [r2, #0]
 8006c9e:	4643      	mov	r3, r8
 8006ca0:	4698      	mov	r8, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8006ca8:	2a39      	cmp	r2, #57	; 0x39
 8006caa:	d051      	beq.n	8006d50 <_dtoa_r+0xa98>
 8006cac:	3201      	adds	r2, #1
 8006cae:	701a      	strb	r2, [r3, #0]
 8006cb0:	e745      	b.n	8006b3e <_dtoa_r+0x886>
 8006cb2:	2a00      	cmp	r2, #0
 8006cb4:	dd03      	ble.n	8006cbe <_dtoa_r+0xa06>
 8006cb6:	2b39      	cmp	r3, #57	; 0x39
 8006cb8:	d0ee      	beq.n	8006c98 <_dtoa_r+0x9e0>
 8006cba:	3301      	adds	r3, #1
 8006cbc:	e7c7      	b.n	8006c4e <_dtoa_r+0x996>
 8006cbe:	9a05      	ldr	r2, [sp, #20]
 8006cc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cc2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006cc6:	428a      	cmp	r2, r1
 8006cc8:	d02b      	beq.n	8006d22 <_dtoa_r+0xa6a>
 8006cca:	4629      	mov	r1, r5
 8006ccc:	2300      	movs	r3, #0
 8006cce:	220a      	movs	r2, #10
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f000 fc71 	bl	80075b8 <__multadd>
 8006cd6:	45b9      	cmp	r9, r7
 8006cd8:	4605      	mov	r5, r0
 8006cda:	f04f 0300 	mov.w	r3, #0
 8006cde:	f04f 020a 	mov.w	r2, #10
 8006ce2:	4649      	mov	r1, r9
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	d107      	bne.n	8006cf8 <_dtoa_r+0xa40>
 8006ce8:	f000 fc66 	bl	80075b8 <__multadd>
 8006cec:	4681      	mov	r9, r0
 8006cee:	4607      	mov	r7, r0
 8006cf0:	9b05      	ldr	r3, [sp, #20]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	9305      	str	r3, [sp, #20]
 8006cf6:	e774      	b.n	8006be2 <_dtoa_r+0x92a>
 8006cf8:	f000 fc5e 	bl	80075b8 <__multadd>
 8006cfc:	4639      	mov	r1, r7
 8006cfe:	4681      	mov	r9, r0
 8006d00:	2300      	movs	r3, #0
 8006d02:	220a      	movs	r2, #10
 8006d04:	4630      	mov	r0, r6
 8006d06:	f000 fc57 	bl	80075b8 <__multadd>
 8006d0a:	4607      	mov	r7, r0
 8006d0c:	e7f0      	b.n	8006cf0 <_dtoa_r+0xa38>
 8006d0e:	f1ba 0f00 	cmp.w	sl, #0
 8006d12:	9a00      	ldr	r2, [sp, #0]
 8006d14:	bfcc      	ite	gt
 8006d16:	46d0      	movgt	r8, sl
 8006d18:	f04f 0801 	movle.w	r8, #1
 8006d1c:	4490      	add	r8, r2
 8006d1e:	f04f 0900 	mov.w	r9, #0
 8006d22:	4629      	mov	r1, r5
 8006d24:	2201      	movs	r2, #1
 8006d26:	4630      	mov	r0, r6
 8006d28:	9302      	str	r3, [sp, #8]
 8006d2a:	f000 fe3f 	bl	80079ac <__lshift>
 8006d2e:	4621      	mov	r1, r4
 8006d30:	4605      	mov	r5, r0
 8006d32:	f000 fea7 	bl	8007a84 <__mcmp>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	dcb1      	bgt.n	8006c9e <_dtoa_r+0x9e6>
 8006d3a:	d102      	bne.n	8006d42 <_dtoa_r+0xa8a>
 8006d3c:	9b02      	ldr	r3, [sp, #8]
 8006d3e:	07db      	lsls	r3, r3, #31
 8006d40:	d4ad      	bmi.n	8006c9e <_dtoa_r+0x9e6>
 8006d42:	4643      	mov	r3, r8
 8006d44:	4698      	mov	r8, r3
 8006d46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d4a:	2a30      	cmp	r2, #48	; 0x30
 8006d4c:	d0fa      	beq.n	8006d44 <_dtoa_r+0xa8c>
 8006d4e:	e6f6      	b.n	8006b3e <_dtoa_r+0x886>
 8006d50:	9a00      	ldr	r2, [sp, #0]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d1a4      	bne.n	8006ca0 <_dtoa_r+0x9e8>
 8006d56:	f10b 0b01 	add.w	fp, fp, #1
 8006d5a:	2331      	movs	r3, #49	; 0x31
 8006d5c:	e778      	b.n	8006c50 <_dtoa_r+0x998>
 8006d5e:	4b15      	ldr	r3, [pc, #84]	; (8006db4 <_dtoa_r+0xafc>)
 8006d60:	f7ff bb12 	b.w	8006388 <_dtoa_r+0xd0>
 8006d64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f47f aaee 	bne.w	8006348 <_dtoa_r+0x90>
 8006d6c:	4b12      	ldr	r3, [pc, #72]	; (8006db8 <_dtoa_r+0xb00>)
 8006d6e:	f7ff bb0b 	b.w	8006388 <_dtoa_r+0xd0>
 8006d72:	f1ba 0f00 	cmp.w	sl, #0
 8006d76:	dc03      	bgt.n	8006d80 <_dtoa_r+0xac8>
 8006d78:	9b07      	ldr	r3, [sp, #28]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	f73f aec7 	bgt.w	8006b0e <_dtoa_r+0x856>
 8006d80:	f8dd 8000 	ldr.w	r8, [sp]
 8006d84:	4621      	mov	r1, r4
 8006d86:	4628      	mov	r0, r5
 8006d88:	f7ff fa08 	bl	800619c <quorem>
 8006d8c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006d90:	f808 3b01 	strb.w	r3, [r8], #1
 8006d94:	9a00      	ldr	r2, [sp, #0]
 8006d96:	eba8 0202 	sub.w	r2, r8, r2
 8006d9a:	4592      	cmp	sl, r2
 8006d9c:	ddb7      	ble.n	8006d0e <_dtoa_r+0xa56>
 8006d9e:	4629      	mov	r1, r5
 8006da0:	2300      	movs	r3, #0
 8006da2:	220a      	movs	r2, #10
 8006da4:	4630      	mov	r0, r6
 8006da6:	f000 fc07 	bl	80075b8 <__multadd>
 8006daa:	4605      	mov	r5, r0
 8006dac:	e7ea      	b.n	8006d84 <_dtoa_r+0xacc>
 8006dae:	bf00      	nop
 8006db0:	080090ec 	.word	0x080090ec
 8006db4:	08008eec 	.word	0x08008eec
 8006db8:	08009069 	.word	0x08009069

08006dbc <rshift>:
 8006dbc:	6903      	ldr	r3, [r0, #16]
 8006dbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006dc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006dca:	f100 0414 	add.w	r4, r0, #20
 8006dce:	dd45      	ble.n	8006e5c <rshift+0xa0>
 8006dd0:	f011 011f 	ands.w	r1, r1, #31
 8006dd4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006dd8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006ddc:	d10c      	bne.n	8006df8 <rshift+0x3c>
 8006dde:	f100 0710 	add.w	r7, r0, #16
 8006de2:	4629      	mov	r1, r5
 8006de4:	42b1      	cmp	r1, r6
 8006de6:	d334      	bcc.n	8006e52 <rshift+0x96>
 8006de8:	1a9b      	subs	r3, r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	1eea      	subs	r2, r5, #3
 8006dee:	4296      	cmp	r6, r2
 8006df0:	bf38      	it	cc
 8006df2:	2300      	movcc	r3, #0
 8006df4:	4423      	add	r3, r4
 8006df6:	e015      	b.n	8006e24 <rshift+0x68>
 8006df8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006dfc:	f1c1 0820 	rsb	r8, r1, #32
 8006e00:	40cf      	lsrs	r7, r1
 8006e02:	f105 0e04 	add.w	lr, r5, #4
 8006e06:	46a1      	mov	r9, r4
 8006e08:	4576      	cmp	r6, lr
 8006e0a:	46f4      	mov	ip, lr
 8006e0c:	d815      	bhi.n	8006e3a <rshift+0x7e>
 8006e0e:	1a9b      	subs	r3, r3, r2
 8006e10:	009a      	lsls	r2, r3, #2
 8006e12:	3a04      	subs	r2, #4
 8006e14:	3501      	adds	r5, #1
 8006e16:	42ae      	cmp	r6, r5
 8006e18:	bf38      	it	cc
 8006e1a:	2200      	movcc	r2, #0
 8006e1c:	18a3      	adds	r3, r4, r2
 8006e1e:	50a7      	str	r7, [r4, r2]
 8006e20:	b107      	cbz	r7, 8006e24 <rshift+0x68>
 8006e22:	3304      	adds	r3, #4
 8006e24:	1b1a      	subs	r2, r3, r4
 8006e26:	42a3      	cmp	r3, r4
 8006e28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006e2c:	bf08      	it	eq
 8006e2e:	2300      	moveq	r3, #0
 8006e30:	6102      	str	r2, [r0, #16]
 8006e32:	bf08      	it	eq
 8006e34:	6143      	streq	r3, [r0, #20]
 8006e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e3a:	f8dc c000 	ldr.w	ip, [ip]
 8006e3e:	fa0c fc08 	lsl.w	ip, ip, r8
 8006e42:	ea4c 0707 	orr.w	r7, ip, r7
 8006e46:	f849 7b04 	str.w	r7, [r9], #4
 8006e4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e4e:	40cf      	lsrs	r7, r1
 8006e50:	e7da      	b.n	8006e08 <rshift+0x4c>
 8006e52:	f851 cb04 	ldr.w	ip, [r1], #4
 8006e56:	f847 cf04 	str.w	ip, [r7, #4]!
 8006e5a:	e7c3      	b.n	8006de4 <rshift+0x28>
 8006e5c:	4623      	mov	r3, r4
 8006e5e:	e7e1      	b.n	8006e24 <rshift+0x68>

08006e60 <__hexdig_fun>:
 8006e60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006e64:	2b09      	cmp	r3, #9
 8006e66:	d802      	bhi.n	8006e6e <__hexdig_fun+0xe>
 8006e68:	3820      	subs	r0, #32
 8006e6a:	b2c0      	uxtb	r0, r0
 8006e6c:	4770      	bx	lr
 8006e6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006e72:	2b05      	cmp	r3, #5
 8006e74:	d801      	bhi.n	8006e7a <__hexdig_fun+0x1a>
 8006e76:	3847      	subs	r0, #71	; 0x47
 8006e78:	e7f7      	b.n	8006e6a <__hexdig_fun+0xa>
 8006e7a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006e7e:	2b05      	cmp	r3, #5
 8006e80:	d801      	bhi.n	8006e86 <__hexdig_fun+0x26>
 8006e82:	3827      	subs	r0, #39	; 0x27
 8006e84:	e7f1      	b.n	8006e6a <__hexdig_fun+0xa>
 8006e86:	2000      	movs	r0, #0
 8006e88:	4770      	bx	lr
	...

08006e8c <__gethex>:
 8006e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e90:	ed2d 8b02 	vpush	{d8}
 8006e94:	b089      	sub	sp, #36	; 0x24
 8006e96:	ee08 0a10 	vmov	s16, r0
 8006e9a:	9304      	str	r3, [sp, #16]
 8006e9c:	4bbc      	ldr	r3, [pc, #752]	; (8007190 <__gethex+0x304>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	9301      	str	r3, [sp, #4]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	468b      	mov	fp, r1
 8006ea6:	4690      	mov	r8, r2
 8006ea8:	f7f9 fa1a 	bl	80002e0 <strlen>
 8006eac:	9b01      	ldr	r3, [sp, #4]
 8006eae:	f8db 2000 	ldr.w	r2, [fp]
 8006eb2:	4403      	add	r3, r0
 8006eb4:	4682      	mov	sl, r0
 8006eb6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006eba:	9305      	str	r3, [sp, #20]
 8006ebc:	1c93      	adds	r3, r2, #2
 8006ebe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006ec2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006ec6:	32fe      	adds	r2, #254	; 0xfe
 8006ec8:	18d1      	adds	r1, r2, r3
 8006eca:	461f      	mov	r7, r3
 8006ecc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006ed0:	9100      	str	r1, [sp, #0]
 8006ed2:	2830      	cmp	r0, #48	; 0x30
 8006ed4:	d0f8      	beq.n	8006ec8 <__gethex+0x3c>
 8006ed6:	f7ff ffc3 	bl	8006e60 <__hexdig_fun>
 8006eda:	4604      	mov	r4, r0
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d13a      	bne.n	8006f56 <__gethex+0xca>
 8006ee0:	9901      	ldr	r1, [sp, #4]
 8006ee2:	4652      	mov	r2, sl
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	f001 f9ef 	bl	80082c8 <strncmp>
 8006eea:	4605      	mov	r5, r0
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d168      	bne.n	8006fc2 <__gethex+0x136>
 8006ef0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006ef4:	eb07 060a 	add.w	r6, r7, sl
 8006ef8:	f7ff ffb2 	bl	8006e60 <__hexdig_fun>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d062      	beq.n	8006fc6 <__gethex+0x13a>
 8006f00:	4633      	mov	r3, r6
 8006f02:	7818      	ldrb	r0, [r3, #0]
 8006f04:	2830      	cmp	r0, #48	; 0x30
 8006f06:	461f      	mov	r7, r3
 8006f08:	f103 0301 	add.w	r3, r3, #1
 8006f0c:	d0f9      	beq.n	8006f02 <__gethex+0x76>
 8006f0e:	f7ff ffa7 	bl	8006e60 <__hexdig_fun>
 8006f12:	2301      	movs	r3, #1
 8006f14:	fab0 f480 	clz	r4, r0
 8006f18:	0964      	lsrs	r4, r4, #5
 8006f1a:	4635      	mov	r5, r6
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	463a      	mov	r2, r7
 8006f20:	4616      	mov	r6, r2
 8006f22:	3201      	adds	r2, #1
 8006f24:	7830      	ldrb	r0, [r6, #0]
 8006f26:	f7ff ff9b 	bl	8006e60 <__hexdig_fun>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d1f8      	bne.n	8006f20 <__gethex+0x94>
 8006f2e:	9901      	ldr	r1, [sp, #4]
 8006f30:	4652      	mov	r2, sl
 8006f32:	4630      	mov	r0, r6
 8006f34:	f001 f9c8 	bl	80082c8 <strncmp>
 8006f38:	b980      	cbnz	r0, 8006f5c <__gethex+0xd0>
 8006f3a:	b94d      	cbnz	r5, 8006f50 <__gethex+0xc4>
 8006f3c:	eb06 050a 	add.w	r5, r6, sl
 8006f40:	462a      	mov	r2, r5
 8006f42:	4616      	mov	r6, r2
 8006f44:	3201      	adds	r2, #1
 8006f46:	7830      	ldrb	r0, [r6, #0]
 8006f48:	f7ff ff8a 	bl	8006e60 <__hexdig_fun>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d1f8      	bne.n	8006f42 <__gethex+0xb6>
 8006f50:	1bad      	subs	r5, r5, r6
 8006f52:	00ad      	lsls	r5, r5, #2
 8006f54:	e004      	b.n	8006f60 <__gethex+0xd4>
 8006f56:	2400      	movs	r4, #0
 8006f58:	4625      	mov	r5, r4
 8006f5a:	e7e0      	b.n	8006f1e <__gethex+0x92>
 8006f5c:	2d00      	cmp	r5, #0
 8006f5e:	d1f7      	bne.n	8006f50 <__gethex+0xc4>
 8006f60:	7833      	ldrb	r3, [r6, #0]
 8006f62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006f66:	2b50      	cmp	r3, #80	; 0x50
 8006f68:	d13b      	bne.n	8006fe2 <__gethex+0x156>
 8006f6a:	7873      	ldrb	r3, [r6, #1]
 8006f6c:	2b2b      	cmp	r3, #43	; 0x2b
 8006f6e:	d02c      	beq.n	8006fca <__gethex+0x13e>
 8006f70:	2b2d      	cmp	r3, #45	; 0x2d
 8006f72:	d02e      	beq.n	8006fd2 <__gethex+0x146>
 8006f74:	1c71      	adds	r1, r6, #1
 8006f76:	f04f 0900 	mov.w	r9, #0
 8006f7a:	7808      	ldrb	r0, [r1, #0]
 8006f7c:	f7ff ff70 	bl	8006e60 <__hexdig_fun>
 8006f80:	1e43      	subs	r3, r0, #1
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b18      	cmp	r3, #24
 8006f86:	d82c      	bhi.n	8006fe2 <__gethex+0x156>
 8006f88:	f1a0 0210 	sub.w	r2, r0, #16
 8006f8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006f90:	f7ff ff66 	bl	8006e60 <__hexdig_fun>
 8006f94:	1e43      	subs	r3, r0, #1
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b18      	cmp	r3, #24
 8006f9a:	d91d      	bls.n	8006fd8 <__gethex+0x14c>
 8006f9c:	f1b9 0f00 	cmp.w	r9, #0
 8006fa0:	d000      	beq.n	8006fa4 <__gethex+0x118>
 8006fa2:	4252      	negs	r2, r2
 8006fa4:	4415      	add	r5, r2
 8006fa6:	f8cb 1000 	str.w	r1, [fp]
 8006faa:	b1e4      	cbz	r4, 8006fe6 <__gethex+0x15a>
 8006fac:	9b00      	ldr	r3, [sp, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	bf14      	ite	ne
 8006fb2:	2700      	movne	r7, #0
 8006fb4:	2706      	moveq	r7, #6
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	b009      	add	sp, #36	; 0x24
 8006fba:	ecbd 8b02 	vpop	{d8}
 8006fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc2:	463e      	mov	r6, r7
 8006fc4:	4625      	mov	r5, r4
 8006fc6:	2401      	movs	r4, #1
 8006fc8:	e7ca      	b.n	8006f60 <__gethex+0xd4>
 8006fca:	f04f 0900 	mov.w	r9, #0
 8006fce:	1cb1      	adds	r1, r6, #2
 8006fd0:	e7d3      	b.n	8006f7a <__gethex+0xee>
 8006fd2:	f04f 0901 	mov.w	r9, #1
 8006fd6:	e7fa      	b.n	8006fce <__gethex+0x142>
 8006fd8:	230a      	movs	r3, #10
 8006fda:	fb03 0202 	mla	r2, r3, r2, r0
 8006fde:	3a10      	subs	r2, #16
 8006fe0:	e7d4      	b.n	8006f8c <__gethex+0x100>
 8006fe2:	4631      	mov	r1, r6
 8006fe4:	e7df      	b.n	8006fa6 <__gethex+0x11a>
 8006fe6:	1bf3      	subs	r3, r6, r7
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	4621      	mov	r1, r4
 8006fec:	2b07      	cmp	r3, #7
 8006fee:	dc0b      	bgt.n	8007008 <__gethex+0x17c>
 8006ff0:	ee18 0a10 	vmov	r0, s16
 8006ff4:	f000 fa7e 	bl	80074f4 <_Balloc>
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	b940      	cbnz	r0, 800700e <__gethex+0x182>
 8006ffc:	4b65      	ldr	r3, [pc, #404]	; (8007194 <__gethex+0x308>)
 8006ffe:	4602      	mov	r2, r0
 8007000:	21de      	movs	r1, #222	; 0xde
 8007002:	4865      	ldr	r0, [pc, #404]	; (8007198 <__gethex+0x30c>)
 8007004:	f001 f980 	bl	8008308 <__assert_func>
 8007008:	3101      	adds	r1, #1
 800700a:	105b      	asrs	r3, r3, #1
 800700c:	e7ee      	b.n	8006fec <__gethex+0x160>
 800700e:	f100 0914 	add.w	r9, r0, #20
 8007012:	f04f 0b00 	mov.w	fp, #0
 8007016:	f1ca 0301 	rsb	r3, sl, #1
 800701a:	f8cd 9008 	str.w	r9, [sp, #8]
 800701e:	f8cd b000 	str.w	fp, [sp]
 8007022:	9306      	str	r3, [sp, #24]
 8007024:	42b7      	cmp	r7, r6
 8007026:	d340      	bcc.n	80070aa <__gethex+0x21e>
 8007028:	9802      	ldr	r0, [sp, #8]
 800702a:	9b00      	ldr	r3, [sp, #0]
 800702c:	f840 3b04 	str.w	r3, [r0], #4
 8007030:	eba0 0009 	sub.w	r0, r0, r9
 8007034:	1080      	asrs	r0, r0, #2
 8007036:	0146      	lsls	r6, r0, #5
 8007038:	6120      	str	r0, [r4, #16]
 800703a:	4618      	mov	r0, r3
 800703c:	f000 fb50 	bl	80076e0 <__hi0bits>
 8007040:	1a30      	subs	r0, r6, r0
 8007042:	f8d8 6000 	ldr.w	r6, [r8]
 8007046:	42b0      	cmp	r0, r6
 8007048:	dd63      	ble.n	8007112 <__gethex+0x286>
 800704a:	1b87      	subs	r7, r0, r6
 800704c:	4639      	mov	r1, r7
 800704e:	4620      	mov	r0, r4
 8007050:	f000 feeb 	bl	8007e2a <__any_on>
 8007054:	4682      	mov	sl, r0
 8007056:	b1a8      	cbz	r0, 8007084 <__gethex+0x1f8>
 8007058:	1e7b      	subs	r3, r7, #1
 800705a:	1159      	asrs	r1, r3, #5
 800705c:	f003 021f 	and.w	r2, r3, #31
 8007060:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007064:	f04f 0a01 	mov.w	sl, #1
 8007068:	fa0a f202 	lsl.w	r2, sl, r2
 800706c:	420a      	tst	r2, r1
 800706e:	d009      	beq.n	8007084 <__gethex+0x1f8>
 8007070:	4553      	cmp	r3, sl
 8007072:	dd05      	ble.n	8007080 <__gethex+0x1f4>
 8007074:	1eb9      	subs	r1, r7, #2
 8007076:	4620      	mov	r0, r4
 8007078:	f000 fed7 	bl	8007e2a <__any_on>
 800707c:	2800      	cmp	r0, #0
 800707e:	d145      	bne.n	800710c <__gethex+0x280>
 8007080:	f04f 0a02 	mov.w	sl, #2
 8007084:	4639      	mov	r1, r7
 8007086:	4620      	mov	r0, r4
 8007088:	f7ff fe98 	bl	8006dbc <rshift>
 800708c:	443d      	add	r5, r7
 800708e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007092:	42ab      	cmp	r3, r5
 8007094:	da4c      	bge.n	8007130 <__gethex+0x2a4>
 8007096:	ee18 0a10 	vmov	r0, s16
 800709a:	4621      	mov	r1, r4
 800709c:	f000 fa6a 	bl	8007574 <_Bfree>
 80070a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80070a2:	2300      	movs	r3, #0
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	27a3      	movs	r7, #163	; 0xa3
 80070a8:	e785      	b.n	8006fb6 <__gethex+0x12a>
 80070aa:	1e73      	subs	r3, r6, #1
 80070ac:	9a05      	ldr	r2, [sp, #20]
 80070ae:	9303      	str	r3, [sp, #12]
 80070b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d019      	beq.n	80070ec <__gethex+0x260>
 80070b8:	f1bb 0f20 	cmp.w	fp, #32
 80070bc:	d107      	bne.n	80070ce <__gethex+0x242>
 80070be:	9b02      	ldr	r3, [sp, #8]
 80070c0:	9a00      	ldr	r2, [sp, #0]
 80070c2:	f843 2b04 	str.w	r2, [r3], #4
 80070c6:	9302      	str	r3, [sp, #8]
 80070c8:	2300      	movs	r3, #0
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	469b      	mov	fp, r3
 80070ce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80070d2:	f7ff fec5 	bl	8006e60 <__hexdig_fun>
 80070d6:	9b00      	ldr	r3, [sp, #0]
 80070d8:	f000 000f 	and.w	r0, r0, #15
 80070dc:	fa00 f00b 	lsl.w	r0, r0, fp
 80070e0:	4303      	orrs	r3, r0
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	f10b 0b04 	add.w	fp, fp, #4
 80070e8:	9b03      	ldr	r3, [sp, #12]
 80070ea:	e00d      	b.n	8007108 <__gethex+0x27c>
 80070ec:	9b03      	ldr	r3, [sp, #12]
 80070ee:	9a06      	ldr	r2, [sp, #24]
 80070f0:	4413      	add	r3, r2
 80070f2:	42bb      	cmp	r3, r7
 80070f4:	d3e0      	bcc.n	80070b8 <__gethex+0x22c>
 80070f6:	4618      	mov	r0, r3
 80070f8:	9901      	ldr	r1, [sp, #4]
 80070fa:	9307      	str	r3, [sp, #28]
 80070fc:	4652      	mov	r2, sl
 80070fe:	f001 f8e3 	bl	80082c8 <strncmp>
 8007102:	9b07      	ldr	r3, [sp, #28]
 8007104:	2800      	cmp	r0, #0
 8007106:	d1d7      	bne.n	80070b8 <__gethex+0x22c>
 8007108:	461e      	mov	r6, r3
 800710a:	e78b      	b.n	8007024 <__gethex+0x198>
 800710c:	f04f 0a03 	mov.w	sl, #3
 8007110:	e7b8      	b.n	8007084 <__gethex+0x1f8>
 8007112:	da0a      	bge.n	800712a <__gethex+0x29e>
 8007114:	1a37      	subs	r7, r6, r0
 8007116:	4621      	mov	r1, r4
 8007118:	ee18 0a10 	vmov	r0, s16
 800711c:	463a      	mov	r2, r7
 800711e:	f000 fc45 	bl	80079ac <__lshift>
 8007122:	1bed      	subs	r5, r5, r7
 8007124:	4604      	mov	r4, r0
 8007126:	f100 0914 	add.w	r9, r0, #20
 800712a:	f04f 0a00 	mov.w	sl, #0
 800712e:	e7ae      	b.n	800708e <__gethex+0x202>
 8007130:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007134:	42a8      	cmp	r0, r5
 8007136:	dd72      	ble.n	800721e <__gethex+0x392>
 8007138:	1b45      	subs	r5, r0, r5
 800713a:	42ae      	cmp	r6, r5
 800713c:	dc36      	bgt.n	80071ac <__gethex+0x320>
 800713e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007142:	2b02      	cmp	r3, #2
 8007144:	d02a      	beq.n	800719c <__gethex+0x310>
 8007146:	2b03      	cmp	r3, #3
 8007148:	d02c      	beq.n	80071a4 <__gethex+0x318>
 800714a:	2b01      	cmp	r3, #1
 800714c:	d115      	bne.n	800717a <__gethex+0x2ee>
 800714e:	42ae      	cmp	r6, r5
 8007150:	d113      	bne.n	800717a <__gethex+0x2ee>
 8007152:	2e01      	cmp	r6, #1
 8007154:	d10b      	bne.n	800716e <__gethex+0x2e2>
 8007156:	9a04      	ldr	r2, [sp, #16]
 8007158:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	2301      	movs	r3, #1
 8007160:	6123      	str	r3, [r4, #16]
 8007162:	f8c9 3000 	str.w	r3, [r9]
 8007166:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007168:	2762      	movs	r7, #98	; 0x62
 800716a:	601c      	str	r4, [r3, #0]
 800716c:	e723      	b.n	8006fb6 <__gethex+0x12a>
 800716e:	1e71      	subs	r1, r6, #1
 8007170:	4620      	mov	r0, r4
 8007172:	f000 fe5a 	bl	8007e2a <__any_on>
 8007176:	2800      	cmp	r0, #0
 8007178:	d1ed      	bne.n	8007156 <__gethex+0x2ca>
 800717a:	ee18 0a10 	vmov	r0, s16
 800717e:	4621      	mov	r1, r4
 8007180:	f000 f9f8 	bl	8007574 <_Bfree>
 8007184:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007186:	2300      	movs	r3, #0
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	2750      	movs	r7, #80	; 0x50
 800718c:	e713      	b.n	8006fb6 <__gethex+0x12a>
 800718e:	bf00      	nop
 8007190:	08009168 	.word	0x08009168
 8007194:	080090ec 	.word	0x080090ec
 8007198:	080090fd 	.word	0x080090fd
 800719c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1eb      	bne.n	800717a <__gethex+0x2ee>
 80071a2:	e7d8      	b.n	8007156 <__gethex+0x2ca>
 80071a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1d5      	bne.n	8007156 <__gethex+0x2ca>
 80071aa:	e7e6      	b.n	800717a <__gethex+0x2ee>
 80071ac:	1e6f      	subs	r7, r5, #1
 80071ae:	f1ba 0f00 	cmp.w	sl, #0
 80071b2:	d131      	bne.n	8007218 <__gethex+0x38c>
 80071b4:	b127      	cbz	r7, 80071c0 <__gethex+0x334>
 80071b6:	4639      	mov	r1, r7
 80071b8:	4620      	mov	r0, r4
 80071ba:	f000 fe36 	bl	8007e2a <__any_on>
 80071be:	4682      	mov	sl, r0
 80071c0:	117b      	asrs	r3, r7, #5
 80071c2:	2101      	movs	r1, #1
 80071c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80071c8:	f007 071f 	and.w	r7, r7, #31
 80071cc:	fa01 f707 	lsl.w	r7, r1, r7
 80071d0:	421f      	tst	r7, r3
 80071d2:	4629      	mov	r1, r5
 80071d4:	4620      	mov	r0, r4
 80071d6:	bf18      	it	ne
 80071d8:	f04a 0a02 	orrne.w	sl, sl, #2
 80071dc:	1b76      	subs	r6, r6, r5
 80071de:	f7ff fded 	bl	8006dbc <rshift>
 80071e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80071e6:	2702      	movs	r7, #2
 80071e8:	f1ba 0f00 	cmp.w	sl, #0
 80071ec:	d048      	beq.n	8007280 <__gethex+0x3f4>
 80071ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d015      	beq.n	8007222 <__gethex+0x396>
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d017      	beq.n	800722a <__gethex+0x39e>
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d109      	bne.n	8007212 <__gethex+0x386>
 80071fe:	f01a 0f02 	tst.w	sl, #2
 8007202:	d006      	beq.n	8007212 <__gethex+0x386>
 8007204:	f8d9 0000 	ldr.w	r0, [r9]
 8007208:	ea4a 0a00 	orr.w	sl, sl, r0
 800720c:	f01a 0f01 	tst.w	sl, #1
 8007210:	d10e      	bne.n	8007230 <__gethex+0x3a4>
 8007212:	f047 0710 	orr.w	r7, r7, #16
 8007216:	e033      	b.n	8007280 <__gethex+0x3f4>
 8007218:	f04f 0a01 	mov.w	sl, #1
 800721c:	e7d0      	b.n	80071c0 <__gethex+0x334>
 800721e:	2701      	movs	r7, #1
 8007220:	e7e2      	b.n	80071e8 <__gethex+0x35c>
 8007222:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007224:	f1c3 0301 	rsb	r3, r3, #1
 8007228:	9315      	str	r3, [sp, #84]	; 0x54
 800722a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800722c:	2b00      	cmp	r3, #0
 800722e:	d0f0      	beq.n	8007212 <__gethex+0x386>
 8007230:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007234:	f104 0314 	add.w	r3, r4, #20
 8007238:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800723c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007240:	f04f 0c00 	mov.w	ip, #0
 8007244:	4618      	mov	r0, r3
 8007246:	f853 2b04 	ldr.w	r2, [r3], #4
 800724a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800724e:	d01c      	beq.n	800728a <__gethex+0x3fe>
 8007250:	3201      	adds	r2, #1
 8007252:	6002      	str	r2, [r0, #0]
 8007254:	2f02      	cmp	r7, #2
 8007256:	f104 0314 	add.w	r3, r4, #20
 800725a:	d13f      	bne.n	80072dc <__gethex+0x450>
 800725c:	f8d8 2000 	ldr.w	r2, [r8]
 8007260:	3a01      	subs	r2, #1
 8007262:	42b2      	cmp	r2, r6
 8007264:	d10a      	bne.n	800727c <__gethex+0x3f0>
 8007266:	1171      	asrs	r1, r6, #5
 8007268:	2201      	movs	r2, #1
 800726a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800726e:	f006 061f 	and.w	r6, r6, #31
 8007272:	fa02 f606 	lsl.w	r6, r2, r6
 8007276:	421e      	tst	r6, r3
 8007278:	bf18      	it	ne
 800727a:	4617      	movne	r7, r2
 800727c:	f047 0720 	orr.w	r7, r7, #32
 8007280:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007282:	601c      	str	r4, [r3, #0]
 8007284:	9b04      	ldr	r3, [sp, #16]
 8007286:	601d      	str	r5, [r3, #0]
 8007288:	e695      	b.n	8006fb6 <__gethex+0x12a>
 800728a:	4299      	cmp	r1, r3
 800728c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007290:	d8d8      	bhi.n	8007244 <__gethex+0x3b8>
 8007292:	68a3      	ldr	r3, [r4, #8]
 8007294:	459b      	cmp	fp, r3
 8007296:	db19      	blt.n	80072cc <__gethex+0x440>
 8007298:	6861      	ldr	r1, [r4, #4]
 800729a:	ee18 0a10 	vmov	r0, s16
 800729e:	3101      	adds	r1, #1
 80072a0:	f000 f928 	bl	80074f4 <_Balloc>
 80072a4:	4681      	mov	r9, r0
 80072a6:	b918      	cbnz	r0, 80072b0 <__gethex+0x424>
 80072a8:	4b1a      	ldr	r3, [pc, #104]	; (8007314 <__gethex+0x488>)
 80072aa:	4602      	mov	r2, r0
 80072ac:	2184      	movs	r1, #132	; 0x84
 80072ae:	e6a8      	b.n	8007002 <__gethex+0x176>
 80072b0:	6922      	ldr	r2, [r4, #16]
 80072b2:	3202      	adds	r2, #2
 80072b4:	f104 010c 	add.w	r1, r4, #12
 80072b8:	0092      	lsls	r2, r2, #2
 80072ba:	300c      	adds	r0, #12
 80072bc:	f000 f90c 	bl	80074d8 <memcpy>
 80072c0:	4621      	mov	r1, r4
 80072c2:	ee18 0a10 	vmov	r0, s16
 80072c6:	f000 f955 	bl	8007574 <_Bfree>
 80072ca:	464c      	mov	r4, r9
 80072cc:	6923      	ldr	r3, [r4, #16]
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072d4:	6122      	str	r2, [r4, #16]
 80072d6:	2201      	movs	r2, #1
 80072d8:	615a      	str	r2, [r3, #20]
 80072da:	e7bb      	b.n	8007254 <__gethex+0x3c8>
 80072dc:	6922      	ldr	r2, [r4, #16]
 80072de:	455a      	cmp	r2, fp
 80072e0:	dd0b      	ble.n	80072fa <__gethex+0x46e>
 80072e2:	2101      	movs	r1, #1
 80072e4:	4620      	mov	r0, r4
 80072e6:	f7ff fd69 	bl	8006dbc <rshift>
 80072ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072ee:	3501      	adds	r5, #1
 80072f0:	42ab      	cmp	r3, r5
 80072f2:	f6ff aed0 	blt.w	8007096 <__gethex+0x20a>
 80072f6:	2701      	movs	r7, #1
 80072f8:	e7c0      	b.n	800727c <__gethex+0x3f0>
 80072fa:	f016 061f 	ands.w	r6, r6, #31
 80072fe:	d0fa      	beq.n	80072f6 <__gethex+0x46a>
 8007300:	449a      	add	sl, r3
 8007302:	f1c6 0620 	rsb	r6, r6, #32
 8007306:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800730a:	f000 f9e9 	bl	80076e0 <__hi0bits>
 800730e:	42b0      	cmp	r0, r6
 8007310:	dbe7      	blt.n	80072e2 <__gethex+0x456>
 8007312:	e7f0      	b.n	80072f6 <__gethex+0x46a>
 8007314:	080090ec 	.word	0x080090ec

08007318 <L_shift>:
 8007318:	f1c2 0208 	rsb	r2, r2, #8
 800731c:	0092      	lsls	r2, r2, #2
 800731e:	b570      	push	{r4, r5, r6, lr}
 8007320:	f1c2 0620 	rsb	r6, r2, #32
 8007324:	6843      	ldr	r3, [r0, #4]
 8007326:	6804      	ldr	r4, [r0, #0]
 8007328:	fa03 f506 	lsl.w	r5, r3, r6
 800732c:	432c      	orrs	r4, r5
 800732e:	40d3      	lsrs	r3, r2
 8007330:	6004      	str	r4, [r0, #0]
 8007332:	f840 3f04 	str.w	r3, [r0, #4]!
 8007336:	4288      	cmp	r0, r1
 8007338:	d3f4      	bcc.n	8007324 <L_shift+0xc>
 800733a:	bd70      	pop	{r4, r5, r6, pc}

0800733c <__match>:
 800733c:	b530      	push	{r4, r5, lr}
 800733e:	6803      	ldr	r3, [r0, #0]
 8007340:	3301      	adds	r3, #1
 8007342:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007346:	b914      	cbnz	r4, 800734e <__match+0x12>
 8007348:	6003      	str	r3, [r0, #0]
 800734a:	2001      	movs	r0, #1
 800734c:	bd30      	pop	{r4, r5, pc}
 800734e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007352:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007356:	2d19      	cmp	r5, #25
 8007358:	bf98      	it	ls
 800735a:	3220      	addls	r2, #32
 800735c:	42a2      	cmp	r2, r4
 800735e:	d0f0      	beq.n	8007342 <__match+0x6>
 8007360:	2000      	movs	r0, #0
 8007362:	e7f3      	b.n	800734c <__match+0x10>

08007364 <__hexnan>:
 8007364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007368:	680b      	ldr	r3, [r1, #0]
 800736a:	6801      	ldr	r1, [r0, #0]
 800736c:	115e      	asrs	r6, r3, #5
 800736e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007372:	f013 031f 	ands.w	r3, r3, #31
 8007376:	b087      	sub	sp, #28
 8007378:	bf18      	it	ne
 800737a:	3604      	addne	r6, #4
 800737c:	2500      	movs	r5, #0
 800737e:	1f37      	subs	r7, r6, #4
 8007380:	4682      	mov	sl, r0
 8007382:	4690      	mov	r8, r2
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	f846 5c04 	str.w	r5, [r6, #-4]
 800738a:	46b9      	mov	r9, r7
 800738c:	463c      	mov	r4, r7
 800738e:	9502      	str	r5, [sp, #8]
 8007390:	46ab      	mov	fp, r5
 8007392:	784a      	ldrb	r2, [r1, #1]
 8007394:	1c4b      	adds	r3, r1, #1
 8007396:	9303      	str	r3, [sp, #12]
 8007398:	b342      	cbz	r2, 80073ec <__hexnan+0x88>
 800739a:	4610      	mov	r0, r2
 800739c:	9105      	str	r1, [sp, #20]
 800739e:	9204      	str	r2, [sp, #16]
 80073a0:	f7ff fd5e 	bl	8006e60 <__hexdig_fun>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d14f      	bne.n	8007448 <__hexnan+0xe4>
 80073a8:	9a04      	ldr	r2, [sp, #16]
 80073aa:	9905      	ldr	r1, [sp, #20]
 80073ac:	2a20      	cmp	r2, #32
 80073ae:	d818      	bhi.n	80073e2 <__hexnan+0x7e>
 80073b0:	9b02      	ldr	r3, [sp, #8]
 80073b2:	459b      	cmp	fp, r3
 80073b4:	dd13      	ble.n	80073de <__hexnan+0x7a>
 80073b6:	454c      	cmp	r4, r9
 80073b8:	d206      	bcs.n	80073c8 <__hexnan+0x64>
 80073ba:	2d07      	cmp	r5, #7
 80073bc:	dc04      	bgt.n	80073c8 <__hexnan+0x64>
 80073be:	462a      	mov	r2, r5
 80073c0:	4649      	mov	r1, r9
 80073c2:	4620      	mov	r0, r4
 80073c4:	f7ff ffa8 	bl	8007318 <L_shift>
 80073c8:	4544      	cmp	r4, r8
 80073ca:	d950      	bls.n	800746e <__hexnan+0x10a>
 80073cc:	2300      	movs	r3, #0
 80073ce:	f1a4 0904 	sub.w	r9, r4, #4
 80073d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80073d6:	f8cd b008 	str.w	fp, [sp, #8]
 80073da:	464c      	mov	r4, r9
 80073dc:	461d      	mov	r5, r3
 80073de:	9903      	ldr	r1, [sp, #12]
 80073e0:	e7d7      	b.n	8007392 <__hexnan+0x2e>
 80073e2:	2a29      	cmp	r2, #41	; 0x29
 80073e4:	d156      	bne.n	8007494 <__hexnan+0x130>
 80073e6:	3102      	adds	r1, #2
 80073e8:	f8ca 1000 	str.w	r1, [sl]
 80073ec:	f1bb 0f00 	cmp.w	fp, #0
 80073f0:	d050      	beq.n	8007494 <__hexnan+0x130>
 80073f2:	454c      	cmp	r4, r9
 80073f4:	d206      	bcs.n	8007404 <__hexnan+0xa0>
 80073f6:	2d07      	cmp	r5, #7
 80073f8:	dc04      	bgt.n	8007404 <__hexnan+0xa0>
 80073fa:	462a      	mov	r2, r5
 80073fc:	4649      	mov	r1, r9
 80073fe:	4620      	mov	r0, r4
 8007400:	f7ff ff8a 	bl	8007318 <L_shift>
 8007404:	4544      	cmp	r4, r8
 8007406:	d934      	bls.n	8007472 <__hexnan+0x10e>
 8007408:	f1a8 0204 	sub.w	r2, r8, #4
 800740c:	4623      	mov	r3, r4
 800740e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007412:	f842 1f04 	str.w	r1, [r2, #4]!
 8007416:	429f      	cmp	r7, r3
 8007418:	d2f9      	bcs.n	800740e <__hexnan+0xaa>
 800741a:	1b3b      	subs	r3, r7, r4
 800741c:	f023 0303 	bic.w	r3, r3, #3
 8007420:	3304      	adds	r3, #4
 8007422:	3401      	adds	r4, #1
 8007424:	3e03      	subs	r6, #3
 8007426:	42b4      	cmp	r4, r6
 8007428:	bf88      	it	hi
 800742a:	2304      	movhi	r3, #4
 800742c:	4443      	add	r3, r8
 800742e:	2200      	movs	r2, #0
 8007430:	f843 2b04 	str.w	r2, [r3], #4
 8007434:	429f      	cmp	r7, r3
 8007436:	d2fb      	bcs.n	8007430 <__hexnan+0xcc>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	b91b      	cbnz	r3, 8007444 <__hexnan+0xe0>
 800743c:	4547      	cmp	r7, r8
 800743e:	d127      	bne.n	8007490 <__hexnan+0x12c>
 8007440:	2301      	movs	r3, #1
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	2005      	movs	r0, #5
 8007446:	e026      	b.n	8007496 <__hexnan+0x132>
 8007448:	3501      	adds	r5, #1
 800744a:	2d08      	cmp	r5, #8
 800744c:	f10b 0b01 	add.w	fp, fp, #1
 8007450:	dd06      	ble.n	8007460 <__hexnan+0xfc>
 8007452:	4544      	cmp	r4, r8
 8007454:	d9c3      	bls.n	80073de <__hexnan+0x7a>
 8007456:	2300      	movs	r3, #0
 8007458:	f844 3c04 	str.w	r3, [r4, #-4]
 800745c:	2501      	movs	r5, #1
 800745e:	3c04      	subs	r4, #4
 8007460:	6822      	ldr	r2, [r4, #0]
 8007462:	f000 000f 	and.w	r0, r0, #15
 8007466:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800746a:	6022      	str	r2, [r4, #0]
 800746c:	e7b7      	b.n	80073de <__hexnan+0x7a>
 800746e:	2508      	movs	r5, #8
 8007470:	e7b5      	b.n	80073de <__hexnan+0x7a>
 8007472:	9b01      	ldr	r3, [sp, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d0df      	beq.n	8007438 <__hexnan+0xd4>
 8007478:	f04f 32ff 	mov.w	r2, #4294967295
 800747c:	f1c3 0320 	rsb	r3, r3, #32
 8007480:	fa22 f303 	lsr.w	r3, r2, r3
 8007484:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007488:	401a      	ands	r2, r3
 800748a:	f846 2c04 	str.w	r2, [r6, #-4]
 800748e:	e7d3      	b.n	8007438 <__hexnan+0xd4>
 8007490:	3f04      	subs	r7, #4
 8007492:	e7d1      	b.n	8007438 <__hexnan+0xd4>
 8007494:	2004      	movs	r0, #4
 8007496:	b007      	add	sp, #28
 8007498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800749c <_localeconv_r>:
 800749c:	4800      	ldr	r0, [pc, #0]	; (80074a0 <_localeconv_r+0x4>)
 800749e:	4770      	bx	lr
 80074a0:	2400016c 	.word	0x2400016c

080074a4 <malloc>:
 80074a4:	4b02      	ldr	r3, [pc, #8]	; (80074b0 <malloc+0xc>)
 80074a6:	4601      	mov	r1, r0
 80074a8:	6818      	ldr	r0, [r3, #0]
 80074aa:	f000 bd3f 	b.w	8007f2c <_malloc_r>
 80074ae:	bf00      	nop
 80074b0:	24000014 	.word	0x24000014

080074b4 <__ascii_mbtowc>:
 80074b4:	b082      	sub	sp, #8
 80074b6:	b901      	cbnz	r1, 80074ba <__ascii_mbtowc+0x6>
 80074b8:	a901      	add	r1, sp, #4
 80074ba:	b142      	cbz	r2, 80074ce <__ascii_mbtowc+0x1a>
 80074bc:	b14b      	cbz	r3, 80074d2 <__ascii_mbtowc+0x1e>
 80074be:	7813      	ldrb	r3, [r2, #0]
 80074c0:	600b      	str	r3, [r1, #0]
 80074c2:	7812      	ldrb	r2, [r2, #0]
 80074c4:	1e10      	subs	r0, r2, #0
 80074c6:	bf18      	it	ne
 80074c8:	2001      	movne	r0, #1
 80074ca:	b002      	add	sp, #8
 80074cc:	4770      	bx	lr
 80074ce:	4610      	mov	r0, r2
 80074d0:	e7fb      	b.n	80074ca <__ascii_mbtowc+0x16>
 80074d2:	f06f 0001 	mvn.w	r0, #1
 80074d6:	e7f8      	b.n	80074ca <__ascii_mbtowc+0x16>

080074d8 <memcpy>:
 80074d8:	440a      	add	r2, r1
 80074da:	4291      	cmp	r1, r2
 80074dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80074e0:	d100      	bne.n	80074e4 <memcpy+0xc>
 80074e2:	4770      	bx	lr
 80074e4:	b510      	push	{r4, lr}
 80074e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ee:	4291      	cmp	r1, r2
 80074f0:	d1f9      	bne.n	80074e6 <memcpy+0xe>
 80074f2:	bd10      	pop	{r4, pc}

080074f4 <_Balloc>:
 80074f4:	b570      	push	{r4, r5, r6, lr}
 80074f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80074f8:	4604      	mov	r4, r0
 80074fa:	460d      	mov	r5, r1
 80074fc:	b976      	cbnz	r6, 800751c <_Balloc+0x28>
 80074fe:	2010      	movs	r0, #16
 8007500:	f7ff ffd0 	bl	80074a4 <malloc>
 8007504:	4602      	mov	r2, r0
 8007506:	6260      	str	r0, [r4, #36]	; 0x24
 8007508:	b920      	cbnz	r0, 8007514 <_Balloc+0x20>
 800750a:	4b18      	ldr	r3, [pc, #96]	; (800756c <_Balloc+0x78>)
 800750c:	4818      	ldr	r0, [pc, #96]	; (8007570 <_Balloc+0x7c>)
 800750e:	2166      	movs	r1, #102	; 0x66
 8007510:	f000 fefa 	bl	8008308 <__assert_func>
 8007514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007518:	6006      	str	r6, [r0, #0]
 800751a:	60c6      	str	r6, [r0, #12]
 800751c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800751e:	68f3      	ldr	r3, [r6, #12]
 8007520:	b183      	cbz	r3, 8007544 <_Balloc+0x50>
 8007522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800752a:	b9b8      	cbnz	r0, 800755c <_Balloc+0x68>
 800752c:	2101      	movs	r1, #1
 800752e:	fa01 f605 	lsl.w	r6, r1, r5
 8007532:	1d72      	adds	r2, r6, #5
 8007534:	0092      	lsls	r2, r2, #2
 8007536:	4620      	mov	r0, r4
 8007538:	f000 fc98 	bl	8007e6c <_calloc_r>
 800753c:	b160      	cbz	r0, 8007558 <_Balloc+0x64>
 800753e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007542:	e00e      	b.n	8007562 <_Balloc+0x6e>
 8007544:	2221      	movs	r2, #33	; 0x21
 8007546:	2104      	movs	r1, #4
 8007548:	4620      	mov	r0, r4
 800754a:	f000 fc8f 	bl	8007e6c <_calloc_r>
 800754e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007550:	60f0      	str	r0, [r6, #12]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e4      	bne.n	8007522 <_Balloc+0x2e>
 8007558:	2000      	movs	r0, #0
 800755a:	bd70      	pop	{r4, r5, r6, pc}
 800755c:	6802      	ldr	r2, [r0, #0]
 800755e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007562:	2300      	movs	r3, #0
 8007564:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007568:	e7f7      	b.n	800755a <_Balloc+0x66>
 800756a:	bf00      	nop
 800756c:	08009076 	.word	0x08009076
 8007570:	0800917c 	.word	0x0800917c

08007574 <_Bfree>:
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007578:	4605      	mov	r5, r0
 800757a:	460c      	mov	r4, r1
 800757c:	b976      	cbnz	r6, 800759c <_Bfree+0x28>
 800757e:	2010      	movs	r0, #16
 8007580:	f7ff ff90 	bl	80074a4 <malloc>
 8007584:	4602      	mov	r2, r0
 8007586:	6268      	str	r0, [r5, #36]	; 0x24
 8007588:	b920      	cbnz	r0, 8007594 <_Bfree+0x20>
 800758a:	4b09      	ldr	r3, [pc, #36]	; (80075b0 <_Bfree+0x3c>)
 800758c:	4809      	ldr	r0, [pc, #36]	; (80075b4 <_Bfree+0x40>)
 800758e:	218a      	movs	r1, #138	; 0x8a
 8007590:	f000 feba 	bl	8008308 <__assert_func>
 8007594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007598:	6006      	str	r6, [r0, #0]
 800759a:	60c6      	str	r6, [r0, #12]
 800759c:	b13c      	cbz	r4, 80075ae <_Bfree+0x3a>
 800759e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075a0:	6862      	ldr	r2, [r4, #4]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075a8:	6021      	str	r1, [r4, #0]
 80075aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	08009076 	.word	0x08009076
 80075b4:	0800917c 	.word	0x0800917c

080075b8 <__multadd>:
 80075b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075bc:	690e      	ldr	r6, [r1, #16]
 80075be:	4607      	mov	r7, r0
 80075c0:	4698      	mov	r8, r3
 80075c2:	460c      	mov	r4, r1
 80075c4:	f101 0014 	add.w	r0, r1, #20
 80075c8:	2300      	movs	r3, #0
 80075ca:	6805      	ldr	r5, [r0, #0]
 80075cc:	b2a9      	uxth	r1, r5
 80075ce:	fb02 8101 	mla	r1, r2, r1, r8
 80075d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80075d6:	0c2d      	lsrs	r5, r5, #16
 80075d8:	fb02 c505 	mla	r5, r2, r5, ip
 80075dc:	b289      	uxth	r1, r1
 80075de:	3301      	adds	r3, #1
 80075e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80075e4:	429e      	cmp	r6, r3
 80075e6:	f840 1b04 	str.w	r1, [r0], #4
 80075ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80075ee:	dcec      	bgt.n	80075ca <__multadd+0x12>
 80075f0:	f1b8 0f00 	cmp.w	r8, #0
 80075f4:	d022      	beq.n	800763c <__multadd+0x84>
 80075f6:	68a3      	ldr	r3, [r4, #8]
 80075f8:	42b3      	cmp	r3, r6
 80075fa:	dc19      	bgt.n	8007630 <__multadd+0x78>
 80075fc:	6861      	ldr	r1, [r4, #4]
 80075fe:	4638      	mov	r0, r7
 8007600:	3101      	adds	r1, #1
 8007602:	f7ff ff77 	bl	80074f4 <_Balloc>
 8007606:	4605      	mov	r5, r0
 8007608:	b928      	cbnz	r0, 8007616 <__multadd+0x5e>
 800760a:	4602      	mov	r2, r0
 800760c:	4b0d      	ldr	r3, [pc, #52]	; (8007644 <__multadd+0x8c>)
 800760e:	480e      	ldr	r0, [pc, #56]	; (8007648 <__multadd+0x90>)
 8007610:	21b5      	movs	r1, #181	; 0xb5
 8007612:	f000 fe79 	bl	8008308 <__assert_func>
 8007616:	6922      	ldr	r2, [r4, #16]
 8007618:	3202      	adds	r2, #2
 800761a:	f104 010c 	add.w	r1, r4, #12
 800761e:	0092      	lsls	r2, r2, #2
 8007620:	300c      	adds	r0, #12
 8007622:	f7ff ff59 	bl	80074d8 <memcpy>
 8007626:	4621      	mov	r1, r4
 8007628:	4638      	mov	r0, r7
 800762a:	f7ff ffa3 	bl	8007574 <_Bfree>
 800762e:	462c      	mov	r4, r5
 8007630:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007634:	3601      	adds	r6, #1
 8007636:	f8c3 8014 	str.w	r8, [r3, #20]
 800763a:	6126      	str	r6, [r4, #16]
 800763c:	4620      	mov	r0, r4
 800763e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007642:	bf00      	nop
 8007644:	080090ec 	.word	0x080090ec
 8007648:	0800917c 	.word	0x0800917c

0800764c <__s2b>:
 800764c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007650:	460c      	mov	r4, r1
 8007652:	4615      	mov	r5, r2
 8007654:	461f      	mov	r7, r3
 8007656:	2209      	movs	r2, #9
 8007658:	3308      	adds	r3, #8
 800765a:	4606      	mov	r6, r0
 800765c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007660:	2100      	movs	r1, #0
 8007662:	2201      	movs	r2, #1
 8007664:	429a      	cmp	r2, r3
 8007666:	db09      	blt.n	800767c <__s2b+0x30>
 8007668:	4630      	mov	r0, r6
 800766a:	f7ff ff43 	bl	80074f4 <_Balloc>
 800766e:	b940      	cbnz	r0, 8007682 <__s2b+0x36>
 8007670:	4602      	mov	r2, r0
 8007672:	4b19      	ldr	r3, [pc, #100]	; (80076d8 <__s2b+0x8c>)
 8007674:	4819      	ldr	r0, [pc, #100]	; (80076dc <__s2b+0x90>)
 8007676:	21ce      	movs	r1, #206	; 0xce
 8007678:	f000 fe46 	bl	8008308 <__assert_func>
 800767c:	0052      	lsls	r2, r2, #1
 800767e:	3101      	adds	r1, #1
 8007680:	e7f0      	b.n	8007664 <__s2b+0x18>
 8007682:	9b08      	ldr	r3, [sp, #32]
 8007684:	6143      	str	r3, [r0, #20]
 8007686:	2d09      	cmp	r5, #9
 8007688:	f04f 0301 	mov.w	r3, #1
 800768c:	6103      	str	r3, [r0, #16]
 800768e:	dd16      	ble.n	80076be <__s2b+0x72>
 8007690:	f104 0909 	add.w	r9, r4, #9
 8007694:	46c8      	mov	r8, r9
 8007696:	442c      	add	r4, r5
 8007698:	f818 3b01 	ldrb.w	r3, [r8], #1
 800769c:	4601      	mov	r1, r0
 800769e:	3b30      	subs	r3, #48	; 0x30
 80076a0:	220a      	movs	r2, #10
 80076a2:	4630      	mov	r0, r6
 80076a4:	f7ff ff88 	bl	80075b8 <__multadd>
 80076a8:	45a0      	cmp	r8, r4
 80076aa:	d1f5      	bne.n	8007698 <__s2b+0x4c>
 80076ac:	f1a5 0408 	sub.w	r4, r5, #8
 80076b0:	444c      	add	r4, r9
 80076b2:	1b2d      	subs	r5, r5, r4
 80076b4:	1963      	adds	r3, r4, r5
 80076b6:	42bb      	cmp	r3, r7
 80076b8:	db04      	blt.n	80076c4 <__s2b+0x78>
 80076ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076be:	340a      	adds	r4, #10
 80076c0:	2509      	movs	r5, #9
 80076c2:	e7f6      	b.n	80076b2 <__s2b+0x66>
 80076c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80076c8:	4601      	mov	r1, r0
 80076ca:	3b30      	subs	r3, #48	; 0x30
 80076cc:	220a      	movs	r2, #10
 80076ce:	4630      	mov	r0, r6
 80076d0:	f7ff ff72 	bl	80075b8 <__multadd>
 80076d4:	e7ee      	b.n	80076b4 <__s2b+0x68>
 80076d6:	bf00      	nop
 80076d8:	080090ec 	.word	0x080090ec
 80076dc:	0800917c 	.word	0x0800917c

080076e0 <__hi0bits>:
 80076e0:	0c03      	lsrs	r3, r0, #16
 80076e2:	041b      	lsls	r3, r3, #16
 80076e4:	b9d3      	cbnz	r3, 800771c <__hi0bits+0x3c>
 80076e6:	0400      	lsls	r0, r0, #16
 80076e8:	2310      	movs	r3, #16
 80076ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80076ee:	bf04      	itt	eq
 80076f0:	0200      	lsleq	r0, r0, #8
 80076f2:	3308      	addeq	r3, #8
 80076f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80076f8:	bf04      	itt	eq
 80076fa:	0100      	lsleq	r0, r0, #4
 80076fc:	3304      	addeq	r3, #4
 80076fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007702:	bf04      	itt	eq
 8007704:	0080      	lsleq	r0, r0, #2
 8007706:	3302      	addeq	r3, #2
 8007708:	2800      	cmp	r0, #0
 800770a:	db05      	blt.n	8007718 <__hi0bits+0x38>
 800770c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007710:	f103 0301 	add.w	r3, r3, #1
 8007714:	bf08      	it	eq
 8007716:	2320      	moveq	r3, #32
 8007718:	4618      	mov	r0, r3
 800771a:	4770      	bx	lr
 800771c:	2300      	movs	r3, #0
 800771e:	e7e4      	b.n	80076ea <__hi0bits+0xa>

08007720 <__lo0bits>:
 8007720:	6803      	ldr	r3, [r0, #0]
 8007722:	f013 0207 	ands.w	r2, r3, #7
 8007726:	4601      	mov	r1, r0
 8007728:	d00b      	beq.n	8007742 <__lo0bits+0x22>
 800772a:	07da      	lsls	r2, r3, #31
 800772c:	d424      	bmi.n	8007778 <__lo0bits+0x58>
 800772e:	0798      	lsls	r0, r3, #30
 8007730:	bf49      	itett	mi
 8007732:	085b      	lsrmi	r3, r3, #1
 8007734:	089b      	lsrpl	r3, r3, #2
 8007736:	2001      	movmi	r0, #1
 8007738:	600b      	strmi	r3, [r1, #0]
 800773a:	bf5c      	itt	pl
 800773c:	600b      	strpl	r3, [r1, #0]
 800773e:	2002      	movpl	r0, #2
 8007740:	4770      	bx	lr
 8007742:	b298      	uxth	r0, r3
 8007744:	b9b0      	cbnz	r0, 8007774 <__lo0bits+0x54>
 8007746:	0c1b      	lsrs	r3, r3, #16
 8007748:	2010      	movs	r0, #16
 800774a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800774e:	bf04      	itt	eq
 8007750:	0a1b      	lsreq	r3, r3, #8
 8007752:	3008      	addeq	r0, #8
 8007754:	071a      	lsls	r2, r3, #28
 8007756:	bf04      	itt	eq
 8007758:	091b      	lsreq	r3, r3, #4
 800775a:	3004      	addeq	r0, #4
 800775c:	079a      	lsls	r2, r3, #30
 800775e:	bf04      	itt	eq
 8007760:	089b      	lsreq	r3, r3, #2
 8007762:	3002      	addeq	r0, #2
 8007764:	07da      	lsls	r2, r3, #31
 8007766:	d403      	bmi.n	8007770 <__lo0bits+0x50>
 8007768:	085b      	lsrs	r3, r3, #1
 800776a:	f100 0001 	add.w	r0, r0, #1
 800776e:	d005      	beq.n	800777c <__lo0bits+0x5c>
 8007770:	600b      	str	r3, [r1, #0]
 8007772:	4770      	bx	lr
 8007774:	4610      	mov	r0, r2
 8007776:	e7e8      	b.n	800774a <__lo0bits+0x2a>
 8007778:	2000      	movs	r0, #0
 800777a:	4770      	bx	lr
 800777c:	2020      	movs	r0, #32
 800777e:	4770      	bx	lr

08007780 <__i2b>:
 8007780:	b510      	push	{r4, lr}
 8007782:	460c      	mov	r4, r1
 8007784:	2101      	movs	r1, #1
 8007786:	f7ff feb5 	bl	80074f4 <_Balloc>
 800778a:	4602      	mov	r2, r0
 800778c:	b928      	cbnz	r0, 800779a <__i2b+0x1a>
 800778e:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <__i2b+0x24>)
 8007790:	4805      	ldr	r0, [pc, #20]	; (80077a8 <__i2b+0x28>)
 8007792:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007796:	f000 fdb7 	bl	8008308 <__assert_func>
 800779a:	2301      	movs	r3, #1
 800779c:	6144      	str	r4, [r0, #20]
 800779e:	6103      	str	r3, [r0, #16]
 80077a0:	bd10      	pop	{r4, pc}
 80077a2:	bf00      	nop
 80077a4:	080090ec 	.word	0x080090ec
 80077a8:	0800917c 	.word	0x0800917c

080077ac <__multiply>:
 80077ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b0:	4614      	mov	r4, r2
 80077b2:	690a      	ldr	r2, [r1, #16]
 80077b4:	6923      	ldr	r3, [r4, #16]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	bfb8      	it	lt
 80077ba:	460b      	movlt	r3, r1
 80077bc:	460d      	mov	r5, r1
 80077be:	bfbc      	itt	lt
 80077c0:	4625      	movlt	r5, r4
 80077c2:	461c      	movlt	r4, r3
 80077c4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80077c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80077cc:	68ab      	ldr	r3, [r5, #8]
 80077ce:	6869      	ldr	r1, [r5, #4]
 80077d0:	eb0a 0709 	add.w	r7, sl, r9
 80077d4:	42bb      	cmp	r3, r7
 80077d6:	b085      	sub	sp, #20
 80077d8:	bfb8      	it	lt
 80077da:	3101      	addlt	r1, #1
 80077dc:	f7ff fe8a 	bl	80074f4 <_Balloc>
 80077e0:	b930      	cbnz	r0, 80077f0 <__multiply+0x44>
 80077e2:	4602      	mov	r2, r0
 80077e4:	4b42      	ldr	r3, [pc, #264]	; (80078f0 <__multiply+0x144>)
 80077e6:	4843      	ldr	r0, [pc, #268]	; (80078f4 <__multiply+0x148>)
 80077e8:	f240 115d 	movw	r1, #349	; 0x15d
 80077ec:	f000 fd8c 	bl	8008308 <__assert_func>
 80077f0:	f100 0614 	add.w	r6, r0, #20
 80077f4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80077f8:	4633      	mov	r3, r6
 80077fa:	2200      	movs	r2, #0
 80077fc:	4543      	cmp	r3, r8
 80077fe:	d31e      	bcc.n	800783e <__multiply+0x92>
 8007800:	f105 0c14 	add.w	ip, r5, #20
 8007804:	f104 0314 	add.w	r3, r4, #20
 8007808:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800780c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007810:	9202      	str	r2, [sp, #8]
 8007812:	ebac 0205 	sub.w	r2, ip, r5
 8007816:	3a15      	subs	r2, #21
 8007818:	f022 0203 	bic.w	r2, r2, #3
 800781c:	3204      	adds	r2, #4
 800781e:	f105 0115 	add.w	r1, r5, #21
 8007822:	458c      	cmp	ip, r1
 8007824:	bf38      	it	cc
 8007826:	2204      	movcc	r2, #4
 8007828:	9201      	str	r2, [sp, #4]
 800782a:	9a02      	ldr	r2, [sp, #8]
 800782c:	9303      	str	r3, [sp, #12]
 800782e:	429a      	cmp	r2, r3
 8007830:	d808      	bhi.n	8007844 <__multiply+0x98>
 8007832:	2f00      	cmp	r7, #0
 8007834:	dc55      	bgt.n	80078e2 <__multiply+0x136>
 8007836:	6107      	str	r7, [r0, #16]
 8007838:	b005      	add	sp, #20
 800783a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800783e:	f843 2b04 	str.w	r2, [r3], #4
 8007842:	e7db      	b.n	80077fc <__multiply+0x50>
 8007844:	f8b3 a000 	ldrh.w	sl, [r3]
 8007848:	f1ba 0f00 	cmp.w	sl, #0
 800784c:	d020      	beq.n	8007890 <__multiply+0xe4>
 800784e:	f105 0e14 	add.w	lr, r5, #20
 8007852:	46b1      	mov	r9, r6
 8007854:	2200      	movs	r2, #0
 8007856:	f85e 4b04 	ldr.w	r4, [lr], #4
 800785a:	f8d9 b000 	ldr.w	fp, [r9]
 800785e:	b2a1      	uxth	r1, r4
 8007860:	fa1f fb8b 	uxth.w	fp, fp
 8007864:	fb0a b101 	mla	r1, sl, r1, fp
 8007868:	4411      	add	r1, r2
 800786a:	f8d9 2000 	ldr.w	r2, [r9]
 800786e:	0c24      	lsrs	r4, r4, #16
 8007870:	0c12      	lsrs	r2, r2, #16
 8007872:	fb0a 2404 	mla	r4, sl, r4, r2
 8007876:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800787a:	b289      	uxth	r1, r1
 800787c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007880:	45f4      	cmp	ip, lr
 8007882:	f849 1b04 	str.w	r1, [r9], #4
 8007886:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800788a:	d8e4      	bhi.n	8007856 <__multiply+0xaa>
 800788c:	9901      	ldr	r1, [sp, #4]
 800788e:	5072      	str	r2, [r6, r1]
 8007890:	9a03      	ldr	r2, [sp, #12]
 8007892:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007896:	3304      	adds	r3, #4
 8007898:	f1b9 0f00 	cmp.w	r9, #0
 800789c:	d01f      	beq.n	80078de <__multiply+0x132>
 800789e:	6834      	ldr	r4, [r6, #0]
 80078a0:	f105 0114 	add.w	r1, r5, #20
 80078a4:	46b6      	mov	lr, r6
 80078a6:	f04f 0a00 	mov.w	sl, #0
 80078aa:	880a      	ldrh	r2, [r1, #0]
 80078ac:	f8be b002 	ldrh.w	fp, [lr, #2]
 80078b0:	fb09 b202 	mla	r2, r9, r2, fp
 80078b4:	4492      	add	sl, r2
 80078b6:	b2a4      	uxth	r4, r4
 80078b8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80078bc:	f84e 4b04 	str.w	r4, [lr], #4
 80078c0:	f851 4b04 	ldr.w	r4, [r1], #4
 80078c4:	f8be 2000 	ldrh.w	r2, [lr]
 80078c8:	0c24      	lsrs	r4, r4, #16
 80078ca:	fb09 2404 	mla	r4, r9, r4, r2
 80078ce:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80078d2:	458c      	cmp	ip, r1
 80078d4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80078d8:	d8e7      	bhi.n	80078aa <__multiply+0xfe>
 80078da:	9a01      	ldr	r2, [sp, #4]
 80078dc:	50b4      	str	r4, [r6, r2]
 80078de:	3604      	adds	r6, #4
 80078e0:	e7a3      	b.n	800782a <__multiply+0x7e>
 80078e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1a5      	bne.n	8007836 <__multiply+0x8a>
 80078ea:	3f01      	subs	r7, #1
 80078ec:	e7a1      	b.n	8007832 <__multiply+0x86>
 80078ee:	bf00      	nop
 80078f0:	080090ec 	.word	0x080090ec
 80078f4:	0800917c 	.word	0x0800917c

080078f8 <__pow5mult>:
 80078f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078fc:	4615      	mov	r5, r2
 80078fe:	f012 0203 	ands.w	r2, r2, #3
 8007902:	4606      	mov	r6, r0
 8007904:	460f      	mov	r7, r1
 8007906:	d007      	beq.n	8007918 <__pow5mult+0x20>
 8007908:	4c25      	ldr	r4, [pc, #148]	; (80079a0 <__pow5mult+0xa8>)
 800790a:	3a01      	subs	r2, #1
 800790c:	2300      	movs	r3, #0
 800790e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007912:	f7ff fe51 	bl	80075b8 <__multadd>
 8007916:	4607      	mov	r7, r0
 8007918:	10ad      	asrs	r5, r5, #2
 800791a:	d03d      	beq.n	8007998 <__pow5mult+0xa0>
 800791c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800791e:	b97c      	cbnz	r4, 8007940 <__pow5mult+0x48>
 8007920:	2010      	movs	r0, #16
 8007922:	f7ff fdbf 	bl	80074a4 <malloc>
 8007926:	4602      	mov	r2, r0
 8007928:	6270      	str	r0, [r6, #36]	; 0x24
 800792a:	b928      	cbnz	r0, 8007938 <__pow5mult+0x40>
 800792c:	4b1d      	ldr	r3, [pc, #116]	; (80079a4 <__pow5mult+0xac>)
 800792e:	481e      	ldr	r0, [pc, #120]	; (80079a8 <__pow5mult+0xb0>)
 8007930:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007934:	f000 fce8 	bl	8008308 <__assert_func>
 8007938:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800793c:	6004      	str	r4, [r0, #0]
 800793e:	60c4      	str	r4, [r0, #12]
 8007940:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007944:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007948:	b94c      	cbnz	r4, 800795e <__pow5mult+0x66>
 800794a:	f240 2171 	movw	r1, #625	; 0x271
 800794e:	4630      	mov	r0, r6
 8007950:	f7ff ff16 	bl	8007780 <__i2b>
 8007954:	2300      	movs	r3, #0
 8007956:	f8c8 0008 	str.w	r0, [r8, #8]
 800795a:	4604      	mov	r4, r0
 800795c:	6003      	str	r3, [r0, #0]
 800795e:	f04f 0900 	mov.w	r9, #0
 8007962:	07eb      	lsls	r3, r5, #31
 8007964:	d50a      	bpl.n	800797c <__pow5mult+0x84>
 8007966:	4639      	mov	r1, r7
 8007968:	4622      	mov	r2, r4
 800796a:	4630      	mov	r0, r6
 800796c:	f7ff ff1e 	bl	80077ac <__multiply>
 8007970:	4639      	mov	r1, r7
 8007972:	4680      	mov	r8, r0
 8007974:	4630      	mov	r0, r6
 8007976:	f7ff fdfd 	bl	8007574 <_Bfree>
 800797a:	4647      	mov	r7, r8
 800797c:	106d      	asrs	r5, r5, #1
 800797e:	d00b      	beq.n	8007998 <__pow5mult+0xa0>
 8007980:	6820      	ldr	r0, [r4, #0]
 8007982:	b938      	cbnz	r0, 8007994 <__pow5mult+0x9c>
 8007984:	4622      	mov	r2, r4
 8007986:	4621      	mov	r1, r4
 8007988:	4630      	mov	r0, r6
 800798a:	f7ff ff0f 	bl	80077ac <__multiply>
 800798e:	6020      	str	r0, [r4, #0]
 8007990:	f8c0 9000 	str.w	r9, [r0]
 8007994:	4604      	mov	r4, r0
 8007996:	e7e4      	b.n	8007962 <__pow5mult+0x6a>
 8007998:	4638      	mov	r0, r7
 800799a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800799e:	bf00      	nop
 80079a0:	080092d0 	.word	0x080092d0
 80079a4:	08009076 	.word	0x08009076
 80079a8:	0800917c 	.word	0x0800917c

080079ac <__lshift>:
 80079ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b0:	460c      	mov	r4, r1
 80079b2:	6849      	ldr	r1, [r1, #4]
 80079b4:	6923      	ldr	r3, [r4, #16]
 80079b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80079ba:	68a3      	ldr	r3, [r4, #8]
 80079bc:	4607      	mov	r7, r0
 80079be:	4691      	mov	r9, r2
 80079c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80079c4:	f108 0601 	add.w	r6, r8, #1
 80079c8:	42b3      	cmp	r3, r6
 80079ca:	db0b      	blt.n	80079e4 <__lshift+0x38>
 80079cc:	4638      	mov	r0, r7
 80079ce:	f7ff fd91 	bl	80074f4 <_Balloc>
 80079d2:	4605      	mov	r5, r0
 80079d4:	b948      	cbnz	r0, 80079ea <__lshift+0x3e>
 80079d6:	4602      	mov	r2, r0
 80079d8:	4b28      	ldr	r3, [pc, #160]	; (8007a7c <__lshift+0xd0>)
 80079da:	4829      	ldr	r0, [pc, #164]	; (8007a80 <__lshift+0xd4>)
 80079dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80079e0:	f000 fc92 	bl	8008308 <__assert_func>
 80079e4:	3101      	adds	r1, #1
 80079e6:	005b      	lsls	r3, r3, #1
 80079e8:	e7ee      	b.n	80079c8 <__lshift+0x1c>
 80079ea:	2300      	movs	r3, #0
 80079ec:	f100 0114 	add.w	r1, r0, #20
 80079f0:	f100 0210 	add.w	r2, r0, #16
 80079f4:	4618      	mov	r0, r3
 80079f6:	4553      	cmp	r3, sl
 80079f8:	db33      	blt.n	8007a62 <__lshift+0xb6>
 80079fa:	6920      	ldr	r0, [r4, #16]
 80079fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a00:	f104 0314 	add.w	r3, r4, #20
 8007a04:	f019 091f 	ands.w	r9, r9, #31
 8007a08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a10:	d02b      	beq.n	8007a6a <__lshift+0xbe>
 8007a12:	f1c9 0e20 	rsb	lr, r9, #32
 8007a16:	468a      	mov	sl, r1
 8007a18:	2200      	movs	r2, #0
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	fa00 f009 	lsl.w	r0, r0, r9
 8007a20:	4302      	orrs	r2, r0
 8007a22:	f84a 2b04 	str.w	r2, [sl], #4
 8007a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a2a:	459c      	cmp	ip, r3
 8007a2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a30:	d8f3      	bhi.n	8007a1a <__lshift+0x6e>
 8007a32:	ebac 0304 	sub.w	r3, ip, r4
 8007a36:	3b15      	subs	r3, #21
 8007a38:	f023 0303 	bic.w	r3, r3, #3
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	f104 0015 	add.w	r0, r4, #21
 8007a42:	4584      	cmp	ip, r0
 8007a44:	bf38      	it	cc
 8007a46:	2304      	movcc	r3, #4
 8007a48:	50ca      	str	r2, [r1, r3]
 8007a4a:	b10a      	cbz	r2, 8007a50 <__lshift+0xa4>
 8007a4c:	f108 0602 	add.w	r6, r8, #2
 8007a50:	3e01      	subs	r6, #1
 8007a52:	4638      	mov	r0, r7
 8007a54:	612e      	str	r6, [r5, #16]
 8007a56:	4621      	mov	r1, r4
 8007a58:	f7ff fd8c 	bl	8007574 <_Bfree>
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a62:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a66:	3301      	adds	r3, #1
 8007a68:	e7c5      	b.n	80079f6 <__lshift+0x4a>
 8007a6a:	3904      	subs	r1, #4
 8007a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a70:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a74:	459c      	cmp	ip, r3
 8007a76:	d8f9      	bhi.n	8007a6c <__lshift+0xc0>
 8007a78:	e7ea      	b.n	8007a50 <__lshift+0xa4>
 8007a7a:	bf00      	nop
 8007a7c:	080090ec 	.word	0x080090ec
 8007a80:	0800917c 	.word	0x0800917c

08007a84 <__mcmp>:
 8007a84:	b530      	push	{r4, r5, lr}
 8007a86:	6902      	ldr	r2, [r0, #16]
 8007a88:	690c      	ldr	r4, [r1, #16]
 8007a8a:	1b12      	subs	r2, r2, r4
 8007a8c:	d10e      	bne.n	8007aac <__mcmp+0x28>
 8007a8e:	f100 0314 	add.w	r3, r0, #20
 8007a92:	3114      	adds	r1, #20
 8007a94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007aa0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007aa4:	42a5      	cmp	r5, r4
 8007aa6:	d003      	beq.n	8007ab0 <__mcmp+0x2c>
 8007aa8:	d305      	bcc.n	8007ab6 <__mcmp+0x32>
 8007aaa:	2201      	movs	r2, #1
 8007aac:	4610      	mov	r0, r2
 8007aae:	bd30      	pop	{r4, r5, pc}
 8007ab0:	4283      	cmp	r3, r0
 8007ab2:	d3f3      	bcc.n	8007a9c <__mcmp+0x18>
 8007ab4:	e7fa      	b.n	8007aac <__mcmp+0x28>
 8007ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aba:	e7f7      	b.n	8007aac <__mcmp+0x28>

08007abc <__mdiff>:
 8007abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	4606      	mov	r6, r0
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	4617      	mov	r7, r2
 8007aca:	f7ff ffdb 	bl	8007a84 <__mcmp>
 8007ace:	1e05      	subs	r5, r0, #0
 8007ad0:	d110      	bne.n	8007af4 <__mdiff+0x38>
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f7ff fd0d 	bl	80074f4 <_Balloc>
 8007ada:	b930      	cbnz	r0, 8007aea <__mdiff+0x2e>
 8007adc:	4b39      	ldr	r3, [pc, #228]	; (8007bc4 <__mdiff+0x108>)
 8007ade:	4602      	mov	r2, r0
 8007ae0:	f240 2132 	movw	r1, #562	; 0x232
 8007ae4:	4838      	ldr	r0, [pc, #224]	; (8007bc8 <__mdiff+0x10c>)
 8007ae6:	f000 fc0f 	bl	8008308 <__assert_func>
 8007aea:	2301      	movs	r3, #1
 8007aec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007af0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af4:	bfa4      	itt	ge
 8007af6:	463b      	movge	r3, r7
 8007af8:	4627      	movge	r7, r4
 8007afa:	4630      	mov	r0, r6
 8007afc:	6879      	ldr	r1, [r7, #4]
 8007afe:	bfa6      	itte	ge
 8007b00:	461c      	movge	r4, r3
 8007b02:	2500      	movge	r5, #0
 8007b04:	2501      	movlt	r5, #1
 8007b06:	f7ff fcf5 	bl	80074f4 <_Balloc>
 8007b0a:	b920      	cbnz	r0, 8007b16 <__mdiff+0x5a>
 8007b0c:	4b2d      	ldr	r3, [pc, #180]	; (8007bc4 <__mdiff+0x108>)
 8007b0e:	4602      	mov	r2, r0
 8007b10:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b14:	e7e6      	b.n	8007ae4 <__mdiff+0x28>
 8007b16:	693e      	ldr	r6, [r7, #16]
 8007b18:	60c5      	str	r5, [r0, #12]
 8007b1a:	6925      	ldr	r5, [r4, #16]
 8007b1c:	f107 0114 	add.w	r1, r7, #20
 8007b20:	f104 0914 	add.w	r9, r4, #20
 8007b24:	f100 0e14 	add.w	lr, r0, #20
 8007b28:	f107 0210 	add.w	r2, r7, #16
 8007b2c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007b30:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007b34:	46f2      	mov	sl, lr
 8007b36:	2700      	movs	r7, #0
 8007b38:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007b40:	fa1f f883 	uxth.w	r8, r3
 8007b44:	fa17 f78b 	uxtah	r7, r7, fp
 8007b48:	0c1b      	lsrs	r3, r3, #16
 8007b4a:	eba7 0808 	sub.w	r8, r7, r8
 8007b4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007b52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007b56:	fa1f f888 	uxth.w	r8, r8
 8007b5a:	141f      	asrs	r7, r3, #16
 8007b5c:	454d      	cmp	r5, r9
 8007b5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b62:	f84a 3b04 	str.w	r3, [sl], #4
 8007b66:	d8e7      	bhi.n	8007b38 <__mdiff+0x7c>
 8007b68:	1b2b      	subs	r3, r5, r4
 8007b6a:	3b15      	subs	r3, #21
 8007b6c:	f023 0303 	bic.w	r3, r3, #3
 8007b70:	3304      	adds	r3, #4
 8007b72:	3415      	adds	r4, #21
 8007b74:	42a5      	cmp	r5, r4
 8007b76:	bf38      	it	cc
 8007b78:	2304      	movcc	r3, #4
 8007b7a:	4419      	add	r1, r3
 8007b7c:	4473      	add	r3, lr
 8007b7e:	469e      	mov	lr, r3
 8007b80:	460d      	mov	r5, r1
 8007b82:	4565      	cmp	r5, ip
 8007b84:	d30e      	bcc.n	8007ba4 <__mdiff+0xe8>
 8007b86:	f10c 0203 	add.w	r2, ip, #3
 8007b8a:	1a52      	subs	r2, r2, r1
 8007b8c:	f022 0203 	bic.w	r2, r2, #3
 8007b90:	3903      	subs	r1, #3
 8007b92:	458c      	cmp	ip, r1
 8007b94:	bf38      	it	cc
 8007b96:	2200      	movcc	r2, #0
 8007b98:	441a      	add	r2, r3
 8007b9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b9e:	b17b      	cbz	r3, 8007bc0 <__mdiff+0x104>
 8007ba0:	6106      	str	r6, [r0, #16]
 8007ba2:	e7a5      	b.n	8007af0 <__mdiff+0x34>
 8007ba4:	f855 8b04 	ldr.w	r8, [r5], #4
 8007ba8:	fa17 f488 	uxtah	r4, r7, r8
 8007bac:	1422      	asrs	r2, r4, #16
 8007bae:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007bb2:	b2a4      	uxth	r4, r4
 8007bb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007bb8:	f84e 4b04 	str.w	r4, [lr], #4
 8007bbc:	1417      	asrs	r7, r2, #16
 8007bbe:	e7e0      	b.n	8007b82 <__mdiff+0xc6>
 8007bc0:	3e01      	subs	r6, #1
 8007bc2:	e7ea      	b.n	8007b9a <__mdiff+0xde>
 8007bc4:	080090ec 	.word	0x080090ec
 8007bc8:	0800917c 	.word	0x0800917c

08007bcc <__ulp>:
 8007bcc:	b082      	sub	sp, #8
 8007bce:	ed8d 0b00 	vstr	d0, [sp]
 8007bd2:	9b01      	ldr	r3, [sp, #4]
 8007bd4:	4912      	ldr	r1, [pc, #72]	; (8007c20 <__ulp+0x54>)
 8007bd6:	4019      	ands	r1, r3
 8007bd8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007bdc:	2900      	cmp	r1, #0
 8007bde:	dd05      	ble.n	8007bec <__ulp+0x20>
 8007be0:	2200      	movs	r2, #0
 8007be2:	460b      	mov	r3, r1
 8007be4:	ec43 2b10 	vmov	d0, r2, r3
 8007be8:	b002      	add	sp, #8
 8007bea:	4770      	bx	lr
 8007bec:	4249      	negs	r1, r1
 8007bee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007bf2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007bf6:	f04f 0200 	mov.w	r2, #0
 8007bfa:	f04f 0300 	mov.w	r3, #0
 8007bfe:	da04      	bge.n	8007c0a <__ulp+0x3e>
 8007c00:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007c04:	fa41 f300 	asr.w	r3, r1, r0
 8007c08:	e7ec      	b.n	8007be4 <__ulp+0x18>
 8007c0a:	f1a0 0114 	sub.w	r1, r0, #20
 8007c0e:	291e      	cmp	r1, #30
 8007c10:	bfda      	itte	le
 8007c12:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007c16:	fa20 f101 	lsrle.w	r1, r0, r1
 8007c1a:	2101      	movgt	r1, #1
 8007c1c:	460a      	mov	r2, r1
 8007c1e:	e7e1      	b.n	8007be4 <__ulp+0x18>
 8007c20:	7ff00000 	.word	0x7ff00000

08007c24 <__b2d>:
 8007c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c26:	6905      	ldr	r5, [r0, #16]
 8007c28:	f100 0714 	add.w	r7, r0, #20
 8007c2c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007c30:	1f2e      	subs	r6, r5, #4
 8007c32:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007c36:	4620      	mov	r0, r4
 8007c38:	f7ff fd52 	bl	80076e0 <__hi0bits>
 8007c3c:	f1c0 0320 	rsb	r3, r0, #32
 8007c40:	280a      	cmp	r0, #10
 8007c42:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007cc0 <__b2d+0x9c>
 8007c46:	600b      	str	r3, [r1, #0]
 8007c48:	dc14      	bgt.n	8007c74 <__b2d+0x50>
 8007c4a:	f1c0 0e0b 	rsb	lr, r0, #11
 8007c4e:	fa24 f10e 	lsr.w	r1, r4, lr
 8007c52:	42b7      	cmp	r7, r6
 8007c54:	ea41 030c 	orr.w	r3, r1, ip
 8007c58:	bf34      	ite	cc
 8007c5a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007c5e:	2100      	movcs	r1, #0
 8007c60:	3015      	adds	r0, #21
 8007c62:	fa04 f000 	lsl.w	r0, r4, r0
 8007c66:	fa21 f10e 	lsr.w	r1, r1, lr
 8007c6a:	ea40 0201 	orr.w	r2, r0, r1
 8007c6e:	ec43 2b10 	vmov	d0, r2, r3
 8007c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c74:	42b7      	cmp	r7, r6
 8007c76:	bf3a      	itte	cc
 8007c78:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007c7c:	f1a5 0608 	subcc.w	r6, r5, #8
 8007c80:	2100      	movcs	r1, #0
 8007c82:	380b      	subs	r0, #11
 8007c84:	d017      	beq.n	8007cb6 <__b2d+0x92>
 8007c86:	f1c0 0c20 	rsb	ip, r0, #32
 8007c8a:	fa04 f500 	lsl.w	r5, r4, r0
 8007c8e:	42be      	cmp	r6, r7
 8007c90:	fa21 f40c 	lsr.w	r4, r1, ip
 8007c94:	ea45 0504 	orr.w	r5, r5, r4
 8007c98:	bf8c      	ite	hi
 8007c9a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007c9e:	2400      	movls	r4, #0
 8007ca0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007ca4:	fa01 f000 	lsl.w	r0, r1, r0
 8007ca8:	fa24 f40c 	lsr.w	r4, r4, ip
 8007cac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007cb0:	ea40 0204 	orr.w	r2, r0, r4
 8007cb4:	e7db      	b.n	8007c6e <__b2d+0x4a>
 8007cb6:	ea44 030c 	orr.w	r3, r4, ip
 8007cba:	460a      	mov	r2, r1
 8007cbc:	e7d7      	b.n	8007c6e <__b2d+0x4a>
 8007cbe:	bf00      	nop
 8007cc0:	3ff00000 	.word	0x3ff00000

08007cc4 <__d2b>:
 8007cc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007cc8:	4689      	mov	r9, r1
 8007cca:	2101      	movs	r1, #1
 8007ccc:	ec57 6b10 	vmov	r6, r7, d0
 8007cd0:	4690      	mov	r8, r2
 8007cd2:	f7ff fc0f 	bl	80074f4 <_Balloc>
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	b930      	cbnz	r0, 8007ce8 <__d2b+0x24>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	4b25      	ldr	r3, [pc, #148]	; (8007d74 <__d2b+0xb0>)
 8007cde:	4826      	ldr	r0, [pc, #152]	; (8007d78 <__d2b+0xb4>)
 8007ce0:	f240 310a 	movw	r1, #778	; 0x30a
 8007ce4:	f000 fb10 	bl	8008308 <__assert_func>
 8007ce8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007cec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007cf0:	bb35      	cbnz	r5, 8007d40 <__d2b+0x7c>
 8007cf2:	2e00      	cmp	r6, #0
 8007cf4:	9301      	str	r3, [sp, #4]
 8007cf6:	d028      	beq.n	8007d4a <__d2b+0x86>
 8007cf8:	4668      	mov	r0, sp
 8007cfa:	9600      	str	r6, [sp, #0]
 8007cfc:	f7ff fd10 	bl	8007720 <__lo0bits>
 8007d00:	9900      	ldr	r1, [sp, #0]
 8007d02:	b300      	cbz	r0, 8007d46 <__d2b+0x82>
 8007d04:	9a01      	ldr	r2, [sp, #4]
 8007d06:	f1c0 0320 	rsb	r3, r0, #32
 8007d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0e:	430b      	orrs	r3, r1
 8007d10:	40c2      	lsrs	r2, r0
 8007d12:	6163      	str	r3, [r4, #20]
 8007d14:	9201      	str	r2, [sp, #4]
 8007d16:	9b01      	ldr	r3, [sp, #4]
 8007d18:	61a3      	str	r3, [r4, #24]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	bf14      	ite	ne
 8007d1e:	2202      	movne	r2, #2
 8007d20:	2201      	moveq	r2, #1
 8007d22:	6122      	str	r2, [r4, #16]
 8007d24:	b1d5      	cbz	r5, 8007d5c <__d2b+0x98>
 8007d26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d2a:	4405      	add	r5, r0
 8007d2c:	f8c9 5000 	str.w	r5, [r9]
 8007d30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d34:	f8c8 0000 	str.w	r0, [r8]
 8007d38:	4620      	mov	r0, r4
 8007d3a:	b003      	add	sp, #12
 8007d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d44:	e7d5      	b.n	8007cf2 <__d2b+0x2e>
 8007d46:	6161      	str	r1, [r4, #20]
 8007d48:	e7e5      	b.n	8007d16 <__d2b+0x52>
 8007d4a:	a801      	add	r0, sp, #4
 8007d4c:	f7ff fce8 	bl	8007720 <__lo0bits>
 8007d50:	9b01      	ldr	r3, [sp, #4]
 8007d52:	6163      	str	r3, [r4, #20]
 8007d54:	2201      	movs	r2, #1
 8007d56:	6122      	str	r2, [r4, #16]
 8007d58:	3020      	adds	r0, #32
 8007d5a:	e7e3      	b.n	8007d24 <__d2b+0x60>
 8007d5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d64:	f8c9 0000 	str.w	r0, [r9]
 8007d68:	6918      	ldr	r0, [r3, #16]
 8007d6a:	f7ff fcb9 	bl	80076e0 <__hi0bits>
 8007d6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d72:	e7df      	b.n	8007d34 <__d2b+0x70>
 8007d74:	080090ec 	.word	0x080090ec
 8007d78:	0800917c 	.word	0x0800917c

08007d7c <__ratio>:
 8007d7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d80:	468a      	mov	sl, r1
 8007d82:	4669      	mov	r1, sp
 8007d84:	4683      	mov	fp, r0
 8007d86:	f7ff ff4d 	bl	8007c24 <__b2d>
 8007d8a:	a901      	add	r1, sp, #4
 8007d8c:	4650      	mov	r0, sl
 8007d8e:	ec59 8b10 	vmov	r8, r9, d0
 8007d92:	ee10 6a10 	vmov	r6, s0
 8007d96:	f7ff ff45 	bl	8007c24 <__b2d>
 8007d9a:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007d9e:	f8da 2010 	ldr.w	r2, [sl, #16]
 8007da2:	eba3 0c02 	sub.w	ip, r3, r2
 8007da6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007daa:	1a9b      	subs	r3, r3, r2
 8007dac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007db0:	ec55 4b10 	vmov	r4, r5, d0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	ee10 0a10 	vmov	r0, s0
 8007dba:	bfce      	itee	gt
 8007dbc:	464a      	movgt	r2, r9
 8007dbe:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007dc2:	462a      	movle	r2, r5
 8007dc4:	464f      	mov	r7, r9
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	bfcc      	ite	gt
 8007dca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007dce:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007dd2:	ec47 6b17 	vmov	d7, r6, r7
 8007dd6:	ec41 0b16 	vmov	d6, r0, r1
 8007dda:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8007dde:	b003      	add	sp, #12
 8007de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007de4 <__copybits>:
 8007de4:	3901      	subs	r1, #1
 8007de6:	b570      	push	{r4, r5, r6, lr}
 8007de8:	1149      	asrs	r1, r1, #5
 8007dea:	6914      	ldr	r4, [r2, #16]
 8007dec:	3101      	adds	r1, #1
 8007dee:	f102 0314 	add.w	r3, r2, #20
 8007df2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007df6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007dfa:	1f05      	subs	r5, r0, #4
 8007dfc:	42a3      	cmp	r3, r4
 8007dfe:	d30c      	bcc.n	8007e1a <__copybits+0x36>
 8007e00:	1aa3      	subs	r3, r4, r2
 8007e02:	3b11      	subs	r3, #17
 8007e04:	f023 0303 	bic.w	r3, r3, #3
 8007e08:	3211      	adds	r2, #17
 8007e0a:	42a2      	cmp	r2, r4
 8007e0c:	bf88      	it	hi
 8007e0e:	2300      	movhi	r3, #0
 8007e10:	4418      	add	r0, r3
 8007e12:	2300      	movs	r3, #0
 8007e14:	4288      	cmp	r0, r1
 8007e16:	d305      	bcc.n	8007e24 <__copybits+0x40>
 8007e18:	bd70      	pop	{r4, r5, r6, pc}
 8007e1a:	f853 6b04 	ldr.w	r6, [r3], #4
 8007e1e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007e22:	e7eb      	b.n	8007dfc <__copybits+0x18>
 8007e24:	f840 3b04 	str.w	r3, [r0], #4
 8007e28:	e7f4      	b.n	8007e14 <__copybits+0x30>

08007e2a <__any_on>:
 8007e2a:	f100 0214 	add.w	r2, r0, #20
 8007e2e:	6900      	ldr	r0, [r0, #16]
 8007e30:	114b      	asrs	r3, r1, #5
 8007e32:	4298      	cmp	r0, r3
 8007e34:	b510      	push	{r4, lr}
 8007e36:	db11      	blt.n	8007e5c <__any_on+0x32>
 8007e38:	dd0a      	ble.n	8007e50 <__any_on+0x26>
 8007e3a:	f011 011f 	ands.w	r1, r1, #31
 8007e3e:	d007      	beq.n	8007e50 <__any_on+0x26>
 8007e40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007e44:	fa24 f001 	lsr.w	r0, r4, r1
 8007e48:	fa00 f101 	lsl.w	r1, r0, r1
 8007e4c:	428c      	cmp	r4, r1
 8007e4e:	d10b      	bne.n	8007e68 <__any_on+0x3e>
 8007e50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d803      	bhi.n	8007e60 <__any_on+0x36>
 8007e58:	2000      	movs	r0, #0
 8007e5a:	bd10      	pop	{r4, pc}
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	e7f7      	b.n	8007e50 <__any_on+0x26>
 8007e60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e64:	2900      	cmp	r1, #0
 8007e66:	d0f5      	beq.n	8007e54 <__any_on+0x2a>
 8007e68:	2001      	movs	r0, #1
 8007e6a:	e7f6      	b.n	8007e5a <__any_on+0x30>

08007e6c <_calloc_r>:
 8007e6c:	b513      	push	{r0, r1, r4, lr}
 8007e6e:	434a      	muls	r2, r1
 8007e70:	4611      	mov	r1, r2
 8007e72:	9201      	str	r2, [sp, #4]
 8007e74:	f000 f85a 	bl	8007f2c <_malloc_r>
 8007e78:	4604      	mov	r4, r0
 8007e7a:	b118      	cbz	r0, 8007e84 <_calloc_r+0x18>
 8007e7c:	9a01      	ldr	r2, [sp, #4]
 8007e7e:	2100      	movs	r1, #0
 8007e80:	f7fc fc9a 	bl	80047b8 <memset>
 8007e84:	4620      	mov	r0, r4
 8007e86:	b002      	add	sp, #8
 8007e88:	bd10      	pop	{r4, pc}
	...

08007e8c <_free_r>:
 8007e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e8e:	2900      	cmp	r1, #0
 8007e90:	d048      	beq.n	8007f24 <_free_r+0x98>
 8007e92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e96:	9001      	str	r0, [sp, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f1a1 0404 	sub.w	r4, r1, #4
 8007e9e:	bfb8      	it	lt
 8007ea0:	18e4      	addlt	r4, r4, r3
 8007ea2:	f000 fa7b 	bl	800839c <__malloc_lock>
 8007ea6:	4a20      	ldr	r2, [pc, #128]	; (8007f28 <_free_r+0x9c>)
 8007ea8:	9801      	ldr	r0, [sp, #4]
 8007eaa:	6813      	ldr	r3, [r2, #0]
 8007eac:	4615      	mov	r5, r2
 8007eae:	b933      	cbnz	r3, 8007ebe <_free_r+0x32>
 8007eb0:	6063      	str	r3, [r4, #4]
 8007eb2:	6014      	str	r4, [r2, #0]
 8007eb4:	b003      	add	sp, #12
 8007eb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007eba:	f000 ba75 	b.w	80083a8 <__malloc_unlock>
 8007ebe:	42a3      	cmp	r3, r4
 8007ec0:	d90b      	bls.n	8007eda <_free_r+0x4e>
 8007ec2:	6821      	ldr	r1, [r4, #0]
 8007ec4:	1862      	adds	r2, r4, r1
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	bf04      	itt	eq
 8007eca:	681a      	ldreq	r2, [r3, #0]
 8007ecc:	685b      	ldreq	r3, [r3, #4]
 8007ece:	6063      	str	r3, [r4, #4]
 8007ed0:	bf04      	itt	eq
 8007ed2:	1852      	addeq	r2, r2, r1
 8007ed4:	6022      	streq	r2, [r4, #0]
 8007ed6:	602c      	str	r4, [r5, #0]
 8007ed8:	e7ec      	b.n	8007eb4 <_free_r+0x28>
 8007eda:	461a      	mov	r2, r3
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	b10b      	cbz	r3, 8007ee4 <_free_r+0x58>
 8007ee0:	42a3      	cmp	r3, r4
 8007ee2:	d9fa      	bls.n	8007eda <_free_r+0x4e>
 8007ee4:	6811      	ldr	r1, [r2, #0]
 8007ee6:	1855      	adds	r5, r2, r1
 8007ee8:	42a5      	cmp	r5, r4
 8007eea:	d10b      	bne.n	8007f04 <_free_r+0x78>
 8007eec:	6824      	ldr	r4, [r4, #0]
 8007eee:	4421      	add	r1, r4
 8007ef0:	1854      	adds	r4, r2, r1
 8007ef2:	42a3      	cmp	r3, r4
 8007ef4:	6011      	str	r1, [r2, #0]
 8007ef6:	d1dd      	bne.n	8007eb4 <_free_r+0x28>
 8007ef8:	681c      	ldr	r4, [r3, #0]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	6053      	str	r3, [r2, #4]
 8007efe:	4421      	add	r1, r4
 8007f00:	6011      	str	r1, [r2, #0]
 8007f02:	e7d7      	b.n	8007eb4 <_free_r+0x28>
 8007f04:	d902      	bls.n	8007f0c <_free_r+0x80>
 8007f06:	230c      	movs	r3, #12
 8007f08:	6003      	str	r3, [r0, #0]
 8007f0a:	e7d3      	b.n	8007eb4 <_free_r+0x28>
 8007f0c:	6825      	ldr	r5, [r4, #0]
 8007f0e:	1961      	adds	r1, r4, r5
 8007f10:	428b      	cmp	r3, r1
 8007f12:	bf04      	itt	eq
 8007f14:	6819      	ldreq	r1, [r3, #0]
 8007f16:	685b      	ldreq	r3, [r3, #4]
 8007f18:	6063      	str	r3, [r4, #4]
 8007f1a:	bf04      	itt	eq
 8007f1c:	1949      	addeq	r1, r1, r5
 8007f1e:	6021      	streq	r1, [r4, #0]
 8007f20:	6054      	str	r4, [r2, #4]
 8007f22:	e7c7      	b.n	8007eb4 <_free_r+0x28>
 8007f24:	b003      	add	sp, #12
 8007f26:	bd30      	pop	{r4, r5, pc}
 8007f28:	24000208 	.word	0x24000208

08007f2c <_malloc_r>:
 8007f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2e:	1ccd      	adds	r5, r1, #3
 8007f30:	f025 0503 	bic.w	r5, r5, #3
 8007f34:	3508      	adds	r5, #8
 8007f36:	2d0c      	cmp	r5, #12
 8007f38:	bf38      	it	cc
 8007f3a:	250c      	movcc	r5, #12
 8007f3c:	2d00      	cmp	r5, #0
 8007f3e:	4606      	mov	r6, r0
 8007f40:	db01      	blt.n	8007f46 <_malloc_r+0x1a>
 8007f42:	42a9      	cmp	r1, r5
 8007f44:	d903      	bls.n	8007f4e <_malloc_r+0x22>
 8007f46:	230c      	movs	r3, #12
 8007f48:	6033      	str	r3, [r6, #0]
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f4e:	f000 fa25 	bl	800839c <__malloc_lock>
 8007f52:	4921      	ldr	r1, [pc, #132]	; (8007fd8 <_malloc_r+0xac>)
 8007f54:	680a      	ldr	r2, [r1, #0]
 8007f56:	4614      	mov	r4, r2
 8007f58:	b99c      	cbnz	r4, 8007f82 <_malloc_r+0x56>
 8007f5a:	4f20      	ldr	r7, [pc, #128]	; (8007fdc <_malloc_r+0xb0>)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	b923      	cbnz	r3, 8007f6a <_malloc_r+0x3e>
 8007f60:	4621      	mov	r1, r4
 8007f62:	4630      	mov	r0, r6
 8007f64:	f000 f9a0 	bl	80082a8 <_sbrk_r>
 8007f68:	6038      	str	r0, [r7, #0]
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f000 f99b 	bl	80082a8 <_sbrk_r>
 8007f72:	1c43      	adds	r3, r0, #1
 8007f74:	d123      	bne.n	8007fbe <_malloc_r+0x92>
 8007f76:	230c      	movs	r3, #12
 8007f78:	6033      	str	r3, [r6, #0]
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	f000 fa14 	bl	80083a8 <__malloc_unlock>
 8007f80:	e7e3      	b.n	8007f4a <_malloc_r+0x1e>
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	1b5b      	subs	r3, r3, r5
 8007f86:	d417      	bmi.n	8007fb8 <_malloc_r+0x8c>
 8007f88:	2b0b      	cmp	r3, #11
 8007f8a:	d903      	bls.n	8007f94 <_malloc_r+0x68>
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	441c      	add	r4, r3
 8007f90:	6025      	str	r5, [r4, #0]
 8007f92:	e004      	b.n	8007f9e <_malloc_r+0x72>
 8007f94:	6863      	ldr	r3, [r4, #4]
 8007f96:	42a2      	cmp	r2, r4
 8007f98:	bf0c      	ite	eq
 8007f9a:	600b      	streq	r3, [r1, #0]
 8007f9c:	6053      	strne	r3, [r2, #4]
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	f000 fa02 	bl	80083a8 <__malloc_unlock>
 8007fa4:	f104 000b 	add.w	r0, r4, #11
 8007fa8:	1d23      	adds	r3, r4, #4
 8007faa:	f020 0007 	bic.w	r0, r0, #7
 8007fae:	1ac2      	subs	r2, r0, r3
 8007fb0:	d0cc      	beq.n	8007f4c <_malloc_r+0x20>
 8007fb2:	1a1b      	subs	r3, r3, r0
 8007fb4:	50a3      	str	r3, [r4, r2]
 8007fb6:	e7c9      	b.n	8007f4c <_malloc_r+0x20>
 8007fb8:	4622      	mov	r2, r4
 8007fba:	6864      	ldr	r4, [r4, #4]
 8007fbc:	e7cc      	b.n	8007f58 <_malloc_r+0x2c>
 8007fbe:	1cc4      	adds	r4, r0, #3
 8007fc0:	f024 0403 	bic.w	r4, r4, #3
 8007fc4:	42a0      	cmp	r0, r4
 8007fc6:	d0e3      	beq.n	8007f90 <_malloc_r+0x64>
 8007fc8:	1a21      	subs	r1, r4, r0
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f000 f96c 	bl	80082a8 <_sbrk_r>
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d1dd      	bne.n	8007f90 <_malloc_r+0x64>
 8007fd4:	e7cf      	b.n	8007f76 <_malloc_r+0x4a>
 8007fd6:	bf00      	nop
 8007fd8:	24000208 	.word	0x24000208
 8007fdc:	2400020c 	.word	0x2400020c

08007fe0 <__ssputs_r>:
 8007fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe4:	688e      	ldr	r6, [r1, #8]
 8007fe6:	429e      	cmp	r6, r3
 8007fe8:	4682      	mov	sl, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	4690      	mov	r8, r2
 8007fee:	461f      	mov	r7, r3
 8007ff0:	d838      	bhi.n	8008064 <__ssputs_r+0x84>
 8007ff2:	898a      	ldrh	r2, [r1, #12]
 8007ff4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ff8:	d032      	beq.n	8008060 <__ssputs_r+0x80>
 8007ffa:	6825      	ldr	r5, [r4, #0]
 8007ffc:	6909      	ldr	r1, [r1, #16]
 8007ffe:	eba5 0901 	sub.w	r9, r5, r1
 8008002:	6965      	ldr	r5, [r4, #20]
 8008004:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008008:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800800c:	3301      	adds	r3, #1
 800800e:	444b      	add	r3, r9
 8008010:	106d      	asrs	r5, r5, #1
 8008012:	429d      	cmp	r5, r3
 8008014:	bf38      	it	cc
 8008016:	461d      	movcc	r5, r3
 8008018:	0553      	lsls	r3, r2, #21
 800801a:	d531      	bpl.n	8008080 <__ssputs_r+0xa0>
 800801c:	4629      	mov	r1, r5
 800801e:	f7ff ff85 	bl	8007f2c <_malloc_r>
 8008022:	4606      	mov	r6, r0
 8008024:	b950      	cbnz	r0, 800803c <__ssputs_r+0x5c>
 8008026:	230c      	movs	r3, #12
 8008028:	f8ca 3000 	str.w	r3, [sl]
 800802c:	89a3      	ldrh	r3, [r4, #12]
 800802e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008032:	81a3      	strh	r3, [r4, #12]
 8008034:	f04f 30ff 	mov.w	r0, #4294967295
 8008038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800803c:	6921      	ldr	r1, [r4, #16]
 800803e:	464a      	mov	r2, r9
 8008040:	f7ff fa4a 	bl	80074d8 <memcpy>
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800804a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800804e:	81a3      	strh	r3, [r4, #12]
 8008050:	6126      	str	r6, [r4, #16]
 8008052:	6165      	str	r5, [r4, #20]
 8008054:	444e      	add	r6, r9
 8008056:	eba5 0509 	sub.w	r5, r5, r9
 800805a:	6026      	str	r6, [r4, #0]
 800805c:	60a5      	str	r5, [r4, #8]
 800805e:	463e      	mov	r6, r7
 8008060:	42be      	cmp	r6, r7
 8008062:	d900      	bls.n	8008066 <__ssputs_r+0x86>
 8008064:	463e      	mov	r6, r7
 8008066:	4632      	mov	r2, r6
 8008068:	6820      	ldr	r0, [r4, #0]
 800806a:	4641      	mov	r1, r8
 800806c:	f000 f97c 	bl	8008368 <memmove>
 8008070:	68a3      	ldr	r3, [r4, #8]
 8008072:	6822      	ldr	r2, [r4, #0]
 8008074:	1b9b      	subs	r3, r3, r6
 8008076:	4432      	add	r2, r6
 8008078:	60a3      	str	r3, [r4, #8]
 800807a:	6022      	str	r2, [r4, #0]
 800807c:	2000      	movs	r0, #0
 800807e:	e7db      	b.n	8008038 <__ssputs_r+0x58>
 8008080:	462a      	mov	r2, r5
 8008082:	f000 f997 	bl	80083b4 <_realloc_r>
 8008086:	4606      	mov	r6, r0
 8008088:	2800      	cmp	r0, #0
 800808a:	d1e1      	bne.n	8008050 <__ssputs_r+0x70>
 800808c:	6921      	ldr	r1, [r4, #16]
 800808e:	4650      	mov	r0, sl
 8008090:	f7ff fefc 	bl	8007e8c <_free_r>
 8008094:	e7c7      	b.n	8008026 <__ssputs_r+0x46>
	...

08008098 <_svfiprintf_r>:
 8008098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809c:	4698      	mov	r8, r3
 800809e:	898b      	ldrh	r3, [r1, #12]
 80080a0:	061b      	lsls	r3, r3, #24
 80080a2:	b09d      	sub	sp, #116	; 0x74
 80080a4:	4607      	mov	r7, r0
 80080a6:	460d      	mov	r5, r1
 80080a8:	4614      	mov	r4, r2
 80080aa:	d50e      	bpl.n	80080ca <_svfiprintf_r+0x32>
 80080ac:	690b      	ldr	r3, [r1, #16]
 80080ae:	b963      	cbnz	r3, 80080ca <_svfiprintf_r+0x32>
 80080b0:	2140      	movs	r1, #64	; 0x40
 80080b2:	f7ff ff3b 	bl	8007f2c <_malloc_r>
 80080b6:	6028      	str	r0, [r5, #0]
 80080b8:	6128      	str	r0, [r5, #16]
 80080ba:	b920      	cbnz	r0, 80080c6 <_svfiprintf_r+0x2e>
 80080bc:	230c      	movs	r3, #12
 80080be:	603b      	str	r3, [r7, #0]
 80080c0:	f04f 30ff 	mov.w	r0, #4294967295
 80080c4:	e0d1      	b.n	800826a <_svfiprintf_r+0x1d2>
 80080c6:	2340      	movs	r3, #64	; 0x40
 80080c8:	616b      	str	r3, [r5, #20]
 80080ca:	2300      	movs	r3, #0
 80080cc:	9309      	str	r3, [sp, #36]	; 0x24
 80080ce:	2320      	movs	r3, #32
 80080d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80080d8:	2330      	movs	r3, #48	; 0x30
 80080da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008284 <_svfiprintf_r+0x1ec>
 80080de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080e2:	f04f 0901 	mov.w	r9, #1
 80080e6:	4623      	mov	r3, r4
 80080e8:	469a      	mov	sl, r3
 80080ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080ee:	b10a      	cbz	r2, 80080f4 <_svfiprintf_r+0x5c>
 80080f0:	2a25      	cmp	r2, #37	; 0x25
 80080f2:	d1f9      	bne.n	80080e8 <_svfiprintf_r+0x50>
 80080f4:	ebba 0b04 	subs.w	fp, sl, r4
 80080f8:	d00b      	beq.n	8008112 <_svfiprintf_r+0x7a>
 80080fa:	465b      	mov	r3, fp
 80080fc:	4622      	mov	r2, r4
 80080fe:	4629      	mov	r1, r5
 8008100:	4638      	mov	r0, r7
 8008102:	f7ff ff6d 	bl	8007fe0 <__ssputs_r>
 8008106:	3001      	adds	r0, #1
 8008108:	f000 80aa 	beq.w	8008260 <_svfiprintf_r+0x1c8>
 800810c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800810e:	445a      	add	r2, fp
 8008110:	9209      	str	r2, [sp, #36]	; 0x24
 8008112:	f89a 3000 	ldrb.w	r3, [sl]
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 80a2 	beq.w	8008260 <_svfiprintf_r+0x1c8>
 800811c:	2300      	movs	r3, #0
 800811e:	f04f 32ff 	mov.w	r2, #4294967295
 8008122:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008126:	f10a 0a01 	add.w	sl, sl, #1
 800812a:	9304      	str	r3, [sp, #16]
 800812c:	9307      	str	r3, [sp, #28]
 800812e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008132:	931a      	str	r3, [sp, #104]	; 0x68
 8008134:	4654      	mov	r4, sl
 8008136:	2205      	movs	r2, #5
 8008138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800813c:	4851      	ldr	r0, [pc, #324]	; (8008284 <_svfiprintf_r+0x1ec>)
 800813e:	f7f8 f8d7 	bl	80002f0 <memchr>
 8008142:	9a04      	ldr	r2, [sp, #16]
 8008144:	b9d8      	cbnz	r0, 800817e <_svfiprintf_r+0xe6>
 8008146:	06d0      	lsls	r0, r2, #27
 8008148:	bf44      	itt	mi
 800814a:	2320      	movmi	r3, #32
 800814c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008150:	0711      	lsls	r1, r2, #28
 8008152:	bf44      	itt	mi
 8008154:	232b      	movmi	r3, #43	; 0x2b
 8008156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800815a:	f89a 3000 	ldrb.w	r3, [sl]
 800815e:	2b2a      	cmp	r3, #42	; 0x2a
 8008160:	d015      	beq.n	800818e <_svfiprintf_r+0xf6>
 8008162:	9a07      	ldr	r2, [sp, #28]
 8008164:	4654      	mov	r4, sl
 8008166:	2000      	movs	r0, #0
 8008168:	f04f 0c0a 	mov.w	ip, #10
 800816c:	4621      	mov	r1, r4
 800816e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008172:	3b30      	subs	r3, #48	; 0x30
 8008174:	2b09      	cmp	r3, #9
 8008176:	d94e      	bls.n	8008216 <_svfiprintf_r+0x17e>
 8008178:	b1b0      	cbz	r0, 80081a8 <_svfiprintf_r+0x110>
 800817a:	9207      	str	r2, [sp, #28]
 800817c:	e014      	b.n	80081a8 <_svfiprintf_r+0x110>
 800817e:	eba0 0308 	sub.w	r3, r0, r8
 8008182:	fa09 f303 	lsl.w	r3, r9, r3
 8008186:	4313      	orrs	r3, r2
 8008188:	9304      	str	r3, [sp, #16]
 800818a:	46a2      	mov	sl, r4
 800818c:	e7d2      	b.n	8008134 <_svfiprintf_r+0x9c>
 800818e:	9b03      	ldr	r3, [sp, #12]
 8008190:	1d19      	adds	r1, r3, #4
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	9103      	str	r1, [sp, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	bfbb      	ittet	lt
 800819a:	425b      	neglt	r3, r3
 800819c:	f042 0202 	orrlt.w	r2, r2, #2
 80081a0:	9307      	strge	r3, [sp, #28]
 80081a2:	9307      	strlt	r3, [sp, #28]
 80081a4:	bfb8      	it	lt
 80081a6:	9204      	strlt	r2, [sp, #16]
 80081a8:	7823      	ldrb	r3, [r4, #0]
 80081aa:	2b2e      	cmp	r3, #46	; 0x2e
 80081ac:	d10c      	bne.n	80081c8 <_svfiprintf_r+0x130>
 80081ae:	7863      	ldrb	r3, [r4, #1]
 80081b0:	2b2a      	cmp	r3, #42	; 0x2a
 80081b2:	d135      	bne.n	8008220 <_svfiprintf_r+0x188>
 80081b4:	9b03      	ldr	r3, [sp, #12]
 80081b6:	1d1a      	adds	r2, r3, #4
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	9203      	str	r2, [sp, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	bfb8      	it	lt
 80081c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80081c4:	3402      	adds	r4, #2
 80081c6:	9305      	str	r3, [sp, #20]
 80081c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008294 <_svfiprintf_r+0x1fc>
 80081cc:	7821      	ldrb	r1, [r4, #0]
 80081ce:	2203      	movs	r2, #3
 80081d0:	4650      	mov	r0, sl
 80081d2:	f7f8 f88d 	bl	80002f0 <memchr>
 80081d6:	b140      	cbz	r0, 80081ea <_svfiprintf_r+0x152>
 80081d8:	2340      	movs	r3, #64	; 0x40
 80081da:	eba0 000a 	sub.w	r0, r0, sl
 80081de:	fa03 f000 	lsl.w	r0, r3, r0
 80081e2:	9b04      	ldr	r3, [sp, #16]
 80081e4:	4303      	orrs	r3, r0
 80081e6:	3401      	adds	r4, #1
 80081e8:	9304      	str	r3, [sp, #16]
 80081ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ee:	4826      	ldr	r0, [pc, #152]	; (8008288 <_svfiprintf_r+0x1f0>)
 80081f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081f4:	2206      	movs	r2, #6
 80081f6:	f7f8 f87b 	bl	80002f0 <memchr>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d038      	beq.n	8008270 <_svfiprintf_r+0x1d8>
 80081fe:	4b23      	ldr	r3, [pc, #140]	; (800828c <_svfiprintf_r+0x1f4>)
 8008200:	bb1b      	cbnz	r3, 800824a <_svfiprintf_r+0x1b2>
 8008202:	9b03      	ldr	r3, [sp, #12]
 8008204:	3307      	adds	r3, #7
 8008206:	f023 0307 	bic.w	r3, r3, #7
 800820a:	3308      	adds	r3, #8
 800820c:	9303      	str	r3, [sp, #12]
 800820e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008210:	4433      	add	r3, r6
 8008212:	9309      	str	r3, [sp, #36]	; 0x24
 8008214:	e767      	b.n	80080e6 <_svfiprintf_r+0x4e>
 8008216:	fb0c 3202 	mla	r2, ip, r2, r3
 800821a:	460c      	mov	r4, r1
 800821c:	2001      	movs	r0, #1
 800821e:	e7a5      	b.n	800816c <_svfiprintf_r+0xd4>
 8008220:	2300      	movs	r3, #0
 8008222:	3401      	adds	r4, #1
 8008224:	9305      	str	r3, [sp, #20]
 8008226:	4619      	mov	r1, r3
 8008228:	f04f 0c0a 	mov.w	ip, #10
 800822c:	4620      	mov	r0, r4
 800822e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008232:	3a30      	subs	r2, #48	; 0x30
 8008234:	2a09      	cmp	r2, #9
 8008236:	d903      	bls.n	8008240 <_svfiprintf_r+0x1a8>
 8008238:	2b00      	cmp	r3, #0
 800823a:	d0c5      	beq.n	80081c8 <_svfiprintf_r+0x130>
 800823c:	9105      	str	r1, [sp, #20]
 800823e:	e7c3      	b.n	80081c8 <_svfiprintf_r+0x130>
 8008240:	fb0c 2101 	mla	r1, ip, r1, r2
 8008244:	4604      	mov	r4, r0
 8008246:	2301      	movs	r3, #1
 8008248:	e7f0      	b.n	800822c <_svfiprintf_r+0x194>
 800824a:	ab03      	add	r3, sp, #12
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	462a      	mov	r2, r5
 8008250:	4b0f      	ldr	r3, [pc, #60]	; (8008290 <_svfiprintf_r+0x1f8>)
 8008252:	a904      	add	r1, sp, #16
 8008254:	4638      	mov	r0, r7
 8008256:	f7fc fb47 	bl	80048e8 <_printf_float>
 800825a:	1c42      	adds	r2, r0, #1
 800825c:	4606      	mov	r6, r0
 800825e:	d1d6      	bne.n	800820e <_svfiprintf_r+0x176>
 8008260:	89ab      	ldrh	r3, [r5, #12]
 8008262:	065b      	lsls	r3, r3, #25
 8008264:	f53f af2c 	bmi.w	80080c0 <_svfiprintf_r+0x28>
 8008268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800826a:	b01d      	add	sp, #116	; 0x74
 800826c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008270:	ab03      	add	r3, sp, #12
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	462a      	mov	r2, r5
 8008276:	4b06      	ldr	r3, [pc, #24]	; (8008290 <_svfiprintf_r+0x1f8>)
 8008278:	a904      	add	r1, sp, #16
 800827a:	4638      	mov	r0, r7
 800827c:	f7fc fdc0 	bl	8004e00 <_printf_i>
 8008280:	e7eb      	b.n	800825a <_svfiprintf_r+0x1c2>
 8008282:	bf00      	nop
 8008284:	080092dc 	.word	0x080092dc
 8008288:	080092e6 	.word	0x080092e6
 800828c:	080048e9 	.word	0x080048e9
 8008290:	08007fe1 	.word	0x08007fe1
 8008294:	080092e2 	.word	0x080092e2

08008298 <nan>:
 8008298:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80082a0 <nan+0x8>
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	00000000 	.word	0x00000000
 80082a4:	7ff80000 	.word	0x7ff80000

080082a8 <_sbrk_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d06      	ldr	r5, [pc, #24]	; (80082c4 <_sbrk_r+0x1c>)
 80082ac:	2300      	movs	r3, #0
 80082ae:	4604      	mov	r4, r0
 80082b0:	4608      	mov	r0, r1
 80082b2:	602b      	str	r3, [r5, #0]
 80082b4:	f7f8 fd9c 	bl	8000df0 <_sbrk>
 80082b8:	1c43      	adds	r3, r0, #1
 80082ba:	d102      	bne.n	80082c2 <_sbrk_r+0x1a>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	b103      	cbz	r3, 80082c2 <_sbrk_r+0x1a>
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	bd38      	pop	{r3, r4, r5, pc}
 80082c4:	24000268 	.word	0x24000268

080082c8 <strncmp>:
 80082c8:	b510      	push	{r4, lr}
 80082ca:	b16a      	cbz	r2, 80082e8 <strncmp+0x20>
 80082cc:	3901      	subs	r1, #1
 80082ce:	1884      	adds	r4, r0, r2
 80082d0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80082d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80082d8:	4293      	cmp	r3, r2
 80082da:	d103      	bne.n	80082e4 <strncmp+0x1c>
 80082dc:	42a0      	cmp	r0, r4
 80082de:	d001      	beq.n	80082e4 <strncmp+0x1c>
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1f5      	bne.n	80082d0 <strncmp+0x8>
 80082e4:	1a98      	subs	r0, r3, r2
 80082e6:	bd10      	pop	{r4, pc}
 80082e8:	4610      	mov	r0, r2
 80082ea:	e7fc      	b.n	80082e6 <strncmp+0x1e>

080082ec <__ascii_wctomb>:
 80082ec:	b149      	cbz	r1, 8008302 <__ascii_wctomb+0x16>
 80082ee:	2aff      	cmp	r2, #255	; 0xff
 80082f0:	bf85      	ittet	hi
 80082f2:	238a      	movhi	r3, #138	; 0x8a
 80082f4:	6003      	strhi	r3, [r0, #0]
 80082f6:	700a      	strbls	r2, [r1, #0]
 80082f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80082fc:	bf98      	it	ls
 80082fe:	2001      	movls	r0, #1
 8008300:	4770      	bx	lr
 8008302:	4608      	mov	r0, r1
 8008304:	4770      	bx	lr
	...

08008308 <__assert_func>:
 8008308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800830a:	4614      	mov	r4, r2
 800830c:	461a      	mov	r2, r3
 800830e:	4b09      	ldr	r3, [pc, #36]	; (8008334 <__assert_func+0x2c>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4605      	mov	r5, r0
 8008314:	68d8      	ldr	r0, [r3, #12]
 8008316:	b14c      	cbz	r4, 800832c <__assert_func+0x24>
 8008318:	4b07      	ldr	r3, [pc, #28]	; (8008338 <__assert_func+0x30>)
 800831a:	9100      	str	r1, [sp, #0]
 800831c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008320:	4906      	ldr	r1, [pc, #24]	; (800833c <__assert_func+0x34>)
 8008322:	462b      	mov	r3, r5
 8008324:	f000 f80e 	bl	8008344 <fiprintf>
 8008328:	f000 fa84 	bl	8008834 <abort>
 800832c:	4b04      	ldr	r3, [pc, #16]	; (8008340 <__assert_func+0x38>)
 800832e:	461c      	mov	r4, r3
 8008330:	e7f3      	b.n	800831a <__assert_func+0x12>
 8008332:	bf00      	nop
 8008334:	24000014 	.word	0x24000014
 8008338:	080092ed 	.word	0x080092ed
 800833c:	080092fa 	.word	0x080092fa
 8008340:	08009328 	.word	0x08009328

08008344 <fiprintf>:
 8008344:	b40e      	push	{r1, r2, r3}
 8008346:	b503      	push	{r0, r1, lr}
 8008348:	4601      	mov	r1, r0
 800834a:	ab03      	add	r3, sp, #12
 800834c:	4805      	ldr	r0, [pc, #20]	; (8008364 <fiprintf+0x20>)
 800834e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008352:	6800      	ldr	r0, [r0, #0]
 8008354:	9301      	str	r3, [sp, #4]
 8008356:	f000 f87d 	bl	8008454 <_vfiprintf_r>
 800835a:	b002      	add	sp, #8
 800835c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008360:	b003      	add	sp, #12
 8008362:	4770      	bx	lr
 8008364:	24000014 	.word	0x24000014

08008368 <memmove>:
 8008368:	4288      	cmp	r0, r1
 800836a:	b510      	push	{r4, lr}
 800836c:	eb01 0402 	add.w	r4, r1, r2
 8008370:	d902      	bls.n	8008378 <memmove+0x10>
 8008372:	4284      	cmp	r4, r0
 8008374:	4623      	mov	r3, r4
 8008376:	d807      	bhi.n	8008388 <memmove+0x20>
 8008378:	1e43      	subs	r3, r0, #1
 800837a:	42a1      	cmp	r1, r4
 800837c:	d008      	beq.n	8008390 <memmove+0x28>
 800837e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008382:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008386:	e7f8      	b.n	800837a <memmove+0x12>
 8008388:	4402      	add	r2, r0
 800838a:	4601      	mov	r1, r0
 800838c:	428a      	cmp	r2, r1
 800838e:	d100      	bne.n	8008392 <memmove+0x2a>
 8008390:	bd10      	pop	{r4, pc}
 8008392:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008396:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800839a:	e7f7      	b.n	800838c <memmove+0x24>

0800839c <__malloc_lock>:
 800839c:	4801      	ldr	r0, [pc, #4]	; (80083a4 <__malloc_lock+0x8>)
 800839e:	f000 bc09 	b.w	8008bb4 <__retarget_lock_acquire_recursive>
 80083a2:	bf00      	nop
 80083a4:	24000270 	.word	0x24000270

080083a8 <__malloc_unlock>:
 80083a8:	4801      	ldr	r0, [pc, #4]	; (80083b0 <__malloc_unlock+0x8>)
 80083aa:	f000 bc04 	b.w	8008bb6 <__retarget_lock_release_recursive>
 80083ae:	bf00      	nop
 80083b0:	24000270 	.word	0x24000270

080083b4 <_realloc_r>:
 80083b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b6:	4607      	mov	r7, r0
 80083b8:	4614      	mov	r4, r2
 80083ba:	460e      	mov	r6, r1
 80083bc:	b921      	cbnz	r1, 80083c8 <_realloc_r+0x14>
 80083be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80083c2:	4611      	mov	r1, r2
 80083c4:	f7ff bdb2 	b.w	8007f2c <_malloc_r>
 80083c8:	b922      	cbnz	r2, 80083d4 <_realloc_r+0x20>
 80083ca:	f7ff fd5f 	bl	8007e8c <_free_r>
 80083ce:	4625      	mov	r5, r4
 80083d0:	4628      	mov	r0, r5
 80083d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083d4:	f000 fc54 	bl	8008c80 <_malloc_usable_size_r>
 80083d8:	42a0      	cmp	r0, r4
 80083da:	d20f      	bcs.n	80083fc <_realloc_r+0x48>
 80083dc:	4621      	mov	r1, r4
 80083de:	4638      	mov	r0, r7
 80083e0:	f7ff fda4 	bl	8007f2c <_malloc_r>
 80083e4:	4605      	mov	r5, r0
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d0f2      	beq.n	80083d0 <_realloc_r+0x1c>
 80083ea:	4631      	mov	r1, r6
 80083ec:	4622      	mov	r2, r4
 80083ee:	f7ff f873 	bl	80074d8 <memcpy>
 80083f2:	4631      	mov	r1, r6
 80083f4:	4638      	mov	r0, r7
 80083f6:	f7ff fd49 	bl	8007e8c <_free_r>
 80083fa:	e7e9      	b.n	80083d0 <_realloc_r+0x1c>
 80083fc:	4635      	mov	r5, r6
 80083fe:	e7e7      	b.n	80083d0 <_realloc_r+0x1c>

08008400 <__sfputc_r>:
 8008400:	6893      	ldr	r3, [r2, #8]
 8008402:	3b01      	subs	r3, #1
 8008404:	2b00      	cmp	r3, #0
 8008406:	b410      	push	{r4}
 8008408:	6093      	str	r3, [r2, #8]
 800840a:	da08      	bge.n	800841e <__sfputc_r+0x1e>
 800840c:	6994      	ldr	r4, [r2, #24]
 800840e:	42a3      	cmp	r3, r4
 8008410:	db01      	blt.n	8008416 <__sfputc_r+0x16>
 8008412:	290a      	cmp	r1, #10
 8008414:	d103      	bne.n	800841e <__sfputc_r+0x1e>
 8008416:	f85d 4b04 	ldr.w	r4, [sp], #4
 800841a:	f000 b94b 	b.w	80086b4 <__swbuf_r>
 800841e:	6813      	ldr	r3, [r2, #0]
 8008420:	1c58      	adds	r0, r3, #1
 8008422:	6010      	str	r0, [r2, #0]
 8008424:	7019      	strb	r1, [r3, #0]
 8008426:	4608      	mov	r0, r1
 8008428:	f85d 4b04 	ldr.w	r4, [sp], #4
 800842c:	4770      	bx	lr

0800842e <__sfputs_r>:
 800842e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008430:	4606      	mov	r6, r0
 8008432:	460f      	mov	r7, r1
 8008434:	4614      	mov	r4, r2
 8008436:	18d5      	adds	r5, r2, r3
 8008438:	42ac      	cmp	r4, r5
 800843a:	d101      	bne.n	8008440 <__sfputs_r+0x12>
 800843c:	2000      	movs	r0, #0
 800843e:	e007      	b.n	8008450 <__sfputs_r+0x22>
 8008440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008444:	463a      	mov	r2, r7
 8008446:	4630      	mov	r0, r6
 8008448:	f7ff ffda 	bl	8008400 <__sfputc_r>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d1f3      	bne.n	8008438 <__sfputs_r+0xa>
 8008450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008454 <_vfiprintf_r>:
 8008454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008458:	460d      	mov	r5, r1
 800845a:	b09d      	sub	sp, #116	; 0x74
 800845c:	4614      	mov	r4, r2
 800845e:	4698      	mov	r8, r3
 8008460:	4606      	mov	r6, r0
 8008462:	b118      	cbz	r0, 800846c <_vfiprintf_r+0x18>
 8008464:	6983      	ldr	r3, [r0, #24]
 8008466:	b90b      	cbnz	r3, 800846c <_vfiprintf_r+0x18>
 8008468:	f000 fb06 	bl	8008a78 <__sinit>
 800846c:	4b89      	ldr	r3, [pc, #548]	; (8008694 <_vfiprintf_r+0x240>)
 800846e:	429d      	cmp	r5, r3
 8008470:	d11b      	bne.n	80084aa <_vfiprintf_r+0x56>
 8008472:	6875      	ldr	r5, [r6, #4]
 8008474:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008476:	07d9      	lsls	r1, r3, #31
 8008478:	d405      	bmi.n	8008486 <_vfiprintf_r+0x32>
 800847a:	89ab      	ldrh	r3, [r5, #12]
 800847c:	059a      	lsls	r2, r3, #22
 800847e:	d402      	bmi.n	8008486 <_vfiprintf_r+0x32>
 8008480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008482:	f000 fb97 	bl	8008bb4 <__retarget_lock_acquire_recursive>
 8008486:	89ab      	ldrh	r3, [r5, #12]
 8008488:	071b      	lsls	r3, r3, #28
 800848a:	d501      	bpl.n	8008490 <_vfiprintf_r+0x3c>
 800848c:	692b      	ldr	r3, [r5, #16]
 800848e:	b9eb      	cbnz	r3, 80084cc <_vfiprintf_r+0x78>
 8008490:	4629      	mov	r1, r5
 8008492:	4630      	mov	r0, r6
 8008494:	f000 f960 	bl	8008758 <__swsetup_r>
 8008498:	b1c0      	cbz	r0, 80084cc <_vfiprintf_r+0x78>
 800849a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800849c:	07dc      	lsls	r4, r3, #31
 800849e:	d50e      	bpl.n	80084be <_vfiprintf_r+0x6a>
 80084a0:	f04f 30ff 	mov.w	r0, #4294967295
 80084a4:	b01d      	add	sp, #116	; 0x74
 80084a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084aa:	4b7b      	ldr	r3, [pc, #492]	; (8008698 <_vfiprintf_r+0x244>)
 80084ac:	429d      	cmp	r5, r3
 80084ae:	d101      	bne.n	80084b4 <_vfiprintf_r+0x60>
 80084b0:	68b5      	ldr	r5, [r6, #8]
 80084b2:	e7df      	b.n	8008474 <_vfiprintf_r+0x20>
 80084b4:	4b79      	ldr	r3, [pc, #484]	; (800869c <_vfiprintf_r+0x248>)
 80084b6:	429d      	cmp	r5, r3
 80084b8:	bf08      	it	eq
 80084ba:	68f5      	ldreq	r5, [r6, #12]
 80084bc:	e7da      	b.n	8008474 <_vfiprintf_r+0x20>
 80084be:	89ab      	ldrh	r3, [r5, #12]
 80084c0:	0598      	lsls	r0, r3, #22
 80084c2:	d4ed      	bmi.n	80084a0 <_vfiprintf_r+0x4c>
 80084c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084c6:	f000 fb76 	bl	8008bb6 <__retarget_lock_release_recursive>
 80084ca:	e7e9      	b.n	80084a0 <_vfiprintf_r+0x4c>
 80084cc:	2300      	movs	r3, #0
 80084ce:	9309      	str	r3, [sp, #36]	; 0x24
 80084d0:	2320      	movs	r3, #32
 80084d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80084da:	2330      	movs	r3, #48	; 0x30
 80084dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80086a0 <_vfiprintf_r+0x24c>
 80084e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084e4:	f04f 0901 	mov.w	r9, #1
 80084e8:	4623      	mov	r3, r4
 80084ea:	469a      	mov	sl, r3
 80084ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084f0:	b10a      	cbz	r2, 80084f6 <_vfiprintf_r+0xa2>
 80084f2:	2a25      	cmp	r2, #37	; 0x25
 80084f4:	d1f9      	bne.n	80084ea <_vfiprintf_r+0x96>
 80084f6:	ebba 0b04 	subs.w	fp, sl, r4
 80084fa:	d00b      	beq.n	8008514 <_vfiprintf_r+0xc0>
 80084fc:	465b      	mov	r3, fp
 80084fe:	4622      	mov	r2, r4
 8008500:	4629      	mov	r1, r5
 8008502:	4630      	mov	r0, r6
 8008504:	f7ff ff93 	bl	800842e <__sfputs_r>
 8008508:	3001      	adds	r0, #1
 800850a:	f000 80aa 	beq.w	8008662 <_vfiprintf_r+0x20e>
 800850e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008510:	445a      	add	r2, fp
 8008512:	9209      	str	r2, [sp, #36]	; 0x24
 8008514:	f89a 3000 	ldrb.w	r3, [sl]
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 80a2 	beq.w	8008662 <_vfiprintf_r+0x20e>
 800851e:	2300      	movs	r3, #0
 8008520:	f04f 32ff 	mov.w	r2, #4294967295
 8008524:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008528:	f10a 0a01 	add.w	sl, sl, #1
 800852c:	9304      	str	r3, [sp, #16]
 800852e:	9307      	str	r3, [sp, #28]
 8008530:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008534:	931a      	str	r3, [sp, #104]	; 0x68
 8008536:	4654      	mov	r4, sl
 8008538:	2205      	movs	r2, #5
 800853a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800853e:	4858      	ldr	r0, [pc, #352]	; (80086a0 <_vfiprintf_r+0x24c>)
 8008540:	f7f7 fed6 	bl	80002f0 <memchr>
 8008544:	9a04      	ldr	r2, [sp, #16]
 8008546:	b9d8      	cbnz	r0, 8008580 <_vfiprintf_r+0x12c>
 8008548:	06d1      	lsls	r1, r2, #27
 800854a:	bf44      	itt	mi
 800854c:	2320      	movmi	r3, #32
 800854e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008552:	0713      	lsls	r3, r2, #28
 8008554:	bf44      	itt	mi
 8008556:	232b      	movmi	r3, #43	; 0x2b
 8008558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800855c:	f89a 3000 	ldrb.w	r3, [sl]
 8008560:	2b2a      	cmp	r3, #42	; 0x2a
 8008562:	d015      	beq.n	8008590 <_vfiprintf_r+0x13c>
 8008564:	9a07      	ldr	r2, [sp, #28]
 8008566:	4654      	mov	r4, sl
 8008568:	2000      	movs	r0, #0
 800856a:	f04f 0c0a 	mov.w	ip, #10
 800856e:	4621      	mov	r1, r4
 8008570:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008574:	3b30      	subs	r3, #48	; 0x30
 8008576:	2b09      	cmp	r3, #9
 8008578:	d94e      	bls.n	8008618 <_vfiprintf_r+0x1c4>
 800857a:	b1b0      	cbz	r0, 80085aa <_vfiprintf_r+0x156>
 800857c:	9207      	str	r2, [sp, #28]
 800857e:	e014      	b.n	80085aa <_vfiprintf_r+0x156>
 8008580:	eba0 0308 	sub.w	r3, r0, r8
 8008584:	fa09 f303 	lsl.w	r3, r9, r3
 8008588:	4313      	orrs	r3, r2
 800858a:	9304      	str	r3, [sp, #16]
 800858c:	46a2      	mov	sl, r4
 800858e:	e7d2      	b.n	8008536 <_vfiprintf_r+0xe2>
 8008590:	9b03      	ldr	r3, [sp, #12]
 8008592:	1d19      	adds	r1, r3, #4
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	9103      	str	r1, [sp, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	bfbb      	ittet	lt
 800859c:	425b      	neglt	r3, r3
 800859e:	f042 0202 	orrlt.w	r2, r2, #2
 80085a2:	9307      	strge	r3, [sp, #28]
 80085a4:	9307      	strlt	r3, [sp, #28]
 80085a6:	bfb8      	it	lt
 80085a8:	9204      	strlt	r2, [sp, #16]
 80085aa:	7823      	ldrb	r3, [r4, #0]
 80085ac:	2b2e      	cmp	r3, #46	; 0x2e
 80085ae:	d10c      	bne.n	80085ca <_vfiprintf_r+0x176>
 80085b0:	7863      	ldrb	r3, [r4, #1]
 80085b2:	2b2a      	cmp	r3, #42	; 0x2a
 80085b4:	d135      	bne.n	8008622 <_vfiprintf_r+0x1ce>
 80085b6:	9b03      	ldr	r3, [sp, #12]
 80085b8:	1d1a      	adds	r2, r3, #4
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	9203      	str	r2, [sp, #12]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	bfb8      	it	lt
 80085c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80085c6:	3402      	adds	r4, #2
 80085c8:	9305      	str	r3, [sp, #20]
 80085ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80086b0 <_vfiprintf_r+0x25c>
 80085ce:	7821      	ldrb	r1, [r4, #0]
 80085d0:	2203      	movs	r2, #3
 80085d2:	4650      	mov	r0, sl
 80085d4:	f7f7 fe8c 	bl	80002f0 <memchr>
 80085d8:	b140      	cbz	r0, 80085ec <_vfiprintf_r+0x198>
 80085da:	2340      	movs	r3, #64	; 0x40
 80085dc:	eba0 000a 	sub.w	r0, r0, sl
 80085e0:	fa03 f000 	lsl.w	r0, r3, r0
 80085e4:	9b04      	ldr	r3, [sp, #16]
 80085e6:	4303      	orrs	r3, r0
 80085e8:	3401      	adds	r4, #1
 80085ea:	9304      	str	r3, [sp, #16]
 80085ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f0:	482c      	ldr	r0, [pc, #176]	; (80086a4 <_vfiprintf_r+0x250>)
 80085f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085f6:	2206      	movs	r2, #6
 80085f8:	f7f7 fe7a 	bl	80002f0 <memchr>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	d03f      	beq.n	8008680 <_vfiprintf_r+0x22c>
 8008600:	4b29      	ldr	r3, [pc, #164]	; (80086a8 <_vfiprintf_r+0x254>)
 8008602:	bb1b      	cbnz	r3, 800864c <_vfiprintf_r+0x1f8>
 8008604:	9b03      	ldr	r3, [sp, #12]
 8008606:	3307      	adds	r3, #7
 8008608:	f023 0307 	bic.w	r3, r3, #7
 800860c:	3308      	adds	r3, #8
 800860e:	9303      	str	r3, [sp, #12]
 8008610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008612:	443b      	add	r3, r7
 8008614:	9309      	str	r3, [sp, #36]	; 0x24
 8008616:	e767      	b.n	80084e8 <_vfiprintf_r+0x94>
 8008618:	fb0c 3202 	mla	r2, ip, r2, r3
 800861c:	460c      	mov	r4, r1
 800861e:	2001      	movs	r0, #1
 8008620:	e7a5      	b.n	800856e <_vfiprintf_r+0x11a>
 8008622:	2300      	movs	r3, #0
 8008624:	3401      	adds	r4, #1
 8008626:	9305      	str	r3, [sp, #20]
 8008628:	4619      	mov	r1, r3
 800862a:	f04f 0c0a 	mov.w	ip, #10
 800862e:	4620      	mov	r0, r4
 8008630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008634:	3a30      	subs	r2, #48	; 0x30
 8008636:	2a09      	cmp	r2, #9
 8008638:	d903      	bls.n	8008642 <_vfiprintf_r+0x1ee>
 800863a:	2b00      	cmp	r3, #0
 800863c:	d0c5      	beq.n	80085ca <_vfiprintf_r+0x176>
 800863e:	9105      	str	r1, [sp, #20]
 8008640:	e7c3      	b.n	80085ca <_vfiprintf_r+0x176>
 8008642:	fb0c 2101 	mla	r1, ip, r1, r2
 8008646:	4604      	mov	r4, r0
 8008648:	2301      	movs	r3, #1
 800864a:	e7f0      	b.n	800862e <_vfiprintf_r+0x1da>
 800864c:	ab03      	add	r3, sp, #12
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	462a      	mov	r2, r5
 8008652:	4b16      	ldr	r3, [pc, #88]	; (80086ac <_vfiprintf_r+0x258>)
 8008654:	a904      	add	r1, sp, #16
 8008656:	4630      	mov	r0, r6
 8008658:	f7fc f946 	bl	80048e8 <_printf_float>
 800865c:	4607      	mov	r7, r0
 800865e:	1c78      	adds	r0, r7, #1
 8008660:	d1d6      	bne.n	8008610 <_vfiprintf_r+0x1bc>
 8008662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008664:	07d9      	lsls	r1, r3, #31
 8008666:	d405      	bmi.n	8008674 <_vfiprintf_r+0x220>
 8008668:	89ab      	ldrh	r3, [r5, #12]
 800866a:	059a      	lsls	r2, r3, #22
 800866c:	d402      	bmi.n	8008674 <_vfiprintf_r+0x220>
 800866e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008670:	f000 faa1 	bl	8008bb6 <__retarget_lock_release_recursive>
 8008674:	89ab      	ldrh	r3, [r5, #12]
 8008676:	065b      	lsls	r3, r3, #25
 8008678:	f53f af12 	bmi.w	80084a0 <_vfiprintf_r+0x4c>
 800867c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800867e:	e711      	b.n	80084a4 <_vfiprintf_r+0x50>
 8008680:	ab03      	add	r3, sp, #12
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	462a      	mov	r2, r5
 8008686:	4b09      	ldr	r3, [pc, #36]	; (80086ac <_vfiprintf_r+0x258>)
 8008688:	a904      	add	r1, sp, #16
 800868a:	4630      	mov	r0, r6
 800868c:	f7fc fbb8 	bl	8004e00 <_printf_i>
 8008690:	e7e4      	b.n	800865c <_vfiprintf_r+0x208>
 8008692:	bf00      	nop
 8008694:	0800934c 	.word	0x0800934c
 8008698:	0800936c 	.word	0x0800936c
 800869c:	0800932c 	.word	0x0800932c
 80086a0:	080092dc 	.word	0x080092dc
 80086a4:	080092e6 	.word	0x080092e6
 80086a8:	080048e9 	.word	0x080048e9
 80086ac:	0800842f 	.word	0x0800842f
 80086b0:	080092e2 	.word	0x080092e2

080086b4 <__swbuf_r>:
 80086b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b6:	460e      	mov	r6, r1
 80086b8:	4614      	mov	r4, r2
 80086ba:	4605      	mov	r5, r0
 80086bc:	b118      	cbz	r0, 80086c6 <__swbuf_r+0x12>
 80086be:	6983      	ldr	r3, [r0, #24]
 80086c0:	b90b      	cbnz	r3, 80086c6 <__swbuf_r+0x12>
 80086c2:	f000 f9d9 	bl	8008a78 <__sinit>
 80086c6:	4b21      	ldr	r3, [pc, #132]	; (800874c <__swbuf_r+0x98>)
 80086c8:	429c      	cmp	r4, r3
 80086ca:	d12b      	bne.n	8008724 <__swbuf_r+0x70>
 80086cc:	686c      	ldr	r4, [r5, #4]
 80086ce:	69a3      	ldr	r3, [r4, #24]
 80086d0:	60a3      	str	r3, [r4, #8]
 80086d2:	89a3      	ldrh	r3, [r4, #12]
 80086d4:	071a      	lsls	r2, r3, #28
 80086d6:	d52f      	bpl.n	8008738 <__swbuf_r+0x84>
 80086d8:	6923      	ldr	r3, [r4, #16]
 80086da:	b36b      	cbz	r3, 8008738 <__swbuf_r+0x84>
 80086dc:	6923      	ldr	r3, [r4, #16]
 80086de:	6820      	ldr	r0, [r4, #0]
 80086e0:	1ac0      	subs	r0, r0, r3
 80086e2:	6963      	ldr	r3, [r4, #20]
 80086e4:	b2f6      	uxtb	r6, r6
 80086e6:	4283      	cmp	r3, r0
 80086e8:	4637      	mov	r7, r6
 80086ea:	dc04      	bgt.n	80086f6 <__swbuf_r+0x42>
 80086ec:	4621      	mov	r1, r4
 80086ee:	4628      	mov	r0, r5
 80086f0:	f000 f92e 	bl	8008950 <_fflush_r>
 80086f4:	bb30      	cbnz	r0, 8008744 <__swbuf_r+0x90>
 80086f6:	68a3      	ldr	r3, [r4, #8]
 80086f8:	3b01      	subs	r3, #1
 80086fa:	60a3      	str	r3, [r4, #8]
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	1c5a      	adds	r2, r3, #1
 8008700:	6022      	str	r2, [r4, #0]
 8008702:	701e      	strb	r6, [r3, #0]
 8008704:	6963      	ldr	r3, [r4, #20]
 8008706:	3001      	adds	r0, #1
 8008708:	4283      	cmp	r3, r0
 800870a:	d004      	beq.n	8008716 <__swbuf_r+0x62>
 800870c:	89a3      	ldrh	r3, [r4, #12]
 800870e:	07db      	lsls	r3, r3, #31
 8008710:	d506      	bpl.n	8008720 <__swbuf_r+0x6c>
 8008712:	2e0a      	cmp	r6, #10
 8008714:	d104      	bne.n	8008720 <__swbuf_r+0x6c>
 8008716:	4621      	mov	r1, r4
 8008718:	4628      	mov	r0, r5
 800871a:	f000 f919 	bl	8008950 <_fflush_r>
 800871e:	b988      	cbnz	r0, 8008744 <__swbuf_r+0x90>
 8008720:	4638      	mov	r0, r7
 8008722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008724:	4b0a      	ldr	r3, [pc, #40]	; (8008750 <__swbuf_r+0x9c>)
 8008726:	429c      	cmp	r4, r3
 8008728:	d101      	bne.n	800872e <__swbuf_r+0x7a>
 800872a:	68ac      	ldr	r4, [r5, #8]
 800872c:	e7cf      	b.n	80086ce <__swbuf_r+0x1a>
 800872e:	4b09      	ldr	r3, [pc, #36]	; (8008754 <__swbuf_r+0xa0>)
 8008730:	429c      	cmp	r4, r3
 8008732:	bf08      	it	eq
 8008734:	68ec      	ldreq	r4, [r5, #12]
 8008736:	e7ca      	b.n	80086ce <__swbuf_r+0x1a>
 8008738:	4621      	mov	r1, r4
 800873a:	4628      	mov	r0, r5
 800873c:	f000 f80c 	bl	8008758 <__swsetup_r>
 8008740:	2800      	cmp	r0, #0
 8008742:	d0cb      	beq.n	80086dc <__swbuf_r+0x28>
 8008744:	f04f 37ff 	mov.w	r7, #4294967295
 8008748:	e7ea      	b.n	8008720 <__swbuf_r+0x6c>
 800874a:	bf00      	nop
 800874c:	0800934c 	.word	0x0800934c
 8008750:	0800936c 	.word	0x0800936c
 8008754:	0800932c 	.word	0x0800932c

08008758 <__swsetup_r>:
 8008758:	4b32      	ldr	r3, [pc, #200]	; (8008824 <__swsetup_r+0xcc>)
 800875a:	b570      	push	{r4, r5, r6, lr}
 800875c:	681d      	ldr	r5, [r3, #0]
 800875e:	4606      	mov	r6, r0
 8008760:	460c      	mov	r4, r1
 8008762:	b125      	cbz	r5, 800876e <__swsetup_r+0x16>
 8008764:	69ab      	ldr	r3, [r5, #24]
 8008766:	b913      	cbnz	r3, 800876e <__swsetup_r+0x16>
 8008768:	4628      	mov	r0, r5
 800876a:	f000 f985 	bl	8008a78 <__sinit>
 800876e:	4b2e      	ldr	r3, [pc, #184]	; (8008828 <__swsetup_r+0xd0>)
 8008770:	429c      	cmp	r4, r3
 8008772:	d10f      	bne.n	8008794 <__swsetup_r+0x3c>
 8008774:	686c      	ldr	r4, [r5, #4]
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800877c:	0719      	lsls	r1, r3, #28
 800877e:	d42c      	bmi.n	80087da <__swsetup_r+0x82>
 8008780:	06dd      	lsls	r5, r3, #27
 8008782:	d411      	bmi.n	80087a8 <__swsetup_r+0x50>
 8008784:	2309      	movs	r3, #9
 8008786:	6033      	str	r3, [r6, #0]
 8008788:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800878c:	81a3      	strh	r3, [r4, #12]
 800878e:	f04f 30ff 	mov.w	r0, #4294967295
 8008792:	e03e      	b.n	8008812 <__swsetup_r+0xba>
 8008794:	4b25      	ldr	r3, [pc, #148]	; (800882c <__swsetup_r+0xd4>)
 8008796:	429c      	cmp	r4, r3
 8008798:	d101      	bne.n	800879e <__swsetup_r+0x46>
 800879a:	68ac      	ldr	r4, [r5, #8]
 800879c:	e7eb      	b.n	8008776 <__swsetup_r+0x1e>
 800879e:	4b24      	ldr	r3, [pc, #144]	; (8008830 <__swsetup_r+0xd8>)
 80087a0:	429c      	cmp	r4, r3
 80087a2:	bf08      	it	eq
 80087a4:	68ec      	ldreq	r4, [r5, #12]
 80087a6:	e7e6      	b.n	8008776 <__swsetup_r+0x1e>
 80087a8:	0758      	lsls	r0, r3, #29
 80087aa:	d512      	bpl.n	80087d2 <__swsetup_r+0x7a>
 80087ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087ae:	b141      	cbz	r1, 80087c2 <__swsetup_r+0x6a>
 80087b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087b4:	4299      	cmp	r1, r3
 80087b6:	d002      	beq.n	80087be <__swsetup_r+0x66>
 80087b8:	4630      	mov	r0, r6
 80087ba:	f7ff fb67 	bl	8007e8c <_free_r>
 80087be:	2300      	movs	r3, #0
 80087c0:	6363      	str	r3, [r4, #52]	; 0x34
 80087c2:	89a3      	ldrh	r3, [r4, #12]
 80087c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087c8:	81a3      	strh	r3, [r4, #12]
 80087ca:	2300      	movs	r3, #0
 80087cc:	6063      	str	r3, [r4, #4]
 80087ce:	6923      	ldr	r3, [r4, #16]
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	89a3      	ldrh	r3, [r4, #12]
 80087d4:	f043 0308 	orr.w	r3, r3, #8
 80087d8:	81a3      	strh	r3, [r4, #12]
 80087da:	6923      	ldr	r3, [r4, #16]
 80087dc:	b94b      	cbnz	r3, 80087f2 <__swsetup_r+0x9a>
 80087de:	89a3      	ldrh	r3, [r4, #12]
 80087e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087e8:	d003      	beq.n	80087f2 <__swsetup_r+0x9a>
 80087ea:	4621      	mov	r1, r4
 80087ec:	4630      	mov	r0, r6
 80087ee:	f000 fa07 	bl	8008c00 <__smakebuf_r>
 80087f2:	89a0      	ldrh	r0, [r4, #12]
 80087f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087f8:	f010 0301 	ands.w	r3, r0, #1
 80087fc:	d00a      	beq.n	8008814 <__swsetup_r+0xbc>
 80087fe:	2300      	movs	r3, #0
 8008800:	60a3      	str	r3, [r4, #8]
 8008802:	6963      	ldr	r3, [r4, #20]
 8008804:	425b      	negs	r3, r3
 8008806:	61a3      	str	r3, [r4, #24]
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	b943      	cbnz	r3, 800881e <__swsetup_r+0xc6>
 800880c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008810:	d1ba      	bne.n	8008788 <__swsetup_r+0x30>
 8008812:	bd70      	pop	{r4, r5, r6, pc}
 8008814:	0781      	lsls	r1, r0, #30
 8008816:	bf58      	it	pl
 8008818:	6963      	ldrpl	r3, [r4, #20]
 800881a:	60a3      	str	r3, [r4, #8]
 800881c:	e7f4      	b.n	8008808 <__swsetup_r+0xb0>
 800881e:	2000      	movs	r0, #0
 8008820:	e7f7      	b.n	8008812 <__swsetup_r+0xba>
 8008822:	bf00      	nop
 8008824:	24000014 	.word	0x24000014
 8008828:	0800934c 	.word	0x0800934c
 800882c:	0800936c 	.word	0x0800936c
 8008830:	0800932c 	.word	0x0800932c

08008834 <abort>:
 8008834:	b508      	push	{r3, lr}
 8008836:	2006      	movs	r0, #6
 8008838:	f000 fa52 	bl	8008ce0 <raise>
 800883c:	2001      	movs	r0, #1
 800883e:	f7f8 fa5f 	bl	8000d00 <_exit>
	...

08008844 <__sflush_r>:
 8008844:	898a      	ldrh	r2, [r1, #12]
 8008846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800884a:	4605      	mov	r5, r0
 800884c:	0710      	lsls	r0, r2, #28
 800884e:	460c      	mov	r4, r1
 8008850:	d458      	bmi.n	8008904 <__sflush_r+0xc0>
 8008852:	684b      	ldr	r3, [r1, #4]
 8008854:	2b00      	cmp	r3, #0
 8008856:	dc05      	bgt.n	8008864 <__sflush_r+0x20>
 8008858:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800885a:	2b00      	cmp	r3, #0
 800885c:	dc02      	bgt.n	8008864 <__sflush_r+0x20>
 800885e:	2000      	movs	r0, #0
 8008860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008864:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008866:	2e00      	cmp	r6, #0
 8008868:	d0f9      	beq.n	800885e <__sflush_r+0x1a>
 800886a:	2300      	movs	r3, #0
 800886c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008870:	682f      	ldr	r7, [r5, #0]
 8008872:	602b      	str	r3, [r5, #0]
 8008874:	d032      	beq.n	80088dc <__sflush_r+0x98>
 8008876:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008878:	89a3      	ldrh	r3, [r4, #12]
 800887a:	075a      	lsls	r2, r3, #29
 800887c:	d505      	bpl.n	800888a <__sflush_r+0x46>
 800887e:	6863      	ldr	r3, [r4, #4]
 8008880:	1ac0      	subs	r0, r0, r3
 8008882:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008884:	b10b      	cbz	r3, 800888a <__sflush_r+0x46>
 8008886:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008888:	1ac0      	subs	r0, r0, r3
 800888a:	2300      	movs	r3, #0
 800888c:	4602      	mov	r2, r0
 800888e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008890:	6a21      	ldr	r1, [r4, #32]
 8008892:	4628      	mov	r0, r5
 8008894:	47b0      	blx	r6
 8008896:	1c43      	adds	r3, r0, #1
 8008898:	89a3      	ldrh	r3, [r4, #12]
 800889a:	d106      	bne.n	80088aa <__sflush_r+0x66>
 800889c:	6829      	ldr	r1, [r5, #0]
 800889e:	291d      	cmp	r1, #29
 80088a0:	d82c      	bhi.n	80088fc <__sflush_r+0xb8>
 80088a2:	4a2a      	ldr	r2, [pc, #168]	; (800894c <__sflush_r+0x108>)
 80088a4:	40ca      	lsrs	r2, r1
 80088a6:	07d6      	lsls	r6, r2, #31
 80088a8:	d528      	bpl.n	80088fc <__sflush_r+0xb8>
 80088aa:	2200      	movs	r2, #0
 80088ac:	6062      	str	r2, [r4, #4]
 80088ae:	04d9      	lsls	r1, r3, #19
 80088b0:	6922      	ldr	r2, [r4, #16]
 80088b2:	6022      	str	r2, [r4, #0]
 80088b4:	d504      	bpl.n	80088c0 <__sflush_r+0x7c>
 80088b6:	1c42      	adds	r2, r0, #1
 80088b8:	d101      	bne.n	80088be <__sflush_r+0x7a>
 80088ba:	682b      	ldr	r3, [r5, #0]
 80088bc:	b903      	cbnz	r3, 80088c0 <__sflush_r+0x7c>
 80088be:	6560      	str	r0, [r4, #84]	; 0x54
 80088c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088c2:	602f      	str	r7, [r5, #0]
 80088c4:	2900      	cmp	r1, #0
 80088c6:	d0ca      	beq.n	800885e <__sflush_r+0x1a>
 80088c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088cc:	4299      	cmp	r1, r3
 80088ce:	d002      	beq.n	80088d6 <__sflush_r+0x92>
 80088d0:	4628      	mov	r0, r5
 80088d2:	f7ff fadb 	bl	8007e8c <_free_r>
 80088d6:	2000      	movs	r0, #0
 80088d8:	6360      	str	r0, [r4, #52]	; 0x34
 80088da:	e7c1      	b.n	8008860 <__sflush_r+0x1c>
 80088dc:	6a21      	ldr	r1, [r4, #32]
 80088de:	2301      	movs	r3, #1
 80088e0:	4628      	mov	r0, r5
 80088e2:	47b0      	blx	r6
 80088e4:	1c41      	adds	r1, r0, #1
 80088e6:	d1c7      	bne.n	8008878 <__sflush_r+0x34>
 80088e8:	682b      	ldr	r3, [r5, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d0c4      	beq.n	8008878 <__sflush_r+0x34>
 80088ee:	2b1d      	cmp	r3, #29
 80088f0:	d001      	beq.n	80088f6 <__sflush_r+0xb2>
 80088f2:	2b16      	cmp	r3, #22
 80088f4:	d101      	bne.n	80088fa <__sflush_r+0xb6>
 80088f6:	602f      	str	r7, [r5, #0]
 80088f8:	e7b1      	b.n	800885e <__sflush_r+0x1a>
 80088fa:	89a3      	ldrh	r3, [r4, #12]
 80088fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008900:	81a3      	strh	r3, [r4, #12]
 8008902:	e7ad      	b.n	8008860 <__sflush_r+0x1c>
 8008904:	690f      	ldr	r7, [r1, #16]
 8008906:	2f00      	cmp	r7, #0
 8008908:	d0a9      	beq.n	800885e <__sflush_r+0x1a>
 800890a:	0793      	lsls	r3, r2, #30
 800890c:	680e      	ldr	r6, [r1, #0]
 800890e:	bf08      	it	eq
 8008910:	694b      	ldreq	r3, [r1, #20]
 8008912:	600f      	str	r7, [r1, #0]
 8008914:	bf18      	it	ne
 8008916:	2300      	movne	r3, #0
 8008918:	eba6 0807 	sub.w	r8, r6, r7
 800891c:	608b      	str	r3, [r1, #8]
 800891e:	f1b8 0f00 	cmp.w	r8, #0
 8008922:	dd9c      	ble.n	800885e <__sflush_r+0x1a>
 8008924:	6a21      	ldr	r1, [r4, #32]
 8008926:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008928:	4643      	mov	r3, r8
 800892a:	463a      	mov	r2, r7
 800892c:	4628      	mov	r0, r5
 800892e:	47b0      	blx	r6
 8008930:	2800      	cmp	r0, #0
 8008932:	dc06      	bgt.n	8008942 <__sflush_r+0xfe>
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800893a:	81a3      	strh	r3, [r4, #12]
 800893c:	f04f 30ff 	mov.w	r0, #4294967295
 8008940:	e78e      	b.n	8008860 <__sflush_r+0x1c>
 8008942:	4407      	add	r7, r0
 8008944:	eba8 0800 	sub.w	r8, r8, r0
 8008948:	e7e9      	b.n	800891e <__sflush_r+0xda>
 800894a:	bf00      	nop
 800894c:	20400001 	.word	0x20400001

08008950 <_fflush_r>:
 8008950:	b538      	push	{r3, r4, r5, lr}
 8008952:	690b      	ldr	r3, [r1, #16]
 8008954:	4605      	mov	r5, r0
 8008956:	460c      	mov	r4, r1
 8008958:	b913      	cbnz	r3, 8008960 <_fflush_r+0x10>
 800895a:	2500      	movs	r5, #0
 800895c:	4628      	mov	r0, r5
 800895e:	bd38      	pop	{r3, r4, r5, pc}
 8008960:	b118      	cbz	r0, 800896a <_fflush_r+0x1a>
 8008962:	6983      	ldr	r3, [r0, #24]
 8008964:	b90b      	cbnz	r3, 800896a <_fflush_r+0x1a>
 8008966:	f000 f887 	bl	8008a78 <__sinit>
 800896a:	4b14      	ldr	r3, [pc, #80]	; (80089bc <_fflush_r+0x6c>)
 800896c:	429c      	cmp	r4, r3
 800896e:	d11b      	bne.n	80089a8 <_fflush_r+0x58>
 8008970:	686c      	ldr	r4, [r5, #4]
 8008972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0ef      	beq.n	800895a <_fflush_r+0xa>
 800897a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800897c:	07d0      	lsls	r0, r2, #31
 800897e:	d404      	bmi.n	800898a <_fflush_r+0x3a>
 8008980:	0599      	lsls	r1, r3, #22
 8008982:	d402      	bmi.n	800898a <_fflush_r+0x3a>
 8008984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008986:	f000 f915 	bl	8008bb4 <__retarget_lock_acquire_recursive>
 800898a:	4628      	mov	r0, r5
 800898c:	4621      	mov	r1, r4
 800898e:	f7ff ff59 	bl	8008844 <__sflush_r>
 8008992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008994:	07da      	lsls	r2, r3, #31
 8008996:	4605      	mov	r5, r0
 8008998:	d4e0      	bmi.n	800895c <_fflush_r+0xc>
 800899a:	89a3      	ldrh	r3, [r4, #12]
 800899c:	059b      	lsls	r3, r3, #22
 800899e:	d4dd      	bmi.n	800895c <_fflush_r+0xc>
 80089a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089a2:	f000 f908 	bl	8008bb6 <__retarget_lock_release_recursive>
 80089a6:	e7d9      	b.n	800895c <_fflush_r+0xc>
 80089a8:	4b05      	ldr	r3, [pc, #20]	; (80089c0 <_fflush_r+0x70>)
 80089aa:	429c      	cmp	r4, r3
 80089ac:	d101      	bne.n	80089b2 <_fflush_r+0x62>
 80089ae:	68ac      	ldr	r4, [r5, #8]
 80089b0:	e7df      	b.n	8008972 <_fflush_r+0x22>
 80089b2:	4b04      	ldr	r3, [pc, #16]	; (80089c4 <_fflush_r+0x74>)
 80089b4:	429c      	cmp	r4, r3
 80089b6:	bf08      	it	eq
 80089b8:	68ec      	ldreq	r4, [r5, #12]
 80089ba:	e7da      	b.n	8008972 <_fflush_r+0x22>
 80089bc:	0800934c 	.word	0x0800934c
 80089c0:	0800936c 	.word	0x0800936c
 80089c4:	0800932c 	.word	0x0800932c

080089c8 <std>:
 80089c8:	2300      	movs	r3, #0
 80089ca:	b510      	push	{r4, lr}
 80089cc:	4604      	mov	r4, r0
 80089ce:	e9c0 3300 	strd	r3, r3, [r0]
 80089d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089d6:	6083      	str	r3, [r0, #8]
 80089d8:	8181      	strh	r1, [r0, #12]
 80089da:	6643      	str	r3, [r0, #100]	; 0x64
 80089dc:	81c2      	strh	r2, [r0, #14]
 80089de:	6183      	str	r3, [r0, #24]
 80089e0:	4619      	mov	r1, r3
 80089e2:	2208      	movs	r2, #8
 80089e4:	305c      	adds	r0, #92	; 0x5c
 80089e6:	f7fb fee7 	bl	80047b8 <memset>
 80089ea:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <std+0x38>)
 80089ec:	6263      	str	r3, [r4, #36]	; 0x24
 80089ee:	4b05      	ldr	r3, [pc, #20]	; (8008a04 <std+0x3c>)
 80089f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80089f2:	4b05      	ldr	r3, [pc, #20]	; (8008a08 <std+0x40>)
 80089f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089f6:	4b05      	ldr	r3, [pc, #20]	; (8008a0c <std+0x44>)
 80089f8:	6224      	str	r4, [r4, #32]
 80089fa:	6323      	str	r3, [r4, #48]	; 0x30
 80089fc:	bd10      	pop	{r4, pc}
 80089fe:	bf00      	nop
 8008a00:	08008d19 	.word	0x08008d19
 8008a04:	08008d3b 	.word	0x08008d3b
 8008a08:	08008d73 	.word	0x08008d73
 8008a0c:	08008d97 	.word	0x08008d97

08008a10 <_cleanup_r>:
 8008a10:	4901      	ldr	r1, [pc, #4]	; (8008a18 <_cleanup_r+0x8>)
 8008a12:	f000 b8af 	b.w	8008b74 <_fwalk_reent>
 8008a16:	bf00      	nop
 8008a18:	08008951 	.word	0x08008951

08008a1c <__sfmoreglue>:
 8008a1c:	b570      	push	{r4, r5, r6, lr}
 8008a1e:	1e4a      	subs	r2, r1, #1
 8008a20:	2568      	movs	r5, #104	; 0x68
 8008a22:	4355      	muls	r5, r2
 8008a24:	460e      	mov	r6, r1
 8008a26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a2a:	f7ff fa7f 	bl	8007f2c <_malloc_r>
 8008a2e:	4604      	mov	r4, r0
 8008a30:	b140      	cbz	r0, 8008a44 <__sfmoreglue+0x28>
 8008a32:	2100      	movs	r1, #0
 8008a34:	e9c0 1600 	strd	r1, r6, [r0]
 8008a38:	300c      	adds	r0, #12
 8008a3a:	60a0      	str	r0, [r4, #8]
 8008a3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a40:	f7fb feba 	bl	80047b8 <memset>
 8008a44:	4620      	mov	r0, r4
 8008a46:	bd70      	pop	{r4, r5, r6, pc}

08008a48 <__sfp_lock_acquire>:
 8008a48:	4801      	ldr	r0, [pc, #4]	; (8008a50 <__sfp_lock_acquire+0x8>)
 8008a4a:	f000 b8b3 	b.w	8008bb4 <__retarget_lock_acquire_recursive>
 8008a4e:	bf00      	nop
 8008a50:	24000274 	.word	0x24000274

08008a54 <__sfp_lock_release>:
 8008a54:	4801      	ldr	r0, [pc, #4]	; (8008a5c <__sfp_lock_release+0x8>)
 8008a56:	f000 b8ae 	b.w	8008bb6 <__retarget_lock_release_recursive>
 8008a5a:	bf00      	nop
 8008a5c:	24000274 	.word	0x24000274

08008a60 <__sinit_lock_acquire>:
 8008a60:	4801      	ldr	r0, [pc, #4]	; (8008a68 <__sinit_lock_acquire+0x8>)
 8008a62:	f000 b8a7 	b.w	8008bb4 <__retarget_lock_acquire_recursive>
 8008a66:	bf00      	nop
 8008a68:	2400026f 	.word	0x2400026f

08008a6c <__sinit_lock_release>:
 8008a6c:	4801      	ldr	r0, [pc, #4]	; (8008a74 <__sinit_lock_release+0x8>)
 8008a6e:	f000 b8a2 	b.w	8008bb6 <__retarget_lock_release_recursive>
 8008a72:	bf00      	nop
 8008a74:	2400026f 	.word	0x2400026f

08008a78 <__sinit>:
 8008a78:	b510      	push	{r4, lr}
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	f7ff fff0 	bl	8008a60 <__sinit_lock_acquire>
 8008a80:	69a3      	ldr	r3, [r4, #24]
 8008a82:	b11b      	cbz	r3, 8008a8c <__sinit+0x14>
 8008a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a88:	f7ff bff0 	b.w	8008a6c <__sinit_lock_release>
 8008a8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a90:	6523      	str	r3, [r4, #80]	; 0x50
 8008a92:	4b13      	ldr	r3, [pc, #76]	; (8008ae0 <__sinit+0x68>)
 8008a94:	4a13      	ldr	r2, [pc, #76]	; (8008ae4 <__sinit+0x6c>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a9a:	42a3      	cmp	r3, r4
 8008a9c:	bf04      	itt	eq
 8008a9e:	2301      	moveq	r3, #1
 8008aa0:	61a3      	streq	r3, [r4, #24]
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f000 f820 	bl	8008ae8 <__sfp>
 8008aa8:	6060      	str	r0, [r4, #4]
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f000 f81c 	bl	8008ae8 <__sfp>
 8008ab0:	60a0      	str	r0, [r4, #8]
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f000 f818 	bl	8008ae8 <__sfp>
 8008ab8:	2200      	movs	r2, #0
 8008aba:	60e0      	str	r0, [r4, #12]
 8008abc:	2104      	movs	r1, #4
 8008abe:	6860      	ldr	r0, [r4, #4]
 8008ac0:	f7ff ff82 	bl	80089c8 <std>
 8008ac4:	68a0      	ldr	r0, [r4, #8]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	2109      	movs	r1, #9
 8008aca:	f7ff ff7d 	bl	80089c8 <std>
 8008ace:	68e0      	ldr	r0, [r4, #12]
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	2112      	movs	r1, #18
 8008ad4:	f7ff ff78 	bl	80089c8 <std>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	61a3      	str	r3, [r4, #24]
 8008adc:	e7d2      	b.n	8008a84 <__sinit+0xc>
 8008ade:	bf00      	nop
 8008ae0:	08008ed8 	.word	0x08008ed8
 8008ae4:	08008a11 	.word	0x08008a11

08008ae8 <__sfp>:
 8008ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aea:	4607      	mov	r7, r0
 8008aec:	f7ff ffac 	bl	8008a48 <__sfp_lock_acquire>
 8008af0:	4b1e      	ldr	r3, [pc, #120]	; (8008b6c <__sfp+0x84>)
 8008af2:	681e      	ldr	r6, [r3, #0]
 8008af4:	69b3      	ldr	r3, [r6, #24]
 8008af6:	b913      	cbnz	r3, 8008afe <__sfp+0x16>
 8008af8:	4630      	mov	r0, r6
 8008afa:	f7ff ffbd 	bl	8008a78 <__sinit>
 8008afe:	3648      	adds	r6, #72	; 0x48
 8008b00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b04:	3b01      	subs	r3, #1
 8008b06:	d503      	bpl.n	8008b10 <__sfp+0x28>
 8008b08:	6833      	ldr	r3, [r6, #0]
 8008b0a:	b30b      	cbz	r3, 8008b50 <__sfp+0x68>
 8008b0c:	6836      	ldr	r6, [r6, #0]
 8008b0e:	e7f7      	b.n	8008b00 <__sfp+0x18>
 8008b10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b14:	b9d5      	cbnz	r5, 8008b4c <__sfp+0x64>
 8008b16:	4b16      	ldr	r3, [pc, #88]	; (8008b70 <__sfp+0x88>)
 8008b18:	60e3      	str	r3, [r4, #12]
 8008b1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b1e:	6665      	str	r5, [r4, #100]	; 0x64
 8008b20:	f000 f847 	bl	8008bb2 <__retarget_lock_init_recursive>
 8008b24:	f7ff ff96 	bl	8008a54 <__sfp_lock_release>
 8008b28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b30:	6025      	str	r5, [r4, #0]
 8008b32:	61a5      	str	r5, [r4, #24]
 8008b34:	2208      	movs	r2, #8
 8008b36:	4629      	mov	r1, r5
 8008b38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b3c:	f7fb fe3c 	bl	80047b8 <memset>
 8008b40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b48:	4620      	mov	r0, r4
 8008b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b4c:	3468      	adds	r4, #104	; 0x68
 8008b4e:	e7d9      	b.n	8008b04 <__sfp+0x1c>
 8008b50:	2104      	movs	r1, #4
 8008b52:	4638      	mov	r0, r7
 8008b54:	f7ff ff62 	bl	8008a1c <__sfmoreglue>
 8008b58:	4604      	mov	r4, r0
 8008b5a:	6030      	str	r0, [r6, #0]
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d1d5      	bne.n	8008b0c <__sfp+0x24>
 8008b60:	f7ff ff78 	bl	8008a54 <__sfp_lock_release>
 8008b64:	230c      	movs	r3, #12
 8008b66:	603b      	str	r3, [r7, #0]
 8008b68:	e7ee      	b.n	8008b48 <__sfp+0x60>
 8008b6a:	bf00      	nop
 8008b6c:	08008ed8 	.word	0x08008ed8
 8008b70:	ffff0001 	.word	0xffff0001

08008b74 <_fwalk_reent>:
 8008b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b78:	4606      	mov	r6, r0
 8008b7a:	4688      	mov	r8, r1
 8008b7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b80:	2700      	movs	r7, #0
 8008b82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b86:	f1b9 0901 	subs.w	r9, r9, #1
 8008b8a:	d505      	bpl.n	8008b98 <_fwalk_reent+0x24>
 8008b8c:	6824      	ldr	r4, [r4, #0]
 8008b8e:	2c00      	cmp	r4, #0
 8008b90:	d1f7      	bne.n	8008b82 <_fwalk_reent+0xe>
 8008b92:	4638      	mov	r0, r7
 8008b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b98:	89ab      	ldrh	r3, [r5, #12]
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d907      	bls.n	8008bae <_fwalk_reent+0x3a>
 8008b9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	d003      	beq.n	8008bae <_fwalk_reent+0x3a>
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	4630      	mov	r0, r6
 8008baa:	47c0      	blx	r8
 8008bac:	4307      	orrs	r7, r0
 8008bae:	3568      	adds	r5, #104	; 0x68
 8008bb0:	e7e9      	b.n	8008b86 <_fwalk_reent+0x12>

08008bb2 <__retarget_lock_init_recursive>:
 8008bb2:	4770      	bx	lr

08008bb4 <__retarget_lock_acquire_recursive>:
 8008bb4:	4770      	bx	lr

08008bb6 <__retarget_lock_release_recursive>:
 8008bb6:	4770      	bx	lr

08008bb8 <__swhatbuf_r>:
 8008bb8:	b570      	push	{r4, r5, r6, lr}
 8008bba:	460e      	mov	r6, r1
 8008bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bc0:	2900      	cmp	r1, #0
 8008bc2:	b096      	sub	sp, #88	; 0x58
 8008bc4:	4614      	mov	r4, r2
 8008bc6:	461d      	mov	r5, r3
 8008bc8:	da07      	bge.n	8008bda <__swhatbuf_r+0x22>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	602b      	str	r3, [r5, #0]
 8008bce:	89b3      	ldrh	r3, [r6, #12]
 8008bd0:	061a      	lsls	r2, r3, #24
 8008bd2:	d410      	bmi.n	8008bf6 <__swhatbuf_r+0x3e>
 8008bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bd8:	e00e      	b.n	8008bf8 <__swhatbuf_r+0x40>
 8008bda:	466a      	mov	r2, sp
 8008bdc:	f000 f902 	bl	8008de4 <_fstat_r>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	dbf2      	blt.n	8008bca <__swhatbuf_r+0x12>
 8008be4:	9a01      	ldr	r2, [sp, #4]
 8008be6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008bee:	425a      	negs	r2, r3
 8008bf0:	415a      	adcs	r2, r3
 8008bf2:	602a      	str	r2, [r5, #0]
 8008bf4:	e7ee      	b.n	8008bd4 <__swhatbuf_r+0x1c>
 8008bf6:	2340      	movs	r3, #64	; 0x40
 8008bf8:	2000      	movs	r0, #0
 8008bfa:	6023      	str	r3, [r4, #0]
 8008bfc:	b016      	add	sp, #88	; 0x58
 8008bfe:	bd70      	pop	{r4, r5, r6, pc}

08008c00 <__smakebuf_r>:
 8008c00:	898b      	ldrh	r3, [r1, #12]
 8008c02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c04:	079d      	lsls	r5, r3, #30
 8008c06:	4606      	mov	r6, r0
 8008c08:	460c      	mov	r4, r1
 8008c0a:	d507      	bpl.n	8008c1c <__smakebuf_r+0x1c>
 8008c0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	6123      	str	r3, [r4, #16]
 8008c14:	2301      	movs	r3, #1
 8008c16:	6163      	str	r3, [r4, #20]
 8008c18:	b002      	add	sp, #8
 8008c1a:	bd70      	pop	{r4, r5, r6, pc}
 8008c1c:	ab01      	add	r3, sp, #4
 8008c1e:	466a      	mov	r2, sp
 8008c20:	f7ff ffca 	bl	8008bb8 <__swhatbuf_r>
 8008c24:	9900      	ldr	r1, [sp, #0]
 8008c26:	4605      	mov	r5, r0
 8008c28:	4630      	mov	r0, r6
 8008c2a:	f7ff f97f 	bl	8007f2c <_malloc_r>
 8008c2e:	b948      	cbnz	r0, 8008c44 <__smakebuf_r+0x44>
 8008c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c34:	059a      	lsls	r2, r3, #22
 8008c36:	d4ef      	bmi.n	8008c18 <__smakebuf_r+0x18>
 8008c38:	f023 0303 	bic.w	r3, r3, #3
 8008c3c:	f043 0302 	orr.w	r3, r3, #2
 8008c40:	81a3      	strh	r3, [r4, #12]
 8008c42:	e7e3      	b.n	8008c0c <__smakebuf_r+0xc>
 8008c44:	4b0d      	ldr	r3, [pc, #52]	; (8008c7c <__smakebuf_r+0x7c>)
 8008c46:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c48:	89a3      	ldrh	r3, [r4, #12]
 8008c4a:	6020      	str	r0, [r4, #0]
 8008c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c50:	81a3      	strh	r3, [r4, #12]
 8008c52:	9b00      	ldr	r3, [sp, #0]
 8008c54:	6163      	str	r3, [r4, #20]
 8008c56:	9b01      	ldr	r3, [sp, #4]
 8008c58:	6120      	str	r0, [r4, #16]
 8008c5a:	b15b      	cbz	r3, 8008c74 <__smakebuf_r+0x74>
 8008c5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c60:	4630      	mov	r0, r6
 8008c62:	f000 f8d1 	bl	8008e08 <_isatty_r>
 8008c66:	b128      	cbz	r0, 8008c74 <__smakebuf_r+0x74>
 8008c68:	89a3      	ldrh	r3, [r4, #12]
 8008c6a:	f023 0303 	bic.w	r3, r3, #3
 8008c6e:	f043 0301 	orr.w	r3, r3, #1
 8008c72:	81a3      	strh	r3, [r4, #12]
 8008c74:	89a0      	ldrh	r0, [r4, #12]
 8008c76:	4305      	orrs	r5, r0
 8008c78:	81a5      	strh	r5, [r4, #12]
 8008c7a:	e7cd      	b.n	8008c18 <__smakebuf_r+0x18>
 8008c7c:	08008a11 	.word	0x08008a11

08008c80 <_malloc_usable_size_r>:
 8008c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c84:	1f18      	subs	r0, r3, #4
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	bfbc      	itt	lt
 8008c8a:	580b      	ldrlt	r3, [r1, r0]
 8008c8c:	18c0      	addlt	r0, r0, r3
 8008c8e:	4770      	bx	lr

08008c90 <_raise_r>:
 8008c90:	291f      	cmp	r1, #31
 8008c92:	b538      	push	{r3, r4, r5, lr}
 8008c94:	4604      	mov	r4, r0
 8008c96:	460d      	mov	r5, r1
 8008c98:	d904      	bls.n	8008ca4 <_raise_r+0x14>
 8008c9a:	2316      	movs	r3, #22
 8008c9c:	6003      	str	r3, [r0, #0]
 8008c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
 8008ca4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008ca6:	b112      	cbz	r2, 8008cae <_raise_r+0x1e>
 8008ca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008cac:	b94b      	cbnz	r3, 8008cc2 <_raise_r+0x32>
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f000 f830 	bl	8008d14 <_getpid_r>
 8008cb4:	462a      	mov	r2, r5
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	4620      	mov	r0, r4
 8008cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cbe:	f000 b817 	b.w	8008cf0 <_kill_r>
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d00a      	beq.n	8008cdc <_raise_r+0x4c>
 8008cc6:	1c59      	adds	r1, r3, #1
 8008cc8:	d103      	bne.n	8008cd2 <_raise_r+0x42>
 8008cca:	2316      	movs	r3, #22
 8008ccc:	6003      	str	r3, [r0, #0]
 8008cce:	2001      	movs	r0, #1
 8008cd0:	e7e7      	b.n	8008ca2 <_raise_r+0x12>
 8008cd2:	2400      	movs	r4, #0
 8008cd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008cd8:	4628      	mov	r0, r5
 8008cda:	4798      	blx	r3
 8008cdc:	2000      	movs	r0, #0
 8008cde:	e7e0      	b.n	8008ca2 <_raise_r+0x12>

08008ce0 <raise>:
 8008ce0:	4b02      	ldr	r3, [pc, #8]	; (8008cec <raise+0xc>)
 8008ce2:	4601      	mov	r1, r0
 8008ce4:	6818      	ldr	r0, [r3, #0]
 8008ce6:	f7ff bfd3 	b.w	8008c90 <_raise_r>
 8008cea:	bf00      	nop
 8008cec:	24000014 	.word	0x24000014

08008cf0 <_kill_r>:
 8008cf0:	b538      	push	{r3, r4, r5, lr}
 8008cf2:	4d07      	ldr	r5, [pc, #28]	; (8008d10 <_kill_r+0x20>)
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	4608      	mov	r0, r1
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	602b      	str	r3, [r5, #0]
 8008cfe:	f7f7 ffef 	bl	8000ce0 <_kill>
 8008d02:	1c43      	adds	r3, r0, #1
 8008d04:	d102      	bne.n	8008d0c <_kill_r+0x1c>
 8008d06:	682b      	ldr	r3, [r5, #0]
 8008d08:	b103      	cbz	r3, 8008d0c <_kill_r+0x1c>
 8008d0a:	6023      	str	r3, [r4, #0]
 8008d0c:	bd38      	pop	{r3, r4, r5, pc}
 8008d0e:	bf00      	nop
 8008d10:	24000268 	.word	0x24000268

08008d14 <_getpid_r>:
 8008d14:	f7f7 bfdc 	b.w	8000cd0 <_getpid>

08008d18 <__sread>:
 8008d18:	b510      	push	{r4, lr}
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d20:	f000 f894 	bl	8008e4c <_read_r>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	bfab      	itete	ge
 8008d28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d2a:	89a3      	ldrhlt	r3, [r4, #12]
 8008d2c:	181b      	addge	r3, r3, r0
 8008d2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d32:	bfac      	ite	ge
 8008d34:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d36:	81a3      	strhlt	r3, [r4, #12]
 8008d38:	bd10      	pop	{r4, pc}

08008d3a <__swrite>:
 8008d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3e:	461f      	mov	r7, r3
 8008d40:	898b      	ldrh	r3, [r1, #12]
 8008d42:	05db      	lsls	r3, r3, #23
 8008d44:	4605      	mov	r5, r0
 8008d46:	460c      	mov	r4, r1
 8008d48:	4616      	mov	r6, r2
 8008d4a:	d505      	bpl.n	8008d58 <__swrite+0x1e>
 8008d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d50:	2302      	movs	r3, #2
 8008d52:	2200      	movs	r2, #0
 8008d54:	f000 f868 	bl	8008e28 <_lseek_r>
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	4632      	mov	r2, r6
 8008d66:	463b      	mov	r3, r7
 8008d68:	4628      	mov	r0, r5
 8008d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6e:	f000 b817 	b.w	8008da0 <_write_r>

08008d72 <__sseek>:
 8008d72:	b510      	push	{r4, lr}
 8008d74:	460c      	mov	r4, r1
 8008d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d7a:	f000 f855 	bl	8008e28 <_lseek_r>
 8008d7e:	1c43      	adds	r3, r0, #1
 8008d80:	89a3      	ldrh	r3, [r4, #12]
 8008d82:	bf15      	itete	ne
 8008d84:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d8e:	81a3      	strheq	r3, [r4, #12]
 8008d90:	bf18      	it	ne
 8008d92:	81a3      	strhne	r3, [r4, #12]
 8008d94:	bd10      	pop	{r4, pc}

08008d96 <__sclose>:
 8008d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d9a:	f000 b813 	b.w	8008dc4 <_close_r>
	...

08008da0 <_write_r>:
 8008da0:	b538      	push	{r3, r4, r5, lr}
 8008da2:	4d07      	ldr	r5, [pc, #28]	; (8008dc0 <_write_r+0x20>)
 8008da4:	4604      	mov	r4, r0
 8008da6:	4608      	mov	r0, r1
 8008da8:	4611      	mov	r1, r2
 8008daa:	2200      	movs	r2, #0
 8008dac:	602a      	str	r2, [r5, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	f7f7 ffcd 	bl	8000d4e <_write>
 8008db4:	1c43      	adds	r3, r0, #1
 8008db6:	d102      	bne.n	8008dbe <_write_r+0x1e>
 8008db8:	682b      	ldr	r3, [r5, #0]
 8008dba:	b103      	cbz	r3, 8008dbe <_write_r+0x1e>
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
 8008dc0:	24000268 	.word	0x24000268

08008dc4 <_close_r>:
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	4d06      	ldr	r5, [pc, #24]	; (8008de0 <_close_r+0x1c>)
 8008dc8:	2300      	movs	r3, #0
 8008dca:	4604      	mov	r4, r0
 8008dcc:	4608      	mov	r0, r1
 8008dce:	602b      	str	r3, [r5, #0]
 8008dd0:	f7f7 ffd9 	bl	8000d86 <_close>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d102      	bne.n	8008dde <_close_r+0x1a>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	b103      	cbz	r3, 8008dde <_close_r+0x1a>
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	bd38      	pop	{r3, r4, r5, pc}
 8008de0:	24000268 	.word	0x24000268

08008de4 <_fstat_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4d07      	ldr	r5, [pc, #28]	; (8008e04 <_fstat_r+0x20>)
 8008de8:	2300      	movs	r3, #0
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	4611      	mov	r1, r2
 8008df0:	602b      	str	r3, [r5, #0]
 8008df2:	f7f7 ffd4 	bl	8000d9e <_fstat>
 8008df6:	1c43      	adds	r3, r0, #1
 8008df8:	d102      	bne.n	8008e00 <_fstat_r+0x1c>
 8008dfa:	682b      	ldr	r3, [r5, #0]
 8008dfc:	b103      	cbz	r3, 8008e00 <_fstat_r+0x1c>
 8008dfe:	6023      	str	r3, [r4, #0]
 8008e00:	bd38      	pop	{r3, r4, r5, pc}
 8008e02:	bf00      	nop
 8008e04:	24000268 	.word	0x24000268

08008e08 <_isatty_r>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	4d06      	ldr	r5, [pc, #24]	; (8008e24 <_isatty_r+0x1c>)
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	4604      	mov	r4, r0
 8008e10:	4608      	mov	r0, r1
 8008e12:	602b      	str	r3, [r5, #0]
 8008e14:	f7f7 ffd3 	bl	8000dbe <_isatty>
 8008e18:	1c43      	adds	r3, r0, #1
 8008e1a:	d102      	bne.n	8008e22 <_isatty_r+0x1a>
 8008e1c:	682b      	ldr	r3, [r5, #0]
 8008e1e:	b103      	cbz	r3, 8008e22 <_isatty_r+0x1a>
 8008e20:	6023      	str	r3, [r4, #0]
 8008e22:	bd38      	pop	{r3, r4, r5, pc}
 8008e24:	24000268 	.word	0x24000268

08008e28 <_lseek_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4d07      	ldr	r5, [pc, #28]	; (8008e48 <_lseek_r+0x20>)
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	4608      	mov	r0, r1
 8008e30:	4611      	mov	r1, r2
 8008e32:	2200      	movs	r2, #0
 8008e34:	602a      	str	r2, [r5, #0]
 8008e36:	461a      	mov	r2, r3
 8008e38:	f7f7 ffcc 	bl	8000dd4 <_lseek>
 8008e3c:	1c43      	adds	r3, r0, #1
 8008e3e:	d102      	bne.n	8008e46 <_lseek_r+0x1e>
 8008e40:	682b      	ldr	r3, [r5, #0]
 8008e42:	b103      	cbz	r3, 8008e46 <_lseek_r+0x1e>
 8008e44:	6023      	str	r3, [r4, #0]
 8008e46:	bd38      	pop	{r3, r4, r5, pc}
 8008e48:	24000268 	.word	0x24000268

08008e4c <_read_r>:
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	4d07      	ldr	r5, [pc, #28]	; (8008e6c <_read_r+0x20>)
 8008e50:	4604      	mov	r4, r0
 8008e52:	4608      	mov	r0, r1
 8008e54:	4611      	mov	r1, r2
 8008e56:	2200      	movs	r2, #0
 8008e58:	602a      	str	r2, [r5, #0]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	f7f7 ff5a 	bl	8000d14 <_read>
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	d102      	bne.n	8008e6a <_read_r+0x1e>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	b103      	cbz	r3, 8008e6a <_read_r+0x1e>
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}
 8008e6c:	24000268 	.word	0x24000268

08008e70 <_init>:
 8008e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e72:	bf00      	nop
 8008e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e76:	bc08      	pop	{r3}
 8008e78:	469e      	mov	lr, r3
 8008e7a:	4770      	bx	lr

08008e7c <_fini>:
 8008e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7e:	bf00      	nop
 8008e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e82:	bc08      	pop	{r3}
 8008e84:	469e      	mov	lr, r3
 8008e86:	4770      	bx	lr
