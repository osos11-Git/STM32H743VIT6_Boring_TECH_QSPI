
H743_QSPI_XIP_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004288  08004288  00014288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004298  08004298  00014298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800429c  0800429c  0001429c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080042a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d4  24000010  080042b0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240000e4  080042b0  000200e4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013fea  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002545  00000000  00000000  00034028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000008e0  00000000  00000000  00036570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000808  00000000  00000000  00036e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003504b  00000000  00000000  00037658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b30e  00000000  00000000  0006c6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014fdcb  00000000  00000000  000779b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001c777c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002290  00000000  00000000  001c77d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004270 	.word	0x08004270

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004270 	.word	0x08004270

080002d8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b087      	sub	sp, #28
 80002dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002de:	4b28      	ldr	r3, [pc, #160]	; (8000380 <MX_GPIO_Init+0xa8>)
 80002e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002e4:	4a26      	ldr	r2, [pc, #152]	; (8000380 <MX_GPIO_Init+0xa8>)
 80002e6:	f043 0310 	orr.w	r3, r3, #16
 80002ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002ee:	4b24      	ldr	r3, [pc, #144]	; (8000380 <MX_GPIO_Init+0xa8>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	f003 0310 	and.w	r3, r3, #16
 80002f8:	617b      	str	r3, [r7, #20]
 80002fa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002fc:	4b20      	ldr	r3, [pc, #128]	; (8000380 <MX_GPIO_Init+0xa8>)
 80002fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000302:	4a1f      	ldr	r2, [pc, #124]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800030c:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <MX_GPIO_Init+0xa8>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000316:	613b      	str	r3, [r7, #16]
 8000318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <MX_GPIO_Init+0xa8>)
 800031c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000320:	4a17      	ldr	r2, [pc, #92]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800032a:	4b15      	ldr	r3, [pc, #84]	; (8000380 <MX_GPIO_Init+0xa8>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	f003 0301 	and.w	r3, r3, #1
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_GPIO_Init+0xa8>)
 800033a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800033e:	4a10      	ldr	r2, [pc, #64]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000340:	f043 0302 	orr.w	r3, r3, #2
 8000344:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000348:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <MX_GPIO_Init+0xa8>)
 800034a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800034e:	f003 0302 	and.w	r3, r3, #2
 8000352:	60bb      	str	r3, [r7, #8]
 8000354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000356:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800035c:	4a08      	ldr	r2, [pc, #32]	; (8000380 <MX_GPIO_Init+0xa8>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800036c:	f003 0308 	and.w	r3, r3, #8
 8000370:	607b      	str	r3, [r7, #4]
 8000372:	687b      	ldr	r3, [r7, #4]

}
 8000374:	bf00      	nop
 8000376:	371c      	adds	r7, #28
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	58024400 	.word	0x58024400

08000384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b088      	sub	sp, #32
 8000388:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800038a:	4b72      	ldr	r3, [pc, #456]	; (8000554 <main+0x1d0>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000392:	2b00      	cmp	r3, #0
 8000394:	d11b      	bne.n	80003ce <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039c:	f3bf 8f6f 	isb	sy
}
 80003a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003a2:	4b6c      	ldr	r3, [pc, #432]	; (8000554 <main+0x1d0>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003aa:	f3bf 8f4f 	dsb	sy
}
 80003ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b0:	f3bf 8f6f 	isb	sy
}
 80003b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003b6:	4b67      	ldr	r3, [pc, #412]	; (8000554 <main+0x1d0>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a66      	ldr	r2, [pc, #408]	; (8000554 <main+0x1d0>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003c2:	f3bf 8f4f 	dsb	sy
}
 80003c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
}
 80003cc:	e000      	b.n	80003d0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003d0:	4b60      	ldr	r3, [pc, #384]	; (8000554 <main+0x1d0>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d138      	bne.n	800044e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003dc:	4b5d      	ldr	r3, [pc, #372]	; (8000554 <main+0x1d0>)
 80003de:	2200      	movs	r2, #0
 80003e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003e4:	f3bf 8f4f 	dsb	sy
}
 80003e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003ea:	4b5a      	ldr	r3, [pc, #360]	; (8000554 <main+0x1d0>)
 80003ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003f0:	61fb      	str	r3, [r7, #28]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003f2:	69fb      	ldr	r3, [r7, #28]
 80003f4:	0b5b      	lsrs	r3, r3, #13
 80003f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003fa:	61bb      	str	r3, [r7, #24]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003fc:	69fb      	ldr	r3, [r7, #28]
 80003fe:	08db      	lsrs	r3, r3, #3
 8000400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000404:	617b      	str	r3, [r7, #20]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000406:	69bb      	ldr	r3, [r7, #24]
 8000408:	015a      	lsls	r2, r3, #5
 800040a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800040e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000410:	697a      	ldr	r2, [r7, #20]
 8000412:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000414:	494f      	ldr	r1, [pc, #316]	; (8000554 <main+0x1d0>)
 8000416:	4313      	orrs	r3, r2
 8000418:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	617a      	str	r2, [r7, #20]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1ef      	bne.n	8000406 <main+0x82>
    } while(sets-- != 0U);
 8000426:	69bb      	ldr	r3, [r7, #24]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	61ba      	str	r2, [r7, #24]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1e5      	bne.n	80003fc <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000430:	f3bf 8f4f 	dsb	sy
}
 8000434:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000436:	4b47      	ldr	r3, [pc, #284]	; (8000554 <main+0x1d0>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a46      	ldr	r2, [pc, #280]	; (8000554 <main+0x1d0>)
 800043c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000448:	f3bf 8f6f 	isb	sy
}
 800044c:	e000      	b.n	8000450 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800044e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000450:	f000 fd9e 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000454:	f000 f886 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000458:	f7ff ff3e 	bl	80002d8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 800045c:	f000 f906 	bl	800066c <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  if (CSP_QUADSPI_Init() != HAL_OK)
 8000460:	f000 fa3e 	bl	80008e0 <CSP_QUADSPI_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <main+0xea>
  {
	  Error_Handler();
 800046a:	f000 f8f9 	bl	8000660 <Error_Handler>
  }

  HAL_Delay(100);
 800046e:	2064      	movs	r0, #100	; 0x64
 8000470:	f000 fe20 	bl	80010b4 <HAL_Delay>
	  Error_Handler();
  }
  */


  if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK)
 8000474:	f000 fbee 	bl	8000c54 <CSP_QSPI_EnableMemoryMappedMode>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <main+0xfe>
  {
	  Error_Handler();
 800047e:	f000 f8ef 	bl	8000660 <Error_Handler>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000482:	4b34      	ldr	r3, [pc, #208]	; (8000554 <main+0x1d0>)
 8000484:	2200      	movs	r2, #0
 8000486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800048a:	f3bf 8f4f 	dsb	sy
}
 800048e:	bf00      	nop
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 8000490:	4b30      	ldr	r3, [pc, #192]	; (8000554 <main+0x1d0>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a2f      	ldr	r2, [pc, #188]	; (8000554 <main+0x1d0>)
 8000496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800049a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800049c:	f3bf 8f4f 	dsb	sy
}
 80004a0:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80004a2:	4b2c      	ldr	r3, [pc, #176]	; (8000554 <main+0x1d0>)
 80004a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004a8:	60fb      	str	r3, [r7, #12]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	0b5b      	lsrs	r3, r3, #13
 80004ae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80004b2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	08db      	lsrs	r3, r3, #3
 80004b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004bc:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	015a      	lsls	r2, r3, #5
 80004c2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80004c6:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80004cc:	4921      	ldr	r1, [pc, #132]	; (8000554 <main+0x1d0>)
 80004ce:	4313      	orrs	r3, r2
 80004d0:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	1e5a      	subs	r2, r3, #1
 80004d8:	607a      	str	r2, [r7, #4]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d1ef      	bne.n	80004be <main+0x13a>
    } while(sets-- != 0U);
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	1e5a      	subs	r2, r3, #1
 80004e2:	60ba      	str	r2, [r7, #8]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d1e5      	bne.n	80004b4 <main+0x130>
  __ASM volatile ("dsb 0xF":::"memory");
 80004e8:	f3bf 8f4f 	dsb	sy
}
 80004ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004ee:	f3bf 8f6f 	isb	sy
}
 80004f2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80004f4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80004f6:	f3bf 8f4f 	dsb	sy
}
 80004fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004fc:	f3bf 8f6f 	isb	sy
}
 8000500:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000502:	4b14      	ldr	r3, [pc, #80]	; (8000554 <main+0x1d0>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a13      	ldr	r2, [pc, #76]	; (8000554 <main+0x1d0>)
 8000508:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800050c:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <main+0x1d0>)
 8000510:	2200      	movs	r2, #0
 8000512:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000516:	f3bf 8f4f 	dsb	sy
}
 800051a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800051c:	f3bf 8f6f 	isb	sy
}
 8000520:	bf00      	nop
}
 8000522:	bf00      	nop
 // memcpy(writebuf,(u8*)0x90000000,50);

  SCB_DisableDCache();
  SCB_DisableICache();

  SysTick->CTRL=0;
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <main+0x1d4>)
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]

  JumpToApplication=(pFunction) (*(__IO u32*) (APPLICATION_ADDRESS+4));
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <main+0x1d8>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	461a      	mov	r2, r3
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <main+0x1dc>)
 8000532:	601a      	str	r2, [r3, #0]
  __set_MSP(*(__IO u32*) APPLICATION_ADDRESS);
 8000534:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800053c:	693b      	ldr	r3, [r7, #16]
 800053e:	f383 8808 	msr	MSP, r3
}
 8000542:	bf00      	nop
  JumpToApplication();
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <main+0x1dc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4798      	blx	r3
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_Delay(1000);
 800054a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800054e:	f000 fdb1 	bl	80010b4 <HAL_Delay>
 8000552:	e7fa      	b.n	800054a <main+0x1c6>
 8000554:	e000ed00 	.word	0xe000ed00
 8000558:	e000e010 	.word	0xe000e010
 800055c:	90000004 	.word	0x90000004
 8000560:	24000090 	.word	0x24000090

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b09c      	sub	sp, #112	; 0x70
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800056e:	224c      	movs	r2, #76	; 0x4c
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f003 fe74 	bl	8004260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2220      	movs	r2, #32
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fe6e 	bl	8004260 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000584:	2002      	movs	r0, #2
 8000586:	f001 f963 	bl	8001850 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800058a:	2300      	movs	r3, #0
 800058c:	603b      	str	r3, [r7, #0]
 800058e:	4b32      	ldr	r3, [pc, #200]	; (8000658 <SystemClock_Config+0xf4>)
 8000590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000592:	4a31      	ldr	r2, [pc, #196]	; (8000658 <SystemClock_Config+0xf4>)
 8000594:	f023 0301 	bic.w	r3, r3, #1
 8000598:	62d3      	str	r3, [r2, #44]	; 0x2c
 800059a:	4b2f      	ldr	r3, [pc, #188]	; (8000658 <SystemClock_Config+0xf4>)
 800059c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	4b2d      	ldr	r3, [pc, #180]	; (800065c <SystemClock_Config+0xf8>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ac:	4a2b      	ldr	r2, [pc, #172]	; (800065c <SystemClock_Config+0xf8>)
 80005ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b29      	ldr	r3, [pc, #164]	; (800065c <SystemClock_Config+0xf8>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005c0:	bf00      	nop
 80005c2:	4b26      	ldr	r3, [pc, #152]	; (800065c <SystemClock_Config+0xf8>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005ce:	d1f8      	bne.n	80005c2 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d0:	2301      	movs	r3, #1
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	2302      	movs	r3, #2
 80005e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e2:	2304      	movs	r3, #4
 80005e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 266;
 80005e6:	f44f 7385 	mov.w	r3, #266	; 0x10a
 80005ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80005f8:	2304      	movs	r3, #4
 80005fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fe21 	bl	8002250 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000614:	f000 f824 	bl	8000660 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	233f      	movs	r3, #63	; 0x3f
 800061a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2303      	movs	r3, #3
 800061e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000624:	2308      	movs	r3, #8
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000628:	2340      	movs	r3, #64	; 0x40
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800062c:	2340      	movs	r3, #64	; 0x40
 800062e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000630:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000634:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000636:	2340      	movs	r3, #64	; 0x40
 8000638:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2102      	movs	r1, #2
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fa16 	bl	8002a70 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800064a:	f000 f809 	bl	8000660 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3770      	adds	r7, #112	; 0x70
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	58000400 	.word	0x58000400
 800065c:	58024800 	.word	0x58024800

08000660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000664:	b672      	cpsid	i
}
 8000666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000668:	e7fe      	b.n	8000668 <Error_Handler+0x8>
	...

0800066c <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <MX_QUADSPI_Init+0x50>)
 8000672:	4a13      	ldr	r2, [pc, #76]	; (80006c0 <MX_QUADSPI_Init+0x54>)
 8000674:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000676:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_QUADSPI_Init+0x50>)
 8000678:	2201      	movs	r2, #1
 800067a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800067c:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <MX_QUADSPI_Init+0x50>)
 800067e:	2204      	movs	r2, #4
 8000680:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000682:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_QUADSPI_Init+0x50>)
 8000684:	2210      	movs	r2, #16
 8000686:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_QUADSPI_Init+0x50>)
 800068a:	2216      	movs	r2, #22
 800068c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 800068e:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <MX_QUADSPI_Init+0x50>)
 8000690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000694:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_QUADSPI_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <MX_QUADSPI_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <MX_QUADSPI_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	; (80006bc <MX_QUADSPI_Init+0x50>)
 80006aa:	f001 f90b 	bl	80018c4 <HAL_QSPI_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80006b4:	f7ff ffd4 	bl	8000660 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	24000094 	.word	0x24000094
 80006c0:	52005000 	.word	0x52005000

080006c4 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b0bc      	sub	sp, #240	; 0xf0
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	22bc      	movs	r2, #188	; 0xbc
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 fdbb 	bl	8004260 <memset>
  if(qspiHandle->Instance==QUADSPI)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a5c      	ldr	r2, [pc, #368]	; (8000860 <HAL_QSPI_MspInit+0x19c>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	f040 80b0 	bne.w	8000856 <HAL_QSPI_MspInit+0x192>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80006f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006fa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80006fc:	2300      	movs	r3, #0
 80006fe:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fce3 	bl	80030d0 <HAL_RCCEx_PeriphCLKConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8000710:	f7ff ffa6 	bl	8000660 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000714:	4b53      	ldr	r3, [pc, #332]	; (8000864 <HAL_QSPI_MspInit+0x1a0>)
 8000716:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800071a:	4a52      	ldr	r2, [pc, #328]	; (8000864 <HAL_QSPI_MspInit+0x1a0>)
 800071c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000720:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000724:	4b4f      	ldr	r3, [pc, #316]	; (8000864 <HAL_QSPI_MspInit+0x1a0>)
 8000726:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800072a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072e:	61fb      	str	r3, [r7, #28]
 8000730:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000732:	4b4c      	ldr	r3, [pc, #304]	; (8000864 <HAL_QSPI_MspInit+0x1a0>)
 8000734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000738:	4a4a      	ldr	r2, [pc, #296]	; (8000864 <HAL_QSPI_MspInit+0x1a0>)
 800073a:	f043 0310 	orr.w	r3, r3, #16
 800073e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000742:	4b48      	ldr	r3, [pc, #288]	; (8000864 <HAL_QSPI_MspInit+0x1a0>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	f003 0310 	and.w	r3, r3, #16
 800074c:	61bb      	str	r3, [r7, #24]
 800074e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b44      	ldr	r3, [pc, #272]	; (8000864 <HAL_QSPI_MspInit+0x1a0>)
 8000752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000756:	4a43      	ldr	r2, [pc, #268]	; (8000864 <HAL_QSPI_MspInit+0x1a0>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000760:	4b40      	ldr	r3, [pc, #256]	; (8000864 <HAL_QSPI_MspInit+0x1a0>)
 8000762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b3d      	ldr	r3, [pc, #244]	; (8000864 <HAL_QSPI_MspInit+0x1a0>)
 8000770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000774:	4a3b      	ldr	r2, [pc, #236]	; (8000864 <HAL_QSPI_MspInit+0x1a0>)
 8000776:	f043 0302 	orr.w	r3, r3, #2
 800077a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800077e:	4b39      	ldr	r3, [pc, #228]	; (8000864 <HAL_QSPI_MspInit+0x1a0>)
 8000780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000784:	f003 0302 	and.w	r3, r3, #2
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800078c:	4b35      	ldr	r3, [pc, #212]	; (8000864 <HAL_QSPI_MspInit+0x1a0>)
 800078e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000792:	4a34      	ldr	r2, [pc, #208]	; (8000864 <HAL_QSPI_MspInit+0x1a0>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800079c:	4b31      	ldr	r3, [pc, #196]	; (8000864 <HAL_QSPI_MspInit+0x1a0>)
 800079e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PB10     ------> QUADSPI_BK1_NCS
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007aa:	2304      	movs	r3, #4
 80007ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007c2:	2309      	movs	r3, #9
 80007c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007cc:	4619      	mov	r1, r3
 80007ce:	4826      	ldr	r0, [pc, #152]	; (8000868 <HAL_QSPI_MspInit+0x1a4>)
 80007d0:	f000 fd84 	bl	80012dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007d4:	2302      	movs	r3, #2
 80007d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e6:	2303      	movs	r3, #3
 80007e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80007ec:	2309      	movs	r3, #9
 80007ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007f6:	4619      	mov	r1, r3
 80007f8:	481c      	ldr	r0, [pc, #112]	; (800086c <HAL_QSPI_MspInit+0x1a8>)
 80007fa:	f000 fd6f 	bl	80012dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 80007fe:	f240 4304 	movw	r3, #1028	; 0x404
 8000802:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000818:	2309      	movs	r3, #9
 800081a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000822:	4619      	mov	r1, r3
 8000824:	4812      	ldr	r0, [pc, #72]	; (8000870 <HAL_QSPI_MspInit+0x1ac>)
 8000826:	f000 fd59 	bl	80012dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800082a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800082e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000844:	2309      	movs	r3, #9
 8000846:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800084a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800084e:	4619      	mov	r1, r3
 8000850:	4808      	ldr	r0, [pc, #32]	; (8000874 <HAL_QSPI_MspInit+0x1b0>)
 8000852:	f000 fd43 	bl	80012dc <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000856:	bf00      	nop
 8000858:	37f0      	adds	r7, #240	; 0xf0
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	52005000 	.word	0x52005000
 8000864:	58024400 	.word	0x58024400
 8000868:	58021000 	.word	0x58021000
 800086c:	58020000 	.word	0x58020000
 8000870:	58020400 	.word	0x58020400
 8000874:	58020c00 	.word	0x58020c00

08000878 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <HAL_QSPI_MspDeInit+0x50>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d119      	bne.n	80008be <HAL_QSPI_MspDeInit+0x46>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <HAL_QSPI_MspDeInit+0x54>)
 800088c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <HAL_QSPI_MspDeInit+0x54>)
 8000892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000896:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PB2     ------> QUADSPI_CLK
    PB10     ------> QUADSPI_BK1_NCS
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 800089a:	2104      	movs	r1, #4
 800089c:	480c      	ldr	r0, [pc, #48]	; (80008d0 <HAL_QSPI_MspDeInit+0x58>)
 800089e:	f000 fecd 	bl	800163c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
 80008a2:	2102      	movs	r1, #2
 80008a4:	480b      	ldr	r0, [pc, #44]	; (80008d4 <HAL_QSPI_MspDeInit+0x5c>)
 80008a6:	f000 fec9 	bl	800163c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_10);
 80008aa:	f240 4104 	movw	r1, #1028	; 0x404
 80008ae:	480a      	ldr	r0, [pc, #40]	; (80008d8 <HAL_QSPI_MspDeInit+0x60>)
 80008b0:	f000 fec4 	bl	800163c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_11|GPIO_PIN_12);
 80008b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80008b8:	4808      	ldr	r0, [pc, #32]	; (80008dc <HAL_QSPI_MspDeInit+0x64>)
 80008ba:	f000 febf 	bl	800163c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	52005000 	.word	0x52005000
 80008cc:	58024400 	.word	0x58024400
 80008d0:	58021000 	.word	0x58021000
 80008d4:	58020000 	.word	0x58020000
 80008d8:	58020400 	.word	0x58020400
 80008dc:	58020c00 	.word	0x58020c00

080008e0 <CSP_QUADSPI_Init>:

/* USER CODE BEGIN 1 */
/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0

	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <CSP_QUADSPI_Init+0x64>)
 80008e6:	4a18      	ldr	r2, [pc, #96]	; (8000948 <CSP_QUADSPI_Init+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 80008ea:	4816      	ldr	r0, [pc, #88]	; (8000944 <CSP_QUADSPI_Init+0x64>)
 80008ec:	f001 f85e 	bl	80019ac <HAL_QSPI_DeInit>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <CSP_QUADSPI_Init+0x1a>
		return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e021      	b.n	800093e <CSP_QUADSPI_Init+0x5e>
	}

	MX_QUADSPI_Init();
 80008fa:	f7ff feb7 	bl	800066c <MX_QUADSPI_Init>

	if (QSPI_ResetChip() != HAL_OK) {
 80008fe:	f000 f9e5 	bl	8000ccc <QSPI_ResetChip>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <CSP_QUADSPI_Init+0x2c>
		return HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	e018      	b.n	800093e <CSP_QUADSPI_Init+0x5e>
	}

	HAL_Delay(1);
 800090c:	2001      	movs	r0, #1
 800090e:	f000 fbd1 	bl	80010b4 <HAL_Delay>

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000912:	f000 f81b 	bl	800094c <QSPI_AutoPollingMemReady>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <CSP_QUADSPI_Init+0x40>
		return HAL_ERROR;
 800091c:	2301      	movs	r3, #1
 800091e:	e00e      	b.n	800093e <CSP_QUADSPI_Init+0x5e>
	}

	if (QSPI_WriteEnable() != HAL_OK) {
 8000920:	f000 f860 	bl	80009e4 <QSPI_WriteEnable>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <CSP_QUADSPI_Init+0x4e>

		return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e007      	b.n	800093e <CSP_QUADSPI_Init+0x5e>
	}

	if (QSPI_Configuration() != HAL_OK) {
 800092e:	f000 f8bb 	bl	8000aa8 <QSPI_Configuration>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <CSP_QUADSPI_Init+0x5c>
		return HAL_ERROR;
 8000938:	2301      	movs	r3, #1
 800093a:	e000      	b.n	800093e <CSP_QUADSPI_Init+0x5e>
	}

	return HAL_OK;
 800093c:	2300      	movs	r3, #0

}
 800093e:	4618      	mov	r0, r3
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	24000094 	.word	0x24000094
 8000948:	52005000 	.word	0x52005000

0800094c <QSPI_AutoPollingMemReady>:

	return HAL_OK;

}

uint8_t QSPI_AutoPollingMemReady(void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b096      	sub	sp, #88	; 0x58
 8000950:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = { 0 };
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	2238      	movs	r2, #56	; 0x38
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f003 fc80 	bl	8004260 <memset>
	QSPI_AutoPollingTypeDef sConfig = { 0 };
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]
 800096e:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef ret;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000970:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000974:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000976:	2305      	movs	r3, #5
 8000978:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800097a:	2300      	movs	r3, #0
 800097c:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800097e:	2300      	movs	r3, #0
 8000980:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000982:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000986:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DummyCycles = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000990:	2300      	movs	r3, #0
 8000992:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000994:	2300      	movs	r3, #0
 8000996:	653b      	str	r3, [r7, #80]	; 0x50

	sConfig.Match = 0x00;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
	sConfig.Mask = 0x01;
 800099c:	2301      	movs	r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
	sConfig.StatusBytesSize = 1;
 80009a4:	2301      	movs	r3, #1
 80009a6:	613b      	str	r3, [r7, #16]
	sConfig.Interval = 0x10;
 80009a8:	2310      	movs	r3, #16
 80009aa:	60fb      	str	r3, [r7, #12]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80009ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009b0:	61bb      	str	r3, [r7, #24]
	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 80009b2:	1d3a      	adds	r2, r7, #4
 80009b4:	f107 011c 	add.w	r1, r7, #28
 80009b8:	f04f 33ff 	mov.w	r3, #4294967295
 80009bc:	4808      	ldr	r0, [pc, #32]	; (80009e0 <QSPI_AutoPollingMemReady+0x94>)
 80009be:	f001 f9a2 	bl	8001d06 <HAL_QSPI_AutoPolling>
 80009c2:	4603      	mov	r3, r0
 80009c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80009c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d002      	beq.n	80009d6 <QSPI_AutoPollingMemReady+0x8a>
			HAL_MAX_DELAY)) != HAL_OK) {
		return ret;
 80009d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80009d4:	e000      	b.n	80009d8 <QSPI_AutoPollingMemReady+0x8c>
	}
	return HAL_OK;
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3758      	adds	r7, #88	; 0x58
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	24000094 	.word	0x24000094

080009e4 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b096      	sub	sp, #88	; 0x58
 80009e8:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand = { 0 };
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	2238      	movs	r2, #56	; 0x38
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f003 fc34 	bl	8004260 <memset>
	QSPI_AutoPollingTypeDef sConfig = { 0 };
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
 8000a06:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef ret;

	/* Enable write operations ------------------------------------------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a0c:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.Instruction = WRITE_ENABLE_CMD;
 8000a0e:	2306      	movs	r3, #6
 8000a10:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DataMode = QSPI_DATA_NONE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DummyCycles = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a26:	2300      	movs	r3, #0
 8000a28:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	653b      	str	r3, [r7, #80]	; 0x50

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a36:	4619      	mov	r1, r3
 8000a38:	481a      	ldr	r0, [pc, #104]	; (8000aa4 <QSPI_WriteEnable+0xc0>)
 8000a3a:	f000 ffd7 	bl	80019ec <HAL_QSPI_Command>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000a44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d002      	beq.n	8000a52 <QSPI_WriteEnable+0x6e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000a4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000a50:	e024      	b.n	8000a9c <QSPI_WriteEnable+0xb8>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 8000a52:	2302      	movs	r3, #2
 8000a54:	607b      	str	r3, [r7, #4]
	sConfig.Mask = 0x02;
 8000a56:	2302      	movs	r3, #2
 8000a58:	60bb      	str	r3, [r7, #8]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
	sConfig.StatusBytesSize = 1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	613b      	str	r3, [r7, #16]
	sConfig.Interval = 0x10;
 8000a62:	2310      	movs	r3, #16
 8000a64:	60fb      	str	r3, [r7, #12]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000a66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a6a:	61bb      	str	r3, [r7, #24]

	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000a6c:	2305      	movs	r3, #5
 8000a6e:	61fb      	str	r3, [r7, #28]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a74:	643b      	str	r3, [r7, #64]	; 0x40

	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000a76:	1d3a      	adds	r2, r7, #4
 8000a78:	f107 011c 	add.w	r1, r7, #28
 8000a7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a80:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <QSPI_WriteEnable+0xc0>)
 8000a82:	f001 f940 	bl	8001d06 <HAL_QSPI_AutoPolling>
 8000a86:	4603      	mov	r3, r0
 8000a88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000a8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <QSPI_WriteEnable+0xb6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000a94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000a98:	e000      	b.n	8000a9c <QSPI_WriteEnable+0xb8>
	}
	return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3758      	adds	r7, #88	; 0x58
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	24000094 	.word	0x24000094

08000aa8 <QSPI_Configuration>:
/*Enable quad mode*/
/* Las versiones acabadas en IQ lo llevan activado por defecto, como en mi caso. */

uint8_t QSPI_Configuration(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b090      	sub	sp, #64	; 0x40
 8000aac:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = { 0 };
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2238      	movs	r2, #56	; 0x38
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 fbd3 	bl	8004260 <memset>
	uint8_t reg;
	HAL_StatusTypeDef ret;

	/* Read Volatile Configuration register 2 --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000aba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000abe:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_STATUS_REG2_CMD;
 8000ac0:	2335      	movs	r3, #53	; 0x35
 8000ac2:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000acc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ada:	2300      	movs	r3, #0
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = 1;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000aec:	4619      	mov	r1, r3
 8000aee:	4858      	ldr	r0, [pc, #352]	; (8000c50 <QSPI_Configuration+0x1a8>)
 8000af0:	f000 ff7c 	bl	80019ec <HAL_QSPI_Command>
 8000af4:	4603      	mov	r3, r0
 8000af6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000afa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d002      	beq.n	8000b08 <QSPI_Configuration+0x60>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000b02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b06:	e09f      	b.n	8000c48 <QSPI_Configuration+0x1a0>
	}

	if ((ret = HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE))
 8000b08:	1cfb      	adds	r3, r7, #3
 8000b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b0e:	4619      	mov	r1, r3
 8000b10:	484f      	ldr	r0, [pc, #316]	; (8000c50 <QSPI_Configuration+0x1a8>)
 8000b12:	f001 f85b 	bl	8001bcc <HAL_QSPI_Receive>
 8000b16:	4603      	mov	r3, r0
 8000b18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000b1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <QSPI_Configuration+0x82>
			!= HAL_OK) {
		return ret;
 8000b24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b28:	e08e      	b.n	8000c48 <QSPI_Configuration+0x1a0>
	}

	/* Enable Volatile Write operations ---------------------------------------- */
	sCommand.DataMode = QSPI_DATA_NONE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.Instruction = VOLATILE_SR_WRITE_ENABLE;
 8000b2e:	2350      	movs	r3, #80	; 0x50
 8000b30:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4845      	ldr	r0, [pc, #276]	; (8000c50 <QSPI_Configuration+0x1a8>)
 8000b3c:	f000 ff56 	bl	80019ec <HAL_QSPI_Command>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <QSPI_Configuration+0xa4>
			!= HAL_OK) {
		return ret;
 8000b46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b4a:	e07d      	b.n	8000c48 <QSPI_Configuration+0x1a0>
	}

	/* Write Volatile Configuration register 2 (QE = 1) -- */
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.Instruction = WRITE_STATUS_REG2_CMD;
 8000b52:	2331      	movs	r3, #49	; 0x31
 8000b54:	607b      	str	r3, [r7, #4]
	reg |= 2; // QE bit
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	70fb      	strb	r3, [r7, #3]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b66:	4619      	mov	r1, r3
 8000b68:	4839      	ldr	r0, [pc, #228]	; (8000c50 <QSPI_Configuration+0x1a8>)
 8000b6a:	f000 ff3f 	bl	80019ec <HAL_QSPI_Command>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d002      	beq.n	8000b7a <QSPI_Configuration+0xd2>
			!= HAL_OK) {
		return ret;
 8000b74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b78:	e066      	b.n	8000c48 <QSPI_Configuration+0x1a0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000b7a:	1cfb      	adds	r3, r7, #3
 8000b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b80:	4619      	mov	r1, r3
 8000b82:	4833      	ldr	r0, [pc, #204]	; (8000c50 <QSPI_Configuration+0x1a8>)
 8000b84:	f000 ff90 	bl	8001aa8 <HAL_QSPI_Transmit>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d002      	beq.n	8000b94 <QSPI_Configuration+0xec>
			!= HAL_OK) {
		return ret;
 8000b8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b92:	e059      	b.n	8000c48 <QSPI_Configuration+0x1a0>
	}

	/* Read Volatile Configuration register 3 --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b98:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_STATUS_REG3_CMD;
 8000b9a:	2315      	movs	r3, #21
 8000b9c:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000ba6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4821      	ldr	r0, [pc, #132]	; (8000c50 <QSPI_Configuration+0x1a8>)
 8000bca:	f000 ff0f 	bl	80019ec <HAL_QSPI_Command>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000bd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d002      	beq.n	8000be2 <QSPI_Configuration+0x13a>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000bdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000be0:	e032      	b.n	8000c48 <QSPI_Configuration+0x1a0>
	}

	if ((ret = HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE))
 8000be2:	1cfb      	adds	r3, r7, #3
 8000be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000be8:	4619      	mov	r1, r3
 8000bea:	4819      	ldr	r0, [pc, #100]	; (8000c50 <QSPI_Configuration+0x1a8>)
 8000bec:	f000 ffee 	bl	8001bcc <HAL_QSPI_Receive>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000bf6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <QSPI_Configuration+0x15c>
			!= HAL_OK) {
		return ret;
 8000bfe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c02:	e021      	b.n	8000c48 <QSPI_Configuration+0x1a0>
	}

	/* Write Volatile Configuration register 2 (DRV1:2 = 00) -- */
	sCommand.Instruction = WRITE_STATUS_REG3_CMD;
 8000c04:	2311      	movs	r3, #17
 8000c06:	607b      	str	r3, [r7, #4]
	reg &= 0x9f; // DRV1:2 bit
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	70fb      	strb	r3, [r7, #3]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c18:	4619      	mov	r1, r3
 8000c1a:	480d      	ldr	r0, [pc, #52]	; (8000c50 <QSPI_Configuration+0x1a8>)
 8000c1c:	f000 fee6 	bl	80019ec <HAL_QSPI_Command>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <QSPI_Configuration+0x184>
			!= HAL_OK) {
		return ret;
 8000c26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c2a:	e00d      	b.n	8000c48 <QSPI_Configuration+0x1a0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000c2c:	1cfb      	adds	r3, r7, #3
 8000c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c32:	4619      	mov	r1, r3
 8000c34:	4806      	ldr	r0, [pc, #24]	; (8000c50 <QSPI_Configuration+0x1a8>)
 8000c36:	f000 ff37 	bl	8001aa8 <HAL_QSPI_Transmit>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <QSPI_Configuration+0x19e>
			!= HAL_OK) {
		return ret;
 8000c40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c44:	e000      	b.n	8000c48 <QSPI_Configuration+0x1a0>
	}

	return HAL_OK;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3740      	adds	r7, #64	; 0x40
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	24000094 	.word	0x24000094

08000c54 <CSP_QSPI_EnableMemoryMappedMode>:

	return HAL_OK;

}

uint8_t CSP_QSPI_EnableMemoryMappedMode(void) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b090      	sub	sp, #64	; 0x40
 8000c58:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c5e:	623b      	str	r3, [r7, #32]
	sCommand.Instruction = QUAD_OUT_FAST_READ_CMD;
 8000c60:	236b      	movs	r3, #107	; 0x6b
 8000c62:	60bb      	str	r3, [r7, #8]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c68:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8000c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.Address = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c80:	2300      	movs	r3, #0
 8000c82:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DataMode = QSPI_DATA_4_LINES;
 8000c84:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.NbData = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DummyCycles = 8;
 8000c8e:	2308      	movs	r3, #8
 8000c90:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.AlternateBytes = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
	sCommand.AlternateBytesSize = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
	sMemMappedCfg.TimeOutPeriod = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]

	if (HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK) {
 8000ca6:	463a      	mov	r2, r7
 8000ca8:	f107 0308 	add.w	r3, r7, #8
 8000cac:	4619      	mov	r1, r3
 8000cae:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <CSP_QSPI_EnableMemoryMappedMode+0x74>)
 8000cb0:	f001 f8a0 	bl	8001df4 <HAL_QSPI_MemoryMapped>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <CSP_QSPI_EnableMemoryMappedMode+0x6a>
		return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e000      	b.n	8000cc0 <CSP_QSPI_EnableMemoryMappedMode+0x6c>
	}
	return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3740      	adds	r7, #64	; 0x40
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	24000094 	.word	0x24000094

08000ccc <QSPI_ResetChip>:
		return HAL_ERROR;
	}
	return HAL_OK;
}

uint8_t QSPI_ResetChip() {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b090      	sub	sp, #64	; 0x40
 8000cd0:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand = { 0 };
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	2238      	movs	r2, #56	; 0x38
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f003 fac1 	bl	8004260 <memset>
	uint32_t temp = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_StatusTypeDef ret;

	/* Enable Reset --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce6:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = RESET_ENABLE_CMD;
 8000ce8:	2366      	movs	r3, #102	; 0x66
 8000cea:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d00:	2300      	movs	r3, #0
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d04:	2300      	movs	r3, #0
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8000d08:	463b      	mov	r3, r7
 8000d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4820      	ldr	r0, [pc, #128]	; (8000d94 <QSPI_ResetChip+0xc8>)
 8000d12:	f000 fe6b 	bl	80019ec <HAL_QSPI_Command>
 8000d16:	4603      	mov	r3, r0
 8000d18:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000d1c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <QSPI_ResetChip+0x5e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000d24:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d28:	e02f      	b.n	8000d8a <QSPI_ResetChip+0xbe>
	}

	/* Reset Device --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d2e:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8000d30:	2399      	movs	r3, #153	; 0x99
 8000d32:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	637b      	str	r3, [r7, #52]	; 0x34

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8000d50:	463b      	mov	r3, r7
 8000d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d56:	4619      	mov	r1, r3
 8000d58:	480e      	ldr	r0, [pc, #56]	; (8000d94 <QSPI_ResetChip+0xc8>)
 8000d5a:	f000 fe47 	bl	80019ec <HAL_QSPI_Command>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000d64:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d002      	beq.n	8000d72 <QSPI_ResetChip+0xa6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000d6c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d70:	e00b      	b.n	8000d8a <QSPI_ResetChip+0xbe>
	}

	for (temp = 0; temp < 500000; temp++) {
 8000d72:	2300      	movs	r3, #0
 8000d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d76:	e003      	b.n	8000d80 <QSPI_ResetChip+0xb4>
		__NOP();
 8000d78:	bf00      	nop
	for (temp = 0; temp < 500000; temp++) {
 8000d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <QSPI_ResetChip+0xcc>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d9f7      	bls.n	8000d78 <QSPI_ResetChip+0xac>
	}

	return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3740      	adds	r7, #64	; 0x40
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	24000094 	.word	0x24000094
 8000d98:	0007a11f 	.word	0x0007a11f

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_MspInit+0x30>)
 8000da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000da8:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <HAL_MspInit+0x30>)
 8000daa:	f043 0302 	orr.w	r3, r3, #2
 8000dae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_MspInit+0x30>)
 8000db4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	58024400 	.word	0x58024400

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <MemManage_Handler+0x4>

08000de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler+0x4>

08000dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1c:	f000 f92a 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e28:	4b39      	ldr	r3, [pc, #228]	; (8000f10 <SystemInit+0xec>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a38      	ldr	r2, [pc, #224]	; (8000f10 <SystemInit+0xec>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e38:	4b36      	ldr	r3, [pc, #216]	; (8000f14 <SystemInit+0xf0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 030f 	and.w	r3, r3, #15
 8000e40:	2b06      	cmp	r3, #6
 8000e42:	d807      	bhi.n	8000e54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e44:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <SystemInit+0xf0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f023 030f 	bic.w	r3, r3, #15
 8000e4c:	4a31      	ldr	r2, [pc, #196]	; (8000f14 <SystemInit+0xf0>)
 8000e4e:	f043 0307 	orr.w	r3, r3, #7
 8000e52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e54:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <SystemInit+0xf4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a2f      	ldr	r2, [pc, #188]	; (8000f18 <SystemInit+0xf4>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <SystemInit+0xf4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e66:	4b2c      	ldr	r3, [pc, #176]	; (8000f18 <SystemInit+0xf4>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	492b      	ldr	r1, [pc, #172]	; (8000f18 <SystemInit+0xf4>)
 8000e6c:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <SystemInit+0xf8>)
 8000e6e:	4013      	ands	r3, r2
 8000e70:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e72:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <SystemInit+0xf0>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d007      	beq.n	8000e8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e7e:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <SystemInit+0xf0>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f023 030f 	bic.w	r3, r3, #15
 8000e86:	4a23      	ldr	r2, [pc, #140]	; (8000f14 <SystemInit+0xf0>)
 8000e88:	f043 0307 	orr.w	r3, r3, #7
 8000e8c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e8e:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <SystemInit+0xf4>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e94:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <SystemInit+0xf4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <SystemInit+0xf4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <SystemInit+0xf4>)
 8000ea2:	4a1f      	ldr	r2, [pc, #124]	; (8000f20 <SystemInit+0xfc>)
 8000ea4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <SystemInit+0xf4>)
 8000ea8:	4a1e      	ldr	r2, [pc, #120]	; (8000f24 <SystemInit+0x100>)
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <SystemInit+0xf4>)
 8000eae:	4a1e      	ldr	r2, [pc, #120]	; (8000f28 <SystemInit+0x104>)
 8000eb0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <SystemInit+0xf4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <SystemInit+0xf4>)
 8000eba:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <SystemInit+0x104>)
 8000ebc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ebe:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <SystemInit+0xf4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <SystemInit+0xf4>)
 8000ec6:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <SystemInit+0x104>)
 8000ec8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <SystemInit+0xf4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <SystemInit+0xf4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <SystemInit+0xf4>)
 8000ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <SystemInit+0xf4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <SystemInit+0x108>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <SystemInit+0x10c>)
 8000ee8:	4013      	ands	r3, r2
 8000eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000eee:	d202      	bcs.n	8000ef6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <SystemInit+0x110>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <SystemInit+0x114>)
 8000ef8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000efc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <SystemInit+0xec>)
 8000f00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f04:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00
 8000f14:	52002000 	.word	0x52002000
 8000f18:	58024400 	.word	0x58024400
 8000f1c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f20:	02020200 	.word	0x02020200
 8000f24:	01ff0000 	.word	0x01ff0000
 8000f28:	01010280 	.word	0x01010280
 8000f2c:	5c001000 	.word	0x5c001000
 8000f30:	ffff0000 	.word	0xffff0000
 8000f34:	51008108 	.word	0x51008108
 8000f38:	52004000 	.word	0x52004000

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f40:	f7ff ff70 	bl	8000e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f46:	490d      	ldr	r1, [pc, #52]	; (8000f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f5c:	4c0a      	ldr	r4, [pc, #40]	; (8000f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f003 f955 	bl	8004218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fa09 	bl	8000384 <main>
  bx  lr
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f7c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f80:	080042a0 	.word	0x080042a0
  ldr r2, =_sbss
 8000f84:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000f88:	240000e4 	.word	0x240000e4

08000f8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC3_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f96:	2003      	movs	r0, #3
 8000f98:	f000 f96e 	bl	8001278 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f9c:	f001 ff1e 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_Init+0x68>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	f003 030f 	and.w	r3, r3, #15
 8000fac:	4913      	ldr	r1, [pc, #76]	; (8000ffc <HAL_Init+0x6c>)
 8000fae:	5ccb      	ldrb	r3, [r1, r3]
 8000fb0:	f003 031f 	and.w	r3, r3, #31
 8000fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_Init+0x68>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <HAL_Init+0x6c>)
 8000fc4:	5cd3      	ldrb	r3, [r2, r3]
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <HAL_Init+0x70>)
 8000fd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <HAL_Init+0x74>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f000 f814 	bl	8001008 <HAL_InitTick>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e002      	b.n	8000ff0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fea:	f7ff fed7 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	58024400 	.word	0x58024400
 8000ffc:	08004288 	.word	0x08004288
 8001000:	24000004 	.word	0x24000004
 8001004:	24000000 	.word	0x24000000

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_InitTick+0x60>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e021      	b.n	8001060 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <HAL_InitTick+0x64>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_InitTick+0x60>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	fbb3 f3f1 	udiv	r3, r3, r1
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f945 	bl	80012c2 <HAL_SYSTICK_Config>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00e      	b.n	8001060 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d80a      	bhi.n	800105e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f000 f91d 	bl	800128e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <HAL_InitTick+0x68>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2400000c 	.word	0x2400000c
 800106c:	24000000 	.word	0x24000000
 8001070:	24000008 	.word	0x24000008

08001074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x20>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x24>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_IncTick+0x24>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	2400000c 	.word	0x2400000c
 8001098:	240000e0 	.word	0x240000e0

0800109c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_GetTick+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	240000e0 	.word	0x240000e0

080010b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff ffee 	bl	800109c <HAL_GetTick>
 80010c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010cc:	d005      	beq.n	80010da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_Delay+0x44>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010da:	bf00      	nop
 80010dc:	f7ff ffde 	bl	800109c <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d8f7      	bhi.n	80010dc <HAL_Delay+0x28>
  {
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2400000c 	.word	0x2400000c

080010fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <HAL_GetREVID+0x14>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	0c1b      	lsrs	r3, r3, #16
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	5c001000 	.word	0x5c001000

08001114 <__NVIC_SetPriorityGrouping>:
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <__NVIC_SetPriorityGrouping+0x40>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001130:	4013      	ands	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 800113e:	4313      	orrs	r3, r2
 8001140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001142:	4a04      	ldr	r2, [pc, #16]	; (8001154 <__NVIC_SetPriorityGrouping+0x40>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	60d3      	str	r3, [r2, #12]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00
 8001158:	05fa0000 	.word	0x05fa0000

0800115c <__NVIC_GetPriorityGrouping>:
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <__NVIC_GetPriorityGrouping+0x18>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	f003 0307 	and.w	r3, r3, #7
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_SetPriority>:
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	; (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	; (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001244:	d301      	bcc.n	800124a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001246:	2301      	movs	r3, #1
 8001248:	e00f      	b.n	800126a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <SysTick_Config+0x40>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001252:	210f      	movs	r1, #15
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f7ff ff8e 	bl	8001178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <SysTick_Config+0x40>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <SysTick_Config+0x40>)
 8001264:	2207      	movs	r2, #7
 8001266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	e000e010 	.word	0xe000e010

08001278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff47 	bl	8001114 <__NVIC_SetPriorityGrouping>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800129c:	f7ff ff5e 	bl	800115c <__NVIC_GetPriorityGrouping>
 80012a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	6978      	ldr	r0, [r7, #20]
 80012a8:	f7ff ff90 	bl	80011cc <NVIC_EncodePriority>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff5f 	bl	8001178 <__NVIC_SetPriority>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffb2 	bl	8001234 <SysTick_Config>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012ea:	4b89      	ldr	r3, [pc, #548]	; (8001510 <HAL_GPIO_Init+0x234>)
 80012ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012ee:	e194      	b.n	800161a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	2101      	movs	r1, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 8186 	beq.w	8001614 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d00b      	beq.n	8001328 <HAL_GPIO_Init+0x4c>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d007      	beq.n	8001328 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800131c:	2b11      	cmp	r3, #17
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b12      	cmp	r3, #18
 8001326:	d130      	bne.n	800138a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68da      	ldr	r2, [r3, #12]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800135e:	2201      	movs	r2, #1
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f003 0201 	and.w	r2, r3, #1
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0xee>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b12      	cmp	r3, #18
 80013c8:	d123      	bne.n	8001412 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	08da      	lsrs	r2, r3, #3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3208      	adds	r2, #8
 80013d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	08da      	lsrs	r2, r3, #3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3208      	adds	r2, #8
 800140c:	69b9      	ldr	r1, [r7, #24]
 800140e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0203 	and.w	r2, r3, #3
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 80e0 	beq.w	8001614 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001454:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <HAL_GPIO_Init+0x238>)
 8001456:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800145a:	4a2e      	ldr	r2, [pc, #184]	; (8001514 <HAL_GPIO_Init+0x238>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <HAL_GPIO_Init+0x238>)
 8001466:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001472:	4a29      	ldr	r2, [pc, #164]	; (8001518 <HAL_GPIO_Init+0x23c>)
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	3302      	adds	r3, #2
 800147a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a20      	ldr	r2, [pc, #128]	; (800151c <HAL_GPIO_Init+0x240>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d052      	beq.n	8001544 <HAL_GPIO_Init+0x268>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a1f      	ldr	r2, [pc, #124]	; (8001520 <HAL_GPIO_Init+0x244>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d031      	beq.n	800150a <HAL_GPIO_Init+0x22e>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <HAL_GPIO_Init+0x248>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d02b      	beq.n	8001506 <HAL_GPIO_Init+0x22a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a1d      	ldr	r2, [pc, #116]	; (8001528 <HAL_GPIO_Init+0x24c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d025      	beq.n	8001502 <HAL_GPIO_Init+0x226>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a1c      	ldr	r2, [pc, #112]	; (800152c <HAL_GPIO_Init+0x250>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d01f      	beq.n	80014fe <HAL_GPIO_Init+0x222>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a1b      	ldr	r2, [pc, #108]	; (8001530 <HAL_GPIO_Init+0x254>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d019      	beq.n	80014fa <HAL_GPIO_Init+0x21e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a1a      	ldr	r2, [pc, #104]	; (8001534 <HAL_GPIO_Init+0x258>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_GPIO_Init+0x21a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <HAL_GPIO_Init+0x25c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d00d      	beq.n	80014f2 <HAL_GPIO_Init+0x216>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a18      	ldr	r2, [pc, #96]	; (800153c <HAL_GPIO_Init+0x260>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d007      	beq.n	80014ee <HAL_GPIO_Init+0x212>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a17      	ldr	r2, [pc, #92]	; (8001540 <HAL_GPIO_Init+0x264>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d101      	bne.n	80014ea <HAL_GPIO_Init+0x20e>
 80014e6:	2309      	movs	r3, #9
 80014e8:	e02d      	b.n	8001546 <HAL_GPIO_Init+0x26a>
 80014ea:	230a      	movs	r3, #10
 80014ec:	e02b      	b.n	8001546 <HAL_GPIO_Init+0x26a>
 80014ee:	2308      	movs	r3, #8
 80014f0:	e029      	b.n	8001546 <HAL_GPIO_Init+0x26a>
 80014f2:	2307      	movs	r3, #7
 80014f4:	e027      	b.n	8001546 <HAL_GPIO_Init+0x26a>
 80014f6:	2306      	movs	r3, #6
 80014f8:	e025      	b.n	8001546 <HAL_GPIO_Init+0x26a>
 80014fa:	2305      	movs	r3, #5
 80014fc:	e023      	b.n	8001546 <HAL_GPIO_Init+0x26a>
 80014fe:	2304      	movs	r3, #4
 8001500:	e021      	b.n	8001546 <HAL_GPIO_Init+0x26a>
 8001502:	2303      	movs	r3, #3
 8001504:	e01f      	b.n	8001546 <HAL_GPIO_Init+0x26a>
 8001506:	2302      	movs	r3, #2
 8001508:	e01d      	b.n	8001546 <HAL_GPIO_Init+0x26a>
 800150a:	2301      	movs	r3, #1
 800150c:	e01b      	b.n	8001546 <HAL_GPIO_Init+0x26a>
 800150e:	bf00      	nop
 8001510:	58000080 	.word	0x58000080
 8001514:	58024400 	.word	0x58024400
 8001518:	58000400 	.word	0x58000400
 800151c:	58020000 	.word	0x58020000
 8001520:	58020400 	.word	0x58020400
 8001524:	58020800 	.word	0x58020800
 8001528:	58020c00 	.word	0x58020c00
 800152c:	58021000 	.word	0x58021000
 8001530:	58021400 	.word	0x58021400
 8001534:	58021800 	.word	0x58021800
 8001538:	58021c00 	.word	0x58021c00
 800153c:	58022000 	.word	0x58022000
 8001540:	58022400 	.word	0x58022400
 8001544:	2300      	movs	r3, #0
 8001546:	69fa      	ldr	r2, [r7, #28]
 8001548:	f002 0203 	and.w	r2, r2, #3
 800154c:	0092      	lsls	r2, r2, #2
 800154e:	4093      	lsls	r3, r2
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001556:	4938      	ldr	r1, [pc, #224]	; (8001638 <HAL_GPIO_Init+0x35c>)
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	3302      	adds	r3, #2
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800160c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	3301      	adds	r3, #1
 8001618:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	f47f ae63 	bne.w	80012f0 <HAL_GPIO_Init+0x14>
  }
}
 800162a:	bf00      	nop
 800162c:	bf00      	nop
 800162e:	3724      	adds	r7, #36	; 0x24
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	58000400 	.word	0x58000400

0800163c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800164a:	4b75      	ldr	r3, [pc, #468]	; (8001820 <HAL_GPIO_DeInit+0x1e4>)
 800164c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800164e:	e0d9      	b.n	8001804 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8001650:	2201      	movs	r2, #1
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	4013      	ands	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80cc 	beq.w	80017fe <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001666:	4a6f      	ldr	r2, [pc, #444]	; (8001824 <HAL_GPIO_DeInit+0x1e8>)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001672:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a67      	ldr	r2, [pc, #412]	; (8001828 <HAL_GPIO_DeInit+0x1ec>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d037      	beq.n	8001700 <HAL_GPIO_DeInit+0xc4>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a66      	ldr	r2, [pc, #408]	; (800182c <HAL_GPIO_DeInit+0x1f0>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d031      	beq.n	80016fc <HAL_GPIO_DeInit+0xc0>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a65      	ldr	r2, [pc, #404]	; (8001830 <HAL_GPIO_DeInit+0x1f4>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d02b      	beq.n	80016f8 <HAL_GPIO_DeInit+0xbc>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a64      	ldr	r2, [pc, #400]	; (8001834 <HAL_GPIO_DeInit+0x1f8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d025      	beq.n	80016f4 <HAL_GPIO_DeInit+0xb8>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a63      	ldr	r2, [pc, #396]	; (8001838 <HAL_GPIO_DeInit+0x1fc>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d01f      	beq.n	80016f0 <HAL_GPIO_DeInit+0xb4>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a62      	ldr	r2, [pc, #392]	; (800183c <HAL_GPIO_DeInit+0x200>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d019      	beq.n	80016ec <HAL_GPIO_DeInit+0xb0>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a61      	ldr	r2, [pc, #388]	; (8001840 <HAL_GPIO_DeInit+0x204>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d013      	beq.n	80016e8 <HAL_GPIO_DeInit+0xac>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a60      	ldr	r2, [pc, #384]	; (8001844 <HAL_GPIO_DeInit+0x208>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d00d      	beq.n	80016e4 <HAL_GPIO_DeInit+0xa8>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a5f      	ldr	r2, [pc, #380]	; (8001848 <HAL_GPIO_DeInit+0x20c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d007      	beq.n	80016e0 <HAL_GPIO_DeInit+0xa4>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a5e      	ldr	r2, [pc, #376]	; (800184c <HAL_GPIO_DeInit+0x210>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d101      	bne.n	80016dc <HAL_GPIO_DeInit+0xa0>
 80016d8:	2309      	movs	r3, #9
 80016da:	e012      	b.n	8001702 <HAL_GPIO_DeInit+0xc6>
 80016dc:	230a      	movs	r3, #10
 80016de:	e010      	b.n	8001702 <HAL_GPIO_DeInit+0xc6>
 80016e0:	2308      	movs	r3, #8
 80016e2:	e00e      	b.n	8001702 <HAL_GPIO_DeInit+0xc6>
 80016e4:	2307      	movs	r3, #7
 80016e6:	e00c      	b.n	8001702 <HAL_GPIO_DeInit+0xc6>
 80016e8:	2306      	movs	r3, #6
 80016ea:	e00a      	b.n	8001702 <HAL_GPIO_DeInit+0xc6>
 80016ec:	2305      	movs	r3, #5
 80016ee:	e008      	b.n	8001702 <HAL_GPIO_DeInit+0xc6>
 80016f0:	2304      	movs	r3, #4
 80016f2:	e006      	b.n	8001702 <HAL_GPIO_DeInit+0xc6>
 80016f4:	2303      	movs	r3, #3
 80016f6:	e004      	b.n	8001702 <HAL_GPIO_DeInit+0xc6>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e002      	b.n	8001702 <HAL_GPIO_DeInit+0xc6>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <HAL_GPIO_DeInit+0xc6>
 8001700:	2300      	movs	r3, #0
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	f002 0203 	and.w	r2, r2, #3
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	4093      	lsls	r3, r2
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	429a      	cmp	r2, r3
 8001710:	d136      	bne.n	8001780 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	43db      	mvns	r3, r3
 800171a:	401a      	ands	r2, r3
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43db      	mvns	r3, r3
 8001728:	401a      	ands	r2, r3
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800172e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43db      	mvns	r3, r3
 8001738:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800173c:	4013      	ands	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8001740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	43db      	mvns	r3, r3
 800174a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800174e:	4013      	ands	r3, r2
 8001750:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	220f      	movs	r2, #15
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001762:	4a30      	ldr	r2, [pc, #192]	; (8001824 <HAL_GPIO_DeInit+0x1e8>)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	3302      	adds	r3, #2
 800176a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	43da      	mvns	r2, r3
 8001772:	482c      	ldr	r0, [pc, #176]	; (8001824 <HAL_GPIO_DeInit+0x1e8>)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	400a      	ands	r2, r1
 800177a:	3302      	adds	r3, #2
 800177c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2103      	movs	r1, #3
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	08da      	lsrs	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3208      	adds	r2, #8
 800179c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	08d2      	lsrs	r2, r2, #3
 80017b4:	4019      	ands	r1, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3208      	adds	r2, #8
 80017ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2103      	movs	r1, #3
 80017c8:	fa01 f303 	lsl.w	r3, r1, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	401a      	ands	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	2101      	movs	r1, #1
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	401a      	ands	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	2103      	movs	r1, #3
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	401a      	ands	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	609a      	str	r2, [r3, #8]
    }

    position++;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	3301      	adds	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	fa22 f303 	lsr.w	r3, r2, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	f47f af1f 	bne.w	8001650 <HAL_GPIO_DeInit+0x14>
  }
}
 8001812:	bf00      	nop
 8001814:	bf00      	nop
 8001816:	371c      	adds	r7, #28
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	58000080 	.word	0x58000080
 8001824:	58000400 	.word	0x58000400
 8001828:	58020000 	.word	0x58020000
 800182c:	58020400 	.word	0x58020400
 8001830:	58020800 	.word	0x58020800
 8001834:	58020c00 	.word	0x58020c00
 8001838:	58021000 	.word	0x58021000
 800183c:	58021400 	.word	0x58021400
 8001840:	58021800 	.word	0x58021800
 8001844:	58021c00 	.word	0x58021c00
 8001848:	58022000 	.word	0x58022000
 800184c:	58022400 	.word	0x58022400

08001850 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001858:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <HAL_PWREx_ConfigSupply+0x70>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b04      	cmp	r3, #4
 8001862:	d00a      	beq.n	800187a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001864:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <HAL_PWREx_ConfigSupply+0x70>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	429a      	cmp	r2, r3
 8001870:	d001      	beq.n	8001876 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e01f      	b.n	80018b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	e01d      	b.n	80018b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_PWREx_ConfigSupply+0x70>)
 800187c:	68db      	ldr	r3, [r3, #12]
 800187e:	f023 0207 	bic.w	r2, r3, #7
 8001882:	490f      	ldr	r1, [pc, #60]	; (80018c0 <HAL_PWREx_ConfigSupply+0x70>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4313      	orrs	r3, r2
 8001888:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800188a:	f7ff fc07 	bl	800109c <HAL_GetTick>
 800188e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001890:	e009      	b.n	80018a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001892:	f7ff fc03 	bl	800109c <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018a0:	d901      	bls.n	80018a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e007      	b.n	80018b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_PWREx_ConfigSupply+0x70>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018b2:	d1ee      	bne.n	8001892 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	58024800 	.word	0x58024800

080018c4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af02      	add	r7, sp, #8
 80018ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80018cc:	f7ff fbe6 	bl	800109c <HAL_GetTick>
 80018d0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e05f      	b.n	800199c <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d107      	bne.n	80018f8 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7fe feeb 	bl	80006c4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80018ee:	f241 3188 	movw	r1, #5000	; 0x1388
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fae0 	bl	8001eb8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	3b01      	subs	r3, #1
 8001908:	021a      	lsls	r2, r3, #8
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	2120      	movs	r1, #32
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 fad8 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
 8001924:	4603      	mov	r3, r0
 8001926:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001928:	7afb      	ldrb	r3, [r7, #11]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d135      	bne.n	800199a <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_QSPI_Init+0xe0>)
 8001936:	4013      	ands	r3, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6852      	ldr	r2, [r2, #4]
 800193c:	0611      	lsls	r1, r2, #24
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68d2      	ldr	r2, [r2, #12]
 8001942:	4311      	orrs	r1, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	69d2      	ldr	r2, [r2, #28]
 8001948:	4311      	orrs	r1, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6a12      	ldr	r2, [r2, #32]
 800194e:	4311      	orrs	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	430b      	orrs	r3, r1
 8001956:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_QSPI_Init+0xe4>)
 8001960:	4013      	ands	r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6912      	ldr	r2, [r2, #16]
 8001966:	0411      	lsls	r1, r2, #16
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6952      	ldr	r2, [r2, #20]
 800196c:	4311      	orrs	r1, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6992      	ldr	r2, [r2, #24]
 8001972:	4311      	orrs	r1, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6812      	ldr	r2, [r2, #0]
 8001978:	430b      	orrs	r3, r1
 800197a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800199a:	7afb      	ldrb	r3, [r7, #11]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	00ffff2f 	.word	0x00ffff2f
 80019a8:	ffe0f8fe 	.word	0xffe0f8fe

080019ac <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e012      	b.n	80019e4 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0201 	bic.w	r2, r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7fe ff52 	bl	8000878 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80019f8:	f7ff fb50 	bl	800109c <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <HAL_QSPI_Command+0x22>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e048      	b.n	8001aa0 <HAL_QSPI_Command+0xb4>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d137      	bne.n	8001a92 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	2200      	movs	r2, #0
 8001a38:	2120      	movs	r1, #32
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 fa4a 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
 8001a40:	4603      	mov	r3, r0
 8001a42:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001a44:	7dfb      	ldrb	r3, [r7, #23]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d125      	bne.n	8001a96 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f000 fa77 	bl	8001f42 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d115      	bne.n	8001a88 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	2201      	movs	r2, #1
 8001a64:	2102      	movs	r1, #2
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 fa34 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8001a70:	7dfb      	ldrb	r3, [r7, #23]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10f      	bne.n	8001a96 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a86:	e006      	b.n	8001a96 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a90:	e001      	b.n	8001a96 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001a92:	2302      	movs	r3, #2
 8001a94:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_QSPI_Transmit>:
  * @note   This function is used only in Indirect Write Mode
  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001ab8:	f7ff faf0 	bl	800109c <HAL_GetTick>
 8001abc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3320      	adds	r3, #32
 8001ac4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <HAL_QSPI_Transmit+0x2e>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e076      	b.n	8001bc4 <HAL_QSPI_Transmit+0x11c>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d165      	bne.n	8001bb6 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d056      	beq.n	8001ba4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2212      	movs	r2, #18
 8001afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001b2a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8001b2c:	e01b      	b.n	8001b66 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	2201      	movs	r2, #1
 8001b36:	2104      	movs	r1, #4
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 f9cb 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8001b42:	7ffb      	ldrb	r3, [r7, #31]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d113      	bne.n	8001b70 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	1e5a      	subs	r2, r3, #1
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1df      	bne.n	8001b2e <HAL_QSPI_Transmit+0x86>
 8001b6e:	e000      	b.n	8001b72 <HAL_QSPI_Transmit+0xca>
          break;
 8001b70:	bf00      	nop
      }

      if (status == HAL_OK)
 8001b72:	7ffb      	ldrb	r3, [r7, #31]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d110      	bne.n	8001b9a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2102      	movs	r1, #2
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f9a6 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8001b8c:	7ffb      	ldrb	r3, [r7, #31]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d103      	bne.n	8001b9a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2202      	movs	r2, #2
 8001b98:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ba2:	e00a      	b.n	8001bba <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba8:	f043 0208 	orr.w	r2, r3, #8
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	77fb      	strb	r3, [r7, #31]
 8001bb4:	e001      	b.n	8001bba <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8001bc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3720      	adds	r7, #32
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001bdc:	f7ff fa5e 	bl	800109c <HAL_GetTick>
 8001be0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	3320      	adds	r3, #32
 8001bf0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_QSPI_Receive+0x36>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e07d      	b.n	8001cfe <HAL_QSPI_Receive+0x132>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d16c      	bne.n	8001cf0 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d05d      	beq.n	8001cde <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2222      	movs	r2, #34	; 0x22
 8001c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c5a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8001c64:	e01c      	b.n	8001ca0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2106      	movs	r1, #6
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f000 f92f 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
 8001c76:	4603      	mov	r3, r0
 8001c78:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8001c7a:	7ffb      	ldrb	r3, [r7, #31]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d114      	bne.n	8001caa <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	7812      	ldrb	r2, [r2, #0]
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9a:	1e5a      	subs	r2, r3, #1
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1de      	bne.n	8001c66 <HAL_QSPI_Receive+0x9a>
 8001ca8:	e000      	b.n	8001cac <HAL_QSPI_Receive+0xe0>
          break;
 8001caa:	bf00      	nop
      }

      if (status == HAL_OK)
 8001cac:	7ffb      	ldrb	r3, [r7, #31]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d110      	bne.n	8001cd4 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	2102      	movs	r1, #2
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 f909 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8001cc6:	7ffb      	ldrb	r3, [r7, #31]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d103      	bne.n	8001cd4 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001cdc:	e00a      	b.n	8001cf4 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f043 0208 	orr.w	r2, r3, #8
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	77fb      	strb	r3, [r7, #31]
 8001cee:	e001      	b.n	8001cf4 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8001cfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3720      	adds	r7, #32
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b088      	sub	sp, #32
 8001d0a:	af02      	add	r7, sp, #8
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff f9c2 	bl	800109c <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_QSPI_AutoPolling+0x24>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e060      	b.n	8001dec <HAL_QSPI_AutoPolling+0xe6>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d14f      	bne.n	8001dde <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2242      	movs	r2, #66	; 0x42
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	2200      	movs	r2, #0
 8001d54:	2120      	movs	r1, #32
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 f8bc 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d13d      	bne.n	8001de2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6852      	ldr	r2, [r2, #4]
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6892      	ldr	r2, [r2, #8]
 8001d82:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001d9c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8001da6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 f8c8 	bl	8001f42 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	2201      	movs	r2, #1
 8001dba:	2108      	movs	r1, #8
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 f889 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8001dc6:	7dfb      	ldrb	r3, [r7, #23]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10a      	bne.n	8001de2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ddc:	e001      	b.n	8001de2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001dde:	2302      	movs	r3, #2
 8001de0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001e00:	f7ff f94c 	bl	800109c <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d101      	bne.n	8001e16 <HAL_QSPI_MemoryMapped+0x22>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e04c      	b.n	8001eb0 <HAL_QSPI_MemoryMapped+0xbc>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d13b      	bne.n	8001ea2 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2282      	movs	r2, #130	; 0x82
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	2200      	movs	r2, #0
 8001e42:	2120      	movs	r1, #32
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 f845 	bl	8001ed4 <QSPI_WaitFlagStateUntilTimeout>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001e4e:	7dfb      	ldrb	r3, [r7, #23]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d128      	bne.n	8001ea6 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 0108 	bic.w	r1, r3, #8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d110      	bne.n	8001e94 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2210      	movs	r2, #16
 8001e82:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e92:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8001e94:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 f851 	bl	8001f42 <QSPI_Config>
 8001ea0:	e001      	b.n	8001ea6 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001ee4:	e01a      	b.n	8001f1c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d016      	beq.n	8001f1c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eee:	f7ff f8d5 	bl	800109c <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d302      	bcc.n	8001f04 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10b      	bne.n	8001f1c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2204      	movs	r2, #4
 8001f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f10:	f043 0201 	orr.w	r2, r3, #1
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e00e      	b.n	8001f3a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	bf14      	ite	ne
 8001f2a:	2301      	movne	r3, #1
 8001f2c:	2300      	moveq	r3, #0
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d1d6      	bne.n	8001ee6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b085      	sub	sp, #20
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <QSPI_Config+0x28>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001f5c:	d005      	beq.n	8001f6a <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	3a01      	subs	r2, #1
 8001f68:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 80b9 	beq.w	80020e6 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d05f      	beq.n	800203c <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	6892      	ldr	r2, [r2, #8]
 8001f84:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d031      	beq.n	8001ff2 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	431a      	orrs	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	695b      	ldr	r3, [r3, #20]
 8001fa8:	049b      	lsls	r3, r3, #18
 8001faa:	431a      	orrs	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	ea42 0103 	orr.w	r1, r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001fe2:	f000 812e 	beq.w	8002242 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	6852      	ldr	r2, [r2, #4]
 8001fee:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8001ff0:	e127      	b.n	8002242 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002000:	431a      	orrs	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	431a      	orrs	r2, r3
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	049b      	lsls	r3, r3, #18
 800200e:	431a      	orrs	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	431a      	orrs	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	431a      	orrs	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	431a      	orrs	r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	431a      	orrs	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	ea42 0103 	orr.w	r1, r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	430a      	orrs	r2, r1
 8002038:	615a      	str	r2, [r3, #20]
}
 800203a:	e102      	b.n	8002242 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d02e      	beq.n	80020a2 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	431a      	orrs	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002052:	431a      	orrs	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	431a      	orrs	r2, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	049b      	lsls	r3, r3, #18
 8002060:	431a      	orrs	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	431a      	orrs	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	431a      	orrs	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	431a      	orrs	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	431a      	orrs	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	ea42 0103 	orr.w	r1, r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	430a      	orrs	r2, r1
 800208a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002092:	f000 80d6 	beq.w	8002242 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	6852      	ldr	r2, [r2, #4]
 800209e:	619a      	str	r2, [r3, #24]
}
 80020a0:	e0cf      	b.n	8002242 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	431a      	orrs	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b0:	431a      	orrs	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	431a      	orrs	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	049b      	lsls	r3, r3, #18
 80020be:	431a      	orrs	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	ea42 0103 	orr.w	r1, r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	615a      	str	r2, [r3, #20]
}
 80020e4:	e0ad      	b.n	8002242 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d058      	beq.n	80021a0 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	6892      	ldr	r2, [r2, #8]
 80020f6:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d02d      	beq.n	800215c <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	431a      	orrs	r2, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210e:	431a      	orrs	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	431a      	orrs	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	049b      	lsls	r3, r3, #18
 800211c:	431a      	orrs	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	431a      	orrs	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	431a      	orrs	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	431a      	orrs	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	69db      	ldr	r3, [r3, #28]
 8002134:	431a      	orrs	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	ea42 0103 	orr.w	r1, r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	430a      	orrs	r2, r1
 8002146:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800214e:	d078      	beq.n	8002242 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	6852      	ldr	r2, [r2, #4]
 8002158:	619a      	str	r2, [r3, #24]
}
 800215a:	e072      	b.n	8002242 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	431a      	orrs	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216a:	431a      	orrs	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	431a      	orrs	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	049b      	lsls	r3, r3, #18
 8002178:	431a      	orrs	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	431a      	orrs	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	431a      	orrs	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	431a      	orrs	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	ea42 0103 	orr.w	r1, r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	430a      	orrs	r2, r1
 800219c:	615a      	str	r2, [r3, #20]
}
 800219e:	e050      	b.n	8002242 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d02a      	beq.n	80021fe <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	431a      	orrs	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b6:	431a      	orrs	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	431a      	orrs	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	049b      	lsls	r3, r3, #18
 80021c4:	431a      	orrs	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	431a      	orrs	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	ea42 0103 	orr.w	r1, r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80021f0:	d027      	beq.n	8002242 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	6852      	ldr	r2, [r2, #4]
 80021fa:	619a      	str	r2, [r3, #24]
}
 80021fc:	e021      	b.n	8002242 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	2b00      	cmp	r3, #0
 8002204:	d01d      	beq.n	8002242 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	431a      	orrs	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002214:	431a      	orrs	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	431a      	orrs	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	049b      	lsls	r3, r3, #18
 8002222:	431a      	orrs	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	431a      	orrs	r2, r3
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	431a      	orrs	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	ea42 0103 	orr.w	r1, r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	430a      	orrs	r2, r1
 8002240:	615a      	str	r2, [r3, #20]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08c      	sub	sp, #48	; 0x30
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e3ff      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8087 	beq.w	800237e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002270:	4b99      	ldr	r3, [pc, #612]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800227a:	4b97      	ldr	r3, [pc, #604]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002282:	2b10      	cmp	r3, #16
 8002284:	d007      	beq.n	8002296 <HAL_RCC_OscConfig+0x46>
 8002286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002288:	2b18      	cmp	r3, #24
 800228a:	d110      	bne.n	80022ae <HAL_RCC_OscConfig+0x5e>
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d10b      	bne.n	80022ae <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002296:	4b90      	ldr	r3, [pc, #576]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d06c      	beq.n	800237c <HAL_RCC_OscConfig+0x12c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d168      	bne.n	800237c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e3d9      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_OscConfig+0x76>
 80022b8:	4b87      	ldr	r3, [pc, #540]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a86      	ldr	r2, [pc, #536]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80022be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	e02e      	b.n	8002324 <HAL_RCC_OscConfig+0xd4>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x98>
 80022ce:	4b82      	ldr	r3, [pc, #520]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a81      	ldr	r2, [pc, #516]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80022d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b7f      	ldr	r3, [pc, #508]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a7e      	ldr	r2, [pc, #504]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80022e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e01d      	b.n	8002324 <HAL_RCC_OscConfig+0xd4>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0xbc>
 80022f2:	4b79      	ldr	r3, [pc, #484]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a78      	ldr	r2, [pc, #480]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80022f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	4b76      	ldr	r3, [pc, #472]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a75      	ldr	r2, [pc, #468]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0xd4>
 800230c:	4b72      	ldr	r3, [pc, #456]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a71      	ldr	r2, [pc, #452]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b6f      	ldr	r3, [pc, #444]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a6e      	ldr	r2, [pc, #440]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 800231e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d013      	beq.n	8002354 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7fe feb6 	bl	800109c <HAL_GetTick>
 8002330:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002334:	f7fe feb2 	bl	800109c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	; 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e38d      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002346:	4b64      	ldr	r3, [pc, #400]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0xe4>
 8002352:	e014      	b.n	800237e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe fea2 	bl	800109c <HAL_GetTick>
 8002358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800235c:	f7fe fe9e 	bl	800109c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e379      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800236e:	4b5a      	ldr	r3, [pc, #360]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x10c>
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80ae 	beq.w	80024e8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238c:	4b52      	ldr	r3, [pc, #328]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002394:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002396:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d007      	beq.n	80023b2 <HAL_RCC_OscConfig+0x162>
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	2b18      	cmp	r3, #24
 80023a6:	d13a      	bne.n	800241e <HAL_RCC_OscConfig+0x1ce>
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d135      	bne.n	800241e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b2:	4b49      	ldr	r3, [pc, #292]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_RCC_OscConfig+0x17a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e34b      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ca:	f7fe fe97 	bl	80010fc <HAL_GetREVID>
 80023ce:	4603      	mov	r3, r0
 80023d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d817      	bhi.n	8002408 <HAL_RCC_OscConfig+0x1b8>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b40      	cmp	r3, #64	; 0x40
 80023de:	d108      	bne.n	80023f2 <HAL_RCC_OscConfig+0x1a2>
 80023e0:	4b3d      	ldr	r3, [pc, #244]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80023e8:	4a3b      	ldr	r2, [pc, #236]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80023ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ee:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023f0:	e07a      	b.n	80024e8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f2:	4b39      	ldr	r3, [pc, #228]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	031b      	lsls	r3, r3, #12
 8002400:	4935      	ldr	r1, [pc, #212]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002402:	4313      	orrs	r3, r2
 8002404:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002406:	e06f      	b.n	80024e8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002408:	4b33      	ldr	r3, [pc, #204]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	061b      	lsls	r3, r3, #24
 8002416:	4930      	ldr	r1, [pc, #192]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002418:	4313      	orrs	r3, r2
 800241a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800241c:	e064      	b.n	80024e8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d045      	beq.n	80024b2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002426:	4b2c      	ldr	r3, [pc, #176]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 0219 	bic.w	r2, r3, #25
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4929      	ldr	r1, [pc, #164]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe fe30 	bl	800109c <HAL_GetTick>
 800243c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002440:	f7fe fe2c 	bl	800109c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e307      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002452:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245e:	f7fe fe4d 	bl	80010fc <HAL_GetREVID>
 8002462:	4603      	mov	r3, r0
 8002464:	f241 0203 	movw	r2, #4099	; 0x1003
 8002468:	4293      	cmp	r3, r2
 800246a:	d817      	bhi.n	800249c <HAL_RCC_OscConfig+0x24c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	2b40      	cmp	r3, #64	; 0x40
 8002472:	d108      	bne.n	8002486 <HAL_RCC_OscConfig+0x236>
 8002474:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800247c:	4a16      	ldr	r2, [pc, #88]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 800247e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002482:	6053      	str	r3, [r2, #4]
 8002484:	e030      	b.n	80024e8 <HAL_RCC_OscConfig+0x298>
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	031b      	lsls	r3, r3, #12
 8002494:	4910      	ldr	r1, [pc, #64]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]
 800249a:	e025      	b.n	80024e8 <HAL_RCC_OscConfig+0x298>
 800249c:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	061b      	lsls	r3, r3, #24
 80024aa:	490b      	ldr	r1, [pc, #44]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
 80024b0:	e01a      	b.n	80024e8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <HAL_RCC_OscConfig+0x288>)
 80024b8:	f023 0301 	bic.w	r3, r3, #1
 80024bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024be:	f7fe fded 	bl	800109c <HAL_GetTick>
 80024c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c6:	f7fe fde9 	bl	800109c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d903      	bls.n	80024dc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e2c4      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
 80024d8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024dc:	4ba4      	ldr	r3, [pc, #656]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ee      	bne.n	80024c6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80a9 	beq.w	8002648 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f6:	4b9e      	ldr	r3, [pc, #632]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002500:	4b9b      	ldr	r3, [pc, #620]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	2b08      	cmp	r3, #8
 800250a:	d007      	beq.n	800251c <HAL_RCC_OscConfig+0x2cc>
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b18      	cmp	r3, #24
 8002510:	d13a      	bne.n	8002588 <HAL_RCC_OscConfig+0x338>
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b01      	cmp	r3, #1
 800251a:	d135      	bne.n	8002588 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800251c:	4b94      	ldr	r3, [pc, #592]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_OscConfig+0x2e4>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	2b80      	cmp	r3, #128	; 0x80
 800252e:	d001      	beq.n	8002534 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e296      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002534:	f7fe fde2 	bl	80010fc <HAL_GetREVID>
 8002538:	4603      	mov	r3, r0
 800253a:	f241 0203 	movw	r2, #4099	; 0x1003
 800253e:	4293      	cmp	r3, r2
 8002540:	d817      	bhi.n	8002572 <HAL_RCC_OscConfig+0x322>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	2b20      	cmp	r3, #32
 8002548:	d108      	bne.n	800255c <HAL_RCC_OscConfig+0x30c>
 800254a:	4b89      	ldr	r3, [pc, #548]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002552:	4a87      	ldr	r2, [pc, #540]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 8002554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002558:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800255a:	e075      	b.n	8002648 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800255c:	4b84      	ldr	r3, [pc, #528]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	069b      	lsls	r3, r3, #26
 800256a:	4981      	ldr	r1, [pc, #516]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002570:	e06a      	b.n	8002648 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002572:	4b7f      	ldr	r3, [pc, #508]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	061b      	lsls	r3, r3, #24
 8002580:	497b      	ldr	r1, [pc, #492]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 8002582:	4313      	orrs	r3, r2
 8002584:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002586:	e05f      	b.n	8002648 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d042      	beq.n	8002616 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002590:	4b77      	ldr	r3, [pc, #476]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a76      	ldr	r2, [pc, #472]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 8002596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800259a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe fd7e 	bl	800109c <HAL_GetTick>
 80025a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80025a4:	f7fe fd7a 	bl	800109c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e255      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025b6:	4b6e      	ldr	r3, [pc, #440]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025c2:	f7fe fd9b 	bl	80010fc <HAL_GetREVID>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d817      	bhi.n	8002600 <HAL_RCC_OscConfig+0x3b0>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d108      	bne.n	80025ea <HAL_RCC_OscConfig+0x39a>
 80025d8:	4b65      	ldr	r3, [pc, #404]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80025e0:	4a63      	ldr	r2, [pc, #396]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 80025e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025e6:	6053      	str	r3, [r2, #4]
 80025e8:	e02e      	b.n	8002648 <HAL_RCC_OscConfig+0x3f8>
 80025ea:	4b61      	ldr	r3, [pc, #388]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	069b      	lsls	r3, r3, #26
 80025f8:	495d      	ldr	r1, [pc, #372]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
 80025fe:	e023      	b.n	8002648 <HAL_RCC_OscConfig+0x3f8>
 8002600:	4b5b      	ldr	r3, [pc, #364]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	061b      	lsls	r3, r3, #24
 800260e:	4958      	ldr	r1, [pc, #352]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 8002610:	4313      	orrs	r3, r2
 8002612:	60cb      	str	r3, [r1, #12]
 8002614:	e018      	b.n	8002648 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002616:	4b56      	ldr	r3, [pc, #344]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a55      	ldr	r2, [pc, #340]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 800261c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002622:	f7fe fd3b 	bl	800109c <HAL_GetTick>
 8002626:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800262a:	f7fe fd37 	bl	800109c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e212      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800263c:	4b4c      	ldr	r3, [pc, #304]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f0      	bne.n	800262a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d036      	beq.n	80026c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d019      	beq.n	8002690 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800265c:	4b44      	ldr	r3, [pc, #272]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 800265e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002660:	4a43      	ldr	r2, [pc, #268]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7fe fd18 	bl	800109c <HAL_GetTick>
 800266c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002670:	f7fe fd14 	bl	800109c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e1ef      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002682:	4b3b      	ldr	r3, [pc, #236]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 8002684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x420>
 800268e:	e018      	b.n	80026c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002690:	4b37      	ldr	r3, [pc, #220]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 8002692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002694:	4a36      	ldr	r2, [pc, #216]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269c:	f7fe fcfe 	bl	800109c <HAL_GetTick>
 80026a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a4:	f7fe fcfa 	bl	800109c <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e1d5      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026b6:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 80026b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d036      	beq.n	800273c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d019      	beq.n	800270a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026d6:	4b26      	ldr	r3, [pc, #152]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a25      	ldr	r2, [pc, #148]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 80026dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026e2:	f7fe fcdb 	bl	800109c <HAL_GetTick>
 80026e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80026ea:	f7fe fcd7 	bl	800109c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e1b2      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026fc:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x49a>
 8002708:	e018      	b.n	800273c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800270a:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a18      	ldr	r2, [pc, #96]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 8002710:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002714:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002716:	f7fe fcc1 	bl	800109c <HAL_GetTick>
 800271a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800271e:	f7fe fcbd 	bl	800109c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e198      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <HAL_RCC_OscConfig+0x520>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f0      	bne.n	800271e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 8085 	beq.w	8002854 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800274a:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <HAL_RCC_OscConfig+0x524>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a09      	ldr	r2, [pc, #36]	; (8002774 <HAL_RCC_OscConfig+0x524>)
 8002750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002754:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002756:	f7fe fca1 	bl	800109c <HAL_GetTick>
 800275a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800275c:	e00c      	b.n	8002778 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800275e:	f7fe fc9d 	bl	800109c <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b64      	cmp	r3, #100	; 0x64
 800276a:	d905      	bls.n	8002778 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e178      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
 8002770:	58024400 	.word	0x58024400
 8002774:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002778:	4b96      	ldr	r3, [pc, #600]	; (80029d4 <HAL_RCC_OscConfig+0x784>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ec      	beq.n	800275e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d106      	bne.n	800279a <HAL_RCC_OscConfig+0x54a>
 800278c:	4b92      	ldr	r3, [pc, #584]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	4a91      	ldr	r2, [pc, #580]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6713      	str	r3, [r2, #112]	; 0x70
 8002798:	e02d      	b.n	80027f6 <HAL_RCC_OscConfig+0x5a6>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10c      	bne.n	80027bc <HAL_RCC_OscConfig+0x56c>
 80027a2:	4b8d      	ldr	r3, [pc, #564]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80027a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a6:	4a8c      	ldr	r2, [pc, #560]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	6713      	str	r3, [r2, #112]	; 0x70
 80027ae:	4b8a      	ldr	r3, [pc, #552]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	4a89      	ldr	r2, [pc, #548]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80027b4:	f023 0304 	bic.w	r3, r3, #4
 80027b8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ba:	e01c      	b.n	80027f6 <HAL_RCC_OscConfig+0x5a6>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b05      	cmp	r3, #5
 80027c2:	d10c      	bne.n	80027de <HAL_RCC_OscConfig+0x58e>
 80027c4:	4b84      	ldr	r3, [pc, #528]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	4a83      	ldr	r2, [pc, #524]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80027ca:	f043 0304 	orr.w	r3, r3, #4
 80027ce:	6713      	str	r3, [r2, #112]	; 0x70
 80027d0:	4b81      	ldr	r3, [pc, #516]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	4a80      	ldr	r2, [pc, #512]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	6713      	str	r3, [r2, #112]	; 0x70
 80027dc:	e00b      	b.n	80027f6 <HAL_RCC_OscConfig+0x5a6>
 80027de:	4b7e      	ldr	r3, [pc, #504]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	4a7d      	ldr	r2, [pc, #500]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	6713      	str	r3, [r2, #112]	; 0x70
 80027ea:	4b7b      	ldr	r3, [pc, #492]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	4a7a      	ldr	r2, [pc, #488]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80027f0:	f023 0304 	bic.w	r3, r3, #4
 80027f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d015      	beq.n	800282a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fe:	f7fe fc4d 	bl	800109c <HAL_GetTick>
 8002802:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002804:	e00a      	b.n	800281c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe fc49 	bl	800109c <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e122      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800281c:	4b6e      	ldr	r3, [pc, #440]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ee      	beq.n	8002806 <HAL_RCC_OscConfig+0x5b6>
 8002828:	e014      	b.n	8002854 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282a:	f7fe fc37 	bl	800109c <HAL_GetTick>
 800282e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7fe fc33 	bl	800109c <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002840:	4293      	cmp	r3, r2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e10c      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002848:	4b63      	ldr	r3, [pc, #396]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 800284a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1ee      	bne.n	8002832 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8101 	beq.w	8002a60 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800285e:	4b5e      	ldr	r3, [pc, #376]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002866:	2b18      	cmp	r3, #24
 8002868:	f000 80bc 	beq.w	80029e4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	2b02      	cmp	r3, #2
 8002872:	f040 8095 	bne.w	80029a0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002876:	4b58      	ldr	r3, [pc, #352]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a57      	ldr	r2, [pc, #348]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 800287c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fe fc0b 	bl	800109c <HAL_GetTick>
 8002886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288a:	f7fe fc07 	bl	800109c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e0e2      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800289c:	4b4e      	ldr	r3, [pc, #312]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f0      	bne.n	800288a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a8:	4b4b      	ldr	r3, [pc, #300]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80028aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ac:	4b4b      	ldr	r3, [pc, #300]	; (80029dc <HAL_RCC_OscConfig+0x78c>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028b8:	0112      	lsls	r2, r2, #4
 80028ba:	430a      	orrs	r2, r1
 80028bc:	4946      	ldr	r1, [pc, #280]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	628b      	str	r3, [r1, #40]	; 0x28
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	3b01      	subs	r3, #1
 80028c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d0:	3b01      	subs	r3, #1
 80028d2:	025b      	lsls	r3, r3, #9
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	3b01      	subs	r3, #1
 80028de:	041b      	lsls	r3, r3, #16
 80028e0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ea:	3b01      	subs	r3, #1
 80028ec:	061b      	lsls	r3, r3, #24
 80028ee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80028f2:	4939      	ldr	r1, [pc, #228]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80028f8:	4b37      	ldr	r3, [pc, #220]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	4a36      	ldr	r2, [pc, #216]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002904:	4b34      	ldr	r3, [pc, #208]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 8002906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002908:	4b35      	ldr	r3, [pc, #212]	; (80029e0 <HAL_RCC_OscConfig+0x790>)
 800290a:	4013      	ands	r3, r2
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002910:	00d2      	lsls	r2, r2, #3
 8002912:	4931      	ldr	r1, [pc, #196]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 8002914:	4313      	orrs	r3, r2
 8002916:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002918:	4b2f      	ldr	r3, [pc, #188]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	f023 020c 	bic.w	r2, r3, #12
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	492c      	ldr	r1, [pc, #176]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 8002926:	4313      	orrs	r3, r2
 8002928:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800292a:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	f023 0202 	bic.w	r2, r3, #2
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	4928      	ldr	r1, [pc, #160]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 8002938:	4313      	orrs	r3, r2
 800293a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800293c:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	4a25      	ldr	r2, [pc, #148]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 8002942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002946:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002948:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	4a22      	ldr	r2, [pc, #136]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 800294e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002952:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002954:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	4a1f      	ldr	r2, [pc, #124]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 800295a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800295e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002960:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800296c:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a19      	ldr	r2, [pc, #100]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 8002972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe fb90 	bl	800109c <HAL_GetTick>
 800297c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002980:	f7fe fb8c 	bl	800109c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e067      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x730>
 800299e:	e05f      	b.n	8002a60 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a0:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a0c      	ldr	r2, [pc, #48]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80029a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7fe fb76 	bl	800109c <HAL_GetTick>
 80029b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b4:	f7fe fb72 	bl	800109c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e04d      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029c6:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <HAL_RCC_OscConfig+0x788>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x764>
 80029d2:	e045      	b.n	8002a60 <HAL_RCC_OscConfig+0x810>
 80029d4:	58024800 	.word	0x58024800
 80029d8:	58024400 	.word	0x58024400
 80029dc:	fffffc0c 	.word	0xfffffc0c
 80029e0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80029e4:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <HAL_RCC_OscConfig+0x81c>)
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80029ea:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <HAL_RCC_OscConfig+0x81c>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d031      	beq.n	8002a5c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f003 0203 	and.w	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d12a      	bne.n	8002a5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d122      	bne.n	8002a5c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d11a      	bne.n	8002a5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	0a5b      	lsrs	r3, r3, #9
 8002a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a32:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d111      	bne.n	8002a5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	0c1b      	lsrs	r3, r3, #16
 8002a3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d108      	bne.n	8002a5c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	0e1b      	lsrs	r3, r3, #24
 8002a4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a56:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3730      	adds	r7, #48	; 0x30
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	58024400 	.word	0x58024400

08002a70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e19c      	b.n	8002dbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a84:	4b8a      	ldr	r3, [pc, #552]	; (8002cb0 <HAL_RCC_ClockConfig+0x240>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d910      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b87      	ldr	r3, [pc, #540]	; (8002cb0 <HAL_RCC_ClockConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f023 020f 	bic.w	r2, r3, #15
 8002a9a:	4985      	ldr	r1, [pc, #532]	; (8002cb0 <HAL_RCC_ClockConfig+0x240>)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa2:	4b83      	ldr	r3, [pc, #524]	; (8002cb0 <HAL_RCC_ClockConfig+0x240>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e184      	b.n	8002dbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d010      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	4b7b      	ldr	r3, [pc, #492]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d908      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ad0:	4b78      	ldr	r3, [pc, #480]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	4975      	ldr	r1, [pc, #468]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d010      	beq.n	8002b10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695a      	ldr	r2, [r3, #20]
 8002af2:	4b70      	ldr	r3, [pc, #448]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d908      	bls.n	8002b10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002afe:	4b6d      	ldr	r3, [pc, #436]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	496a      	ldr	r1, [pc, #424]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d010      	beq.n	8002b3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699a      	ldr	r2, [r3, #24]
 8002b20:	4b64      	ldr	r3, [pc, #400]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d908      	bls.n	8002b3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b2c:	4b61      	ldr	r3, [pc, #388]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	495e      	ldr	r1, [pc, #376]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d010      	beq.n	8002b6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	4b59      	ldr	r3, [pc, #356]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d908      	bls.n	8002b6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b5a:	4b56      	ldr	r3, [pc, #344]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	4953      	ldr	r1, [pc, #332]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d010      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	4b4d      	ldr	r3, [pc, #308]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d908      	bls.n	8002b9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b88:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f023 020f 	bic.w	r2, r3, #15
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4947      	ldr	r1, [pc, #284]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d055      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ba6:	4b43      	ldr	r3, [pc, #268]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	4940      	ldr	r1, [pc, #256]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d107      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bc0:	4b3c      	ldr	r3, [pc, #240]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d121      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0f6      	b.n	8002dbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d107      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bd8:	4b36      	ldr	r3, [pc, #216]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d115      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0ea      	b.n	8002dbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bf0:	4b30      	ldr	r3, [pc, #192]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d109      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0de      	b.n	8002dbe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c00:	4b2c      	ldr	r3, [pc, #176]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0d6      	b.n	8002dbe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c10:	4b28      	ldr	r3, [pc, #160]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f023 0207 	bic.w	r2, r3, #7
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4925      	ldr	r1, [pc, #148]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c22:	f7fe fa3b 	bl	800109c <HAL_GetTick>
 8002c26:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c28:	e00a      	b.n	8002c40 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c2a:	f7fe fa37 	bl	800109c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e0be      	b.n	8002dbe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c40:	4b1c      	ldr	r3, [pc, #112]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d1eb      	bne.n	8002c2a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d010      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d208      	bcs.n	8002c80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6e:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	f023 020f 	bic.w	r2, r3, #15
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	490e      	ldr	r1, [pc, #56]	; (8002cb4 <HAL_RCC_ClockConfig+0x244>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCC_ClockConfig+0x240>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d214      	bcs.n	8002cb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <HAL_RCC_ClockConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f023 020f 	bic.w	r2, r3, #15
 8002c96:	4906      	ldr	r1, [pc, #24]	; (8002cb0 <HAL_RCC_ClockConfig+0x240>)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9e:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <HAL_RCC_ClockConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e086      	b.n	8002dbe <HAL_RCC_ClockConfig+0x34e>
 8002cb0:	52002000 	.word	0x52002000
 8002cb4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d010      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d208      	bcs.n	8002ce6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cd4:	4b3c      	ldr	r3, [pc, #240]	; (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	4939      	ldr	r1, [pc, #228]	; (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d010      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	4b34      	ldr	r3, [pc, #208]	; (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d208      	bcs.n	8002d14 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d02:	4b31      	ldr	r3, [pc, #196]	; (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	492e      	ldr	r1, [pc, #184]	; (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d010      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699a      	ldr	r2, [r3, #24]
 8002d24:	4b28      	ldr	r3, [pc, #160]	; (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d208      	bcs.n	8002d42 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d30:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	4922      	ldr	r1, [pc, #136]	; (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d010      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69da      	ldr	r2, [r3, #28]
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d208      	bcs.n	8002d70 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4917      	ldr	r1, [pc, #92]	; (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d70:	f000 f834 	bl	8002ddc <HAL_RCC_GetSysClockFreq>
 8002d74:	4602      	mov	r2, r0
 8002d76:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	0a1b      	lsrs	r3, r3, #8
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	4912      	ldr	r1, [pc, #72]	; (8002dcc <HAL_RCC_ClockConfig+0x35c>)
 8002d82:	5ccb      	ldrb	r3, [r1, r3]
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <HAL_RCC_ClockConfig+0x358>)
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <HAL_RCC_ClockConfig+0x35c>)
 8002d98:	5cd3      	ldrb	r3, [r2, r3]
 8002d9a:	f003 031f 	and.w	r3, r3, #31
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
 8002da4:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <HAL_RCC_ClockConfig+0x360>)
 8002da6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002da8:	4a0a      	ldr	r2, [pc, #40]	; (8002dd4 <HAL_RCC_ClockConfig+0x364>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HAL_RCC_ClockConfig+0x368>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe f928 	bl	8001008 <HAL_InitTick>
 8002db8:	4603      	mov	r3, r0
 8002dba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	58024400 	.word	0x58024400
 8002dcc:	08004288 	.word	0x08004288
 8002dd0:	24000004 	.word	0x24000004
 8002dd4:	24000000 	.word	0x24000000
 8002dd8:	24000008 	.word	0x24000008

08002ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b089      	sub	sp, #36	; 0x24
 8002de0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002de2:	4bb3      	ldr	r3, [pc, #716]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dea:	2b18      	cmp	r3, #24
 8002dec:	f200 8155 	bhi.w	800309a <HAL_RCC_GetSysClockFreq+0x2be>
 8002df0:	a201      	add	r2, pc, #4	; (adr r2, 8002df8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df6:	bf00      	nop
 8002df8:	08002e5d 	.word	0x08002e5d
 8002dfc:	0800309b 	.word	0x0800309b
 8002e00:	0800309b 	.word	0x0800309b
 8002e04:	0800309b 	.word	0x0800309b
 8002e08:	0800309b 	.word	0x0800309b
 8002e0c:	0800309b 	.word	0x0800309b
 8002e10:	0800309b 	.word	0x0800309b
 8002e14:	0800309b 	.word	0x0800309b
 8002e18:	08002e83 	.word	0x08002e83
 8002e1c:	0800309b 	.word	0x0800309b
 8002e20:	0800309b 	.word	0x0800309b
 8002e24:	0800309b 	.word	0x0800309b
 8002e28:	0800309b 	.word	0x0800309b
 8002e2c:	0800309b 	.word	0x0800309b
 8002e30:	0800309b 	.word	0x0800309b
 8002e34:	0800309b 	.word	0x0800309b
 8002e38:	08002e89 	.word	0x08002e89
 8002e3c:	0800309b 	.word	0x0800309b
 8002e40:	0800309b 	.word	0x0800309b
 8002e44:	0800309b 	.word	0x0800309b
 8002e48:	0800309b 	.word	0x0800309b
 8002e4c:	0800309b 	.word	0x0800309b
 8002e50:	0800309b 	.word	0x0800309b
 8002e54:	0800309b 	.word	0x0800309b
 8002e58:	08002e8f 	.word	0x08002e8f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e5c:	4b94      	ldr	r3, [pc, #592]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d009      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e68:	4b91      	ldr	r3, [pc, #580]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	08db      	lsrs	r3, r3, #3
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	4a90      	ldr	r2, [pc, #576]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e74:	fa22 f303 	lsr.w	r3, r2, r3
 8002e78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002e7a:	e111      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e7c:	4b8d      	ldr	r3, [pc, #564]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e7e:	61bb      	str	r3, [r7, #24]
    break;
 8002e80:	e10e      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002e82:	4b8d      	ldr	r3, [pc, #564]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e84:	61bb      	str	r3, [r7, #24]
    break;
 8002e86:	e10b      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002e88:	4b8c      	ldr	r3, [pc, #560]	; (80030bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e8a:	61bb      	str	r3, [r7, #24]
    break;
 8002e8c:	e108      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e8e:	4b88      	ldr	r3, [pc, #544]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002e98:	4b85      	ldr	r3, [pc, #532]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ea2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ea4:	4b82      	ldr	r3, [pc, #520]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002eae:	4b80      	ldr	r3, [pc, #512]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb2:	08db      	lsrs	r3, r3, #3
 8002eb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	ee07 3a90 	vmov	s15, r3
 8002ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80e1 	beq.w	8003094 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	f000 8083 	beq.w	8002fe0 <HAL_RCC_GetSysClockFreq+0x204>
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	f200 80a1 	bhi.w	8003024 <HAL_RCC_GetSysClockFreq+0x248>
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x114>
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d056      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002eee:	e099      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ef0:	4b6f      	ldr	r3, [pc, #444]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d02d      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002efc:	4b6c      	ldr	r3, [pc, #432]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	08db      	lsrs	r3, r3, #3
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	4a6b      	ldr	r2, [pc, #428]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	ee07 3a90 	vmov	s15, r3
 8002f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	ee07 3a90 	vmov	s15, r3
 8002f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f26:	4b62      	ldr	r3, [pc, #392]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f2e:	ee07 3a90 	vmov	s15, r3
 8002f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f36:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f3a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80030c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002f56:	e087      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	ee07 3a90 	vmov	s15, r3
 8002f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f62:	eddf 6a58 	vldr	s13, [pc, #352]	; 80030c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f6a:	4b51      	ldr	r3, [pc, #324]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f72:	ee07 3a90 	vmov	s15, r3
 8002f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f7e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80030c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f9a:	e065      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80030c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fae:	4b40      	ldr	r3, [pc, #256]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb6:	ee07 3a90 	vmov	s15, r3
 8002fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fc2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80030c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fde:	e043      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fea:	eddf 6a38 	vldr	s13, [pc, #224]	; 80030cc <HAL_RCC_GetSysClockFreq+0x2f0>
 8002fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ff2:	4b2f      	ldr	r3, [pc, #188]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003002:	ed97 6a02 	vldr	s12, [r7, #8]
 8003006:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80030c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800300a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800300e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800301a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800301e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003022:	e021      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	ee07 3a90 	vmov	s15, r3
 800302a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800302e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80030c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003036:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800303e:	ee07 3a90 	vmov	s15, r3
 8003042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003046:	ed97 6a02 	vldr	s12, [r7, #8]
 800304a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80030c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800304e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800305a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800305e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003066:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003068:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	0a5b      	lsrs	r3, r3, #9
 800306e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003072:	3301      	adds	r3, #1
 8003074:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003080:	edd7 6a07 	vldr	s13, [r7, #28]
 8003084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800308c:	ee17 3a90 	vmov	r3, s15
 8003090:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003092:	e005      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	61bb      	str	r3, [r7, #24]
    break;
 8003098:	e002      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800309c:	61bb      	str	r3, [r7, #24]
    break;
 800309e:	bf00      	nop
  }

  return sysclockfreq;
 80030a0:	69bb      	ldr	r3, [r7, #24]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3724      	adds	r7, #36	; 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	58024400 	.word	0x58024400
 80030b4:	03d09000 	.word	0x03d09000
 80030b8:	003d0900 	.word	0x003d0900
 80030bc:	007a1200 	.word	0x007a1200
 80030c0:	46000000 	.word	0x46000000
 80030c4:	4c742400 	.word	0x4c742400
 80030c8:	4a742400 	.word	0x4a742400
 80030cc:	4af42400 	.word	0x4af42400

080030d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030d8:	2300      	movs	r3, #0
 80030da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030dc:	2300      	movs	r3, #0
 80030de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d03f      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030f4:	d02a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030fa:	d824      	bhi.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003100:	d018      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003102:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003106:	d81e      	bhi.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d003      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800310c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003110:	d007      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003112:	e018      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003114:	4bab      	ldr	r3, [pc, #684]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	4aaa      	ldr	r2, [pc, #680]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800311a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800311e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003120:	e015      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3304      	adds	r3, #4
 8003126:	2102      	movs	r1, #2
 8003128:	4618      	mov	r0, r3
 800312a:	f000 ff11 	bl	8003f50 <RCCEx_PLL2_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003132:	e00c      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3324      	adds	r3, #36	; 0x24
 8003138:	2102      	movs	r1, #2
 800313a:	4618      	mov	r0, r3
 800313c:	f000 ffba 	bl	80040b4 <RCCEx_PLL3_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003144:	e003      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
      break;
 800314a:	e000      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800314c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800314e:	7dfb      	ldrb	r3, [r7, #23]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d109      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003154:	4b9b      	ldr	r3, [pc, #620]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003158:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003160:	4998      	ldr	r1, [pc, #608]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003162:	4313      	orrs	r3, r2
 8003164:	650b      	str	r3, [r1, #80]	; 0x50
 8003166:	e001      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003168:	7dfb      	ldrb	r3, [r7, #23]
 800316a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d03d      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317c:	2b04      	cmp	r3, #4
 800317e:	d826      	bhi.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003180:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003186:	bf00      	nop
 8003188:	0800319d 	.word	0x0800319d
 800318c:	080031ab 	.word	0x080031ab
 8003190:	080031bd 	.word	0x080031bd
 8003194:	080031d5 	.word	0x080031d5
 8003198:	080031d5 	.word	0x080031d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800319c:	4b89      	ldr	r3, [pc, #548]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	4a88      	ldr	r2, [pc, #544]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031a8:	e015      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2100      	movs	r1, #0
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 fecd 	bl	8003f50 <RCCEx_PLL2_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031ba:	e00c      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3324      	adds	r3, #36	; 0x24
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 ff76 	bl	80040b4 <RCCEx_PLL3_Config>
 80031c8:	4603      	mov	r3, r0
 80031ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031cc:	e003      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
      break;
 80031d2:	e000      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80031d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031d6:	7dfb      	ldrb	r3, [r7, #23]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d109      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031dc:	4b79      	ldr	r3, [pc, #484]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e0:	f023 0207 	bic.w	r2, r3, #7
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e8:	4976      	ldr	r1, [pc, #472]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	650b      	str	r3, [r1, #80]	; 0x50
 80031ee:	e001      	b.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f0:	7dfb      	ldrb	r3, [r7, #23]
 80031f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d042      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003208:	d02b      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800320a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800320e:	d825      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003210:	2bc0      	cmp	r3, #192	; 0xc0
 8003212:	d028      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003214:	2bc0      	cmp	r3, #192	; 0xc0
 8003216:	d821      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003218:	2b80      	cmp	r3, #128	; 0x80
 800321a:	d016      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800321c:	2b80      	cmp	r3, #128	; 0x80
 800321e:	d81d      	bhi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003224:	2b40      	cmp	r3, #64	; 0x40
 8003226:	d007      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003228:	e018      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800322a:	4b66      	ldr	r3, [pc, #408]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	4a65      	ldr	r2, [pc, #404]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003234:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003236:	e017      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	2100      	movs	r1, #0
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fe86 	bl	8003f50 <RCCEx_PLL2_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003248:	e00e      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3324      	adds	r3, #36	; 0x24
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f000 ff2f 	bl	80040b4 <RCCEx_PLL3_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800325a:	e005      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	75fb      	strb	r3, [r7, #23]
      break;
 8003260:	e002      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003262:	bf00      	nop
 8003264:	e000      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800326e:	4b55      	ldr	r3, [pc, #340]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003272:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	4952      	ldr	r1, [pc, #328]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800327c:	4313      	orrs	r3, r2
 800327e:	650b      	str	r3, [r1, #80]	; 0x50
 8003280:	e001      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003282:	7dfb      	ldrb	r3, [r7, #23]
 8003284:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328e:	2b00      	cmp	r3, #0
 8003290:	d049      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003298:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800329c:	d030      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800329e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032a2:	d82a      	bhi.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032a8:	d02c      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80032aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032ae:	d824      	bhi.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b4:	d018      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80032b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ba:	d81e      	bhi.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80032c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032c4:	d007      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80032c6:	e018      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032c8:	4b3e      	ldr	r3, [pc, #248]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032cc:	4a3d      	ldr	r2, [pc, #244]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032d4:	e017      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3304      	adds	r3, #4
 80032da:	2100      	movs	r1, #0
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fe37 	bl	8003f50 <RCCEx_PLL2_Config>
 80032e2:	4603      	mov	r3, r0
 80032e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80032e6:	e00e      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3324      	adds	r3, #36	; 0x24
 80032ec:	2100      	movs	r1, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fee0 	bl	80040b4 <RCCEx_PLL3_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032f8:	e005      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
      break;
 80032fe:	e002      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003300:	bf00      	nop
 8003302:	e000      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003306:	7dfb      	ldrb	r3, [r7, #23]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800330c:	4b2d      	ldr	r3, [pc, #180]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800331a:	492a      	ldr	r1, [pc, #168]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800331c:	4313      	orrs	r3, r2
 800331e:	658b      	str	r3, [r1, #88]	; 0x58
 8003320:	e001      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003322:	7dfb      	ldrb	r3, [r7, #23]
 8003324:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800332e:	2b00      	cmp	r3, #0
 8003330:	d04c      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003338:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800333c:	d030      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800333e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003342:	d82a      	bhi.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003344:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003348:	d02c      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800334a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800334e:	d824      	bhi.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003350:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003354:	d018      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003356:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800335a:	d81e      	bhi.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003360:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003364:	d007      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003366:	e018      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003368:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	4a15      	ldr	r2, [pc, #84]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800336e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003372:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003374:	e017      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3304      	adds	r3, #4
 800337a:	2100      	movs	r1, #0
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fde7 	bl	8003f50 <RCCEx_PLL2_Config>
 8003382:	4603      	mov	r3, r0
 8003384:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003386:	e00e      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3324      	adds	r3, #36	; 0x24
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fe90 	bl	80040b4 <RCCEx_PLL3_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003398:	e005      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	75fb      	strb	r3, [r7, #23]
      break;
 800339e:	e002      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80033a0:	bf00      	nop
 80033a2:	e000      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80033a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10d      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033ba:	4902      	ldr	r1, [pc, #8]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	658b      	str	r3, [r1, #88]	; 0x58
 80033c0:	e004      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80033c2:	bf00      	nop
 80033c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d032      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033dc:	2b30      	cmp	r3, #48	; 0x30
 80033de:	d01c      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80033e0:	2b30      	cmp	r3, #48	; 0x30
 80033e2:	d817      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d00c      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d813      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d016      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80033f0:	2b10      	cmp	r3, #16
 80033f2:	d10f      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f4:	4baf      	ldr	r3, [pc, #700]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	4aae      	ldr	r2, [pc, #696]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80033fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003400:	e00e      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3304      	adds	r3, #4
 8003406:	2102      	movs	r1, #2
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fda1 	bl	8003f50 <RCCEx_PLL2_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003412:	e005      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	75fb      	strb	r3, [r7, #23]
      break;
 8003418:	e002      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800341a:	bf00      	nop
 800341c:	e000      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800341e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003420:	7dfb      	ldrb	r3, [r7, #23]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003426:	4ba3      	ldr	r3, [pc, #652]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003432:	49a0      	ldr	r1, [pc, #640]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003434:	4313      	orrs	r3, r2
 8003436:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003438:	e001      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343a:	7dfb      	ldrb	r3, [r7, #23]
 800343c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d047      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003452:	d030      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003454:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003458:	d82a      	bhi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800345a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800345e:	d02c      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003460:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003464:	d824      	bhi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346a:	d018      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800346c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003470:	d81e      	bhi.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347a:	d007      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800347c:	e018      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800347e:	4b8d      	ldr	r3, [pc, #564]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	4a8c      	ldr	r2, [pc, #560]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003488:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800348a:	e017      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	2100      	movs	r1, #0
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fd5c 	bl	8003f50 <RCCEx_PLL2_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800349c:	e00e      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3324      	adds	r3, #36	; 0x24
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 fe05 	bl	80040b4 <RCCEx_PLL3_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034ae:	e005      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	75fb      	strb	r3, [r7, #23]
      break;
 80034b4:	e002      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80034b6:	bf00      	nop
 80034b8:	e000      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80034ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034c2:	4b7c      	ldr	r3, [pc, #496]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ce:	4979      	ldr	r1, [pc, #484]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	650b      	str	r3, [r1, #80]	; 0x50
 80034d4:	e001      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d049      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ee:	d02e      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80034f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f4:	d828      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80034f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034fa:	d02a      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80034fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003500:	d822      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003502:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003506:	d026      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003508:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800350c:	d81c      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800350e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003512:	d010      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003518:	d816      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d01d      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800351e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003522:	d111      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	2101      	movs	r1, #1
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fd10 	bl	8003f50 <RCCEx_PLL2_Config>
 8003530:	4603      	mov	r3, r0
 8003532:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003534:	e012      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3324      	adds	r3, #36	; 0x24
 800353a:	2101      	movs	r1, #1
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fdb9 	bl	80040b4 <RCCEx_PLL3_Config>
 8003542:	4603      	mov	r3, r0
 8003544:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003546:	e009      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	75fb      	strb	r3, [r7, #23]
      break;
 800354c:	e006      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800354e:	bf00      	nop
 8003550:	e004      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003552:	bf00      	nop
 8003554:	e002      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003556:	bf00      	nop
 8003558:	e000      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800355a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800355c:	7dfb      	ldrb	r3, [r7, #23]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d109      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003562:	4b54      	ldr	r3, [pc, #336]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003566:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356e:	4951      	ldr	r1, [pc, #324]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003570:	4313      	orrs	r3, r2
 8003572:	650b      	str	r3, [r1, #80]	; 0x50
 8003574:	e001      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d04b      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800358c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003590:	d02e      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8003592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003596:	d828      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359c:	d02a      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800359e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a2:	d822      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035a8:	d026      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80035aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035ae:	d81c      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035b4:	d010      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80035b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ba:	d816      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01d      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80035c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035c4:	d111      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3304      	adds	r3, #4
 80035ca:	2101      	movs	r1, #1
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 fcbf 	bl	8003f50 <RCCEx_PLL2_Config>
 80035d2:	4603      	mov	r3, r0
 80035d4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80035d6:	e012      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3324      	adds	r3, #36	; 0x24
 80035dc:	2101      	movs	r1, #1
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fd68 	bl	80040b4 <RCCEx_PLL3_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80035e8:	e009      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
      break;
 80035ee:	e006      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80035f0:	bf00      	nop
 80035f2:	e004      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80035f4:	bf00      	nop
 80035f6:	e002      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80035f8:	bf00      	nop
 80035fa:	e000      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80035fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035fe:	7dfb      	ldrb	r3, [r7, #23]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003604:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003608:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003612:	4928      	ldr	r1, [pc, #160]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003614:	4313      	orrs	r3, r2
 8003616:	658b      	str	r3, [r1, #88]	; 0x58
 8003618:	e001      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361a:	7dfb      	ldrb	r3, [r7, #23]
 800361c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d02f      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800362e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003632:	d00e      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003638:	d814      	bhi.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d015      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800363e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003642:	d10f      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003644:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	4a1a      	ldr	r2, [pc, #104]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800364a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003650:	e00c      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3304      	adds	r3, #4
 8003656:	2101      	movs	r1, #1
 8003658:	4618      	mov	r0, r3
 800365a:	f000 fc79 	bl	8003f50 <RCCEx_PLL2_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003662:	e003      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	75fb      	strb	r3, [r7, #23]
      break;
 8003668:	e000      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800366a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003676:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367e:	490d      	ldr	r1, [pc, #52]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003680:	4313      	orrs	r3, r2
 8003682:	650b      	str	r3, [r1, #80]	; 0x50
 8003684:	e001      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003686:	7dfb      	ldrb	r3, [r7, #23]
 8003688:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d033      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	2b03      	cmp	r3, #3
 800369c:	d81c      	bhi.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800369e:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80036a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a4:	080036df 	.word	0x080036df
 80036a8:	080036b9 	.word	0x080036b9
 80036ac:	080036c7 	.word	0x080036c7
 80036b0:	080036df 	.word	0x080036df
 80036b4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b8:	4bb8      	ldr	r3, [pc, #736]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	4ab7      	ldr	r2, [pc, #732]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80036be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80036c4:	e00c      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2102      	movs	r1, #2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fc3f 	bl	8003f50 <RCCEx_PLL2_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80036d6:	e003      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	75fb      	strb	r3, [r7, #23]
      break;
 80036dc:	e000      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80036de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036e0:	7dfb      	ldrb	r3, [r7, #23]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80036e6:	4bad      	ldr	r3, [pc, #692]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80036e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ea:	f023 0203 	bic.w	r2, r3, #3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	49aa      	ldr	r1, [pc, #680]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80036f8:	e001      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8086 	beq.w	8003818 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800370c:	4ba4      	ldr	r3, [pc, #656]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4aa3      	ldr	r2, [pc, #652]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003716:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003718:	f7fd fcc0 	bl	800109c <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800371e:	e009      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003720:	f7fd fcbc 	bl	800109c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	; 0x64
 800372c:	d902      	bls.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	75fb      	strb	r3, [r7, #23]
        break;
 8003732:	e005      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003734:	4b9a      	ldr	r3, [pc, #616]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0ef      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003740:	7dfb      	ldrb	r3, [r7, #23]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d166      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003746:	4b95      	ldr	r3, [pc, #596]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003748:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003750:	4053      	eors	r3, r2
 8003752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003756:	2b00      	cmp	r3, #0
 8003758:	d013      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800375a:	4b90      	ldr	r3, [pc, #576]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003762:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003764:	4b8d      	ldr	r3, [pc, #564]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	4a8c      	ldr	r2, [pc, #560]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800376a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003770:	4b8a      	ldr	r3, [pc, #552]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	4a89      	ldr	r2, [pc, #548]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800377c:	4a87      	ldr	r2, [pc, #540]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800378c:	d115      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378e:	f7fd fc85 	bl	800109c <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003794:	e00b      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003796:	f7fd fc81 	bl	800109c <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d902      	bls.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	75fb      	strb	r3, [r7, #23]
            break;
 80037ac:	e005      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037ae:	4b7b      	ldr	r3, [pc, #492]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0ed      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d126      	bne.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ce:	d10d      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80037d0:	4b72      	ldr	r3, [pc, #456]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037de:	0919      	lsrs	r1, r3, #4
 80037e0:	4b70      	ldr	r3, [pc, #448]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80037e2:	400b      	ands	r3, r1
 80037e4:	496d      	ldr	r1, [pc, #436]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	610b      	str	r3, [r1, #16]
 80037ea:	e005      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80037ec:	4b6b      	ldr	r3, [pc, #428]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	4a6a      	ldr	r2, [pc, #424]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80037f6:	6113      	str	r3, [r2, #16]
 80037f8:	4b68      	ldr	r3, [pc, #416]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003806:	4965      	ldr	r1, [pc, #404]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003808:	4313      	orrs	r3, r2
 800380a:	670b      	str	r3, [r1, #112]	; 0x70
 800380c:	e004      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800380e:	7dfb      	ldrb	r3, [r7, #23]
 8003810:	75bb      	strb	r3, [r7, #22]
 8003812:	e001      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d07e      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003828:	2b28      	cmp	r3, #40	; 0x28
 800382a:	d867      	bhi.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800382c:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800382e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003832:	bf00      	nop
 8003834:	08003903 	.word	0x08003903
 8003838:	080038fd 	.word	0x080038fd
 800383c:	080038fd 	.word	0x080038fd
 8003840:	080038fd 	.word	0x080038fd
 8003844:	080038fd 	.word	0x080038fd
 8003848:	080038fd 	.word	0x080038fd
 800384c:	080038fd 	.word	0x080038fd
 8003850:	080038fd 	.word	0x080038fd
 8003854:	080038d9 	.word	0x080038d9
 8003858:	080038fd 	.word	0x080038fd
 800385c:	080038fd 	.word	0x080038fd
 8003860:	080038fd 	.word	0x080038fd
 8003864:	080038fd 	.word	0x080038fd
 8003868:	080038fd 	.word	0x080038fd
 800386c:	080038fd 	.word	0x080038fd
 8003870:	080038fd 	.word	0x080038fd
 8003874:	080038eb 	.word	0x080038eb
 8003878:	080038fd 	.word	0x080038fd
 800387c:	080038fd 	.word	0x080038fd
 8003880:	080038fd 	.word	0x080038fd
 8003884:	080038fd 	.word	0x080038fd
 8003888:	080038fd 	.word	0x080038fd
 800388c:	080038fd 	.word	0x080038fd
 8003890:	080038fd 	.word	0x080038fd
 8003894:	08003903 	.word	0x08003903
 8003898:	080038fd 	.word	0x080038fd
 800389c:	080038fd 	.word	0x080038fd
 80038a0:	080038fd 	.word	0x080038fd
 80038a4:	080038fd 	.word	0x080038fd
 80038a8:	080038fd 	.word	0x080038fd
 80038ac:	080038fd 	.word	0x080038fd
 80038b0:	080038fd 	.word	0x080038fd
 80038b4:	08003903 	.word	0x08003903
 80038b8:	080038fd 	.word	0x080038fd
 80038bc:	080038fd 	.word	0x080038fd
 80038c0:	080038fd 	.word	0x080038fd
 80038c4:	080038fd 	.word	0x080038fd
 80038c8:	080038fd 	.word	0x080038fd
 80038cc:	080038fd 	.word	0x080038fd
 80038d0:	080038fd 	.word	0x080038fd
 80038d4:	08003903 	.word	0x08003903
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3304      	adds	r3, #4
 80038dc:	2101      	movs	r1, #1
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 fb36 	bl	8003f50 <RCCEx_PLL2_Config>
 80038e4:	4603      	mov	r3, r0
 80038e6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80038e8:	e00c      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3324      	adds	r3, #36	; 0x24
 80038ee:	2101      	movs	r1, #1
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 fbdf 	bl	80040b4 <RCCEx_PLL3_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80038fa:	e003      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003900:	e000      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003902:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800390a:	4b24      	ldr	r3, [pc, #144]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800390c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003916:	4921      	ldr	r1, [pc, #132]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003918:	4313      	orrs	r3, r2
 800391a:	654b      	str	r3, [r1, #84]	; 0x54
 800391c:	e001      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391e:	7dfb      	ldrb	r3, [r7, #23]
 8003920:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d03e      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003932:	2b05      	cmp	r3, #5
 8003934:	d820      	bhi.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003936:	a201      	add	r2, pc, #4	; (adr r2, 800393c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	0800397f 	.word	0x0800397f
 8003940:	08003955 	.word	0x08003955
 8003944:	08003967 	.word	0x08003967
 8003948:	0800397f 	.word	0x0800397f
 800394c:	0800397f 	.word	0x0800397f
 8003950:	0800397f 	.word	0x0800397f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3304      	adds	r3, #4
 8003958:	2101      	movs	r1, #1
 800395a:	4618      	mov	r0, r3
 800395c:	f000 faf8 	bl	8003f50 <RCCEx_PLL2_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003964:	e00c      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3324      	adds	r3, #36	; 0x24
 800396a:	2101      	movs	r1, #1
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fba1 	bl	80040b4 <RCCEx_PLL3_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003976:	e003      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	75fb      	strb	r3, [r7, #23]
      break;
 800397c:	e000      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800397e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003980:	7dfb      	ldrb	r3, [r7, #23]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d110      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	f023 0207 	bic.w	r2, r3, #7
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003992:	4902      	ldr	r1, [pc, #8]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003994:	4313      	orrs	r3, r2
 8003996:	654b      	str	r3, [r1, #84]	; 0x54
 8003998:	e008      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800399a:	bf00      	nop
 800399c:	58024400 	.word	0x58024400
 80039a0:	58024800 	.word	0x58024800
 80039a4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
 80039aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d039      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039be:	2b05      	cmp	r3, #5
 80039c0:	d820      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80039c2:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	08003a0b 	.word	0x08003a0b
 80039cc:	080039e1 	.word	0x080039e1
 80039d0:	080039f3 	.word	0x080039f3
 80039d4:	08003a0b 	.word	0x08003a0b
 80039d8:	08003a0b 	.word	0x08003a0b
 80039dc:	08003a0b 	.word	0x08003a0b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3304      	adds	r3, #4
 80039e4:	2101      	movs	r1, #1
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fab2 	bl	8003f50 <RCCEx_PLL2_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80039f0:	e00c      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3324      	adds	r3, #36	; 0x24
 80039f6:	2101      	movs	r1, #1
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fb5b 	bl	80040b4 <RCCEx_PLL3_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a02:	e003      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	75fb      	strb	r3, [r7, #23]
      break;
 8003a08:	e000      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003a0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a12:	4bb7      	ldr	r3, [pc, #732]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a16:	f023 0207 	bic.w	r2, r3, #7
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a20:	49b3      	ldr	r1, [pc, #716]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	658b      	str	r3, [r1, #88]	; 0x58
 8003a26:	e001      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a28:	7dfb      	ldrb	r3, [r7, #23]
 8003a2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d04b      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a42:	d02e      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a48:	d828      	bhi.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4e:	d02a      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a54:	d822      	bhi.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003a56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a5a:	d026      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003a5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a60:	d81c      	bhi.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a66:	d010      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a6c:	d816      	bhi.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01d      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003a72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a76:	d111      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fa66 	bl	8003f50 <RCCEx_PLL2_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003a88:	e012      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3324      	adds	r3, #36	; 0x24
 8003a8e:	2102      	movs	r1, #2
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fb0f 	bl	80040b4 <RCCEx_PLL3_Config>
 8003a96:	4603      	mov	r3, r0
 8003a98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003a9a:	e009      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003aa0:	e006      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e004      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e002      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10a      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ab6:	4b8e      	ldr	r3, [pc, #568]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ac4:	498a      	ldr	r1, [pc, #552]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	654b      	str	r3, [r1, #84]	; 0x54
 8003aca:	e001      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	7dfb      	ldrb	r3, [r7, #23]
 8003ace:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d04b      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ae2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ae6:	d02e      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003ae8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003aec:	d828      	bhi.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af2:	d02a      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af8:	d822      	bhi.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003afa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003afe:	d026      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003b00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b04:	d81c      	bhi.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b0a:	d010      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b10:	d816      	bhi.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d01d      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1a:	d111      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	2100      	movs	r1, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fa14 	bl	8003f50 <RCCEx_PLL2_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b2c:	e012      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3324      	adds	r3, #36	; 0x24
 8003b32:	2102      	movs	r1, #2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fabd 	bl	80040b4 <RCCEx_PLL3_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b3e:	e009      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	75fb      	strb	r3, [r7, #23]
      break;
 8003b44:	e006      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b46:	bf00      	nop
 8003b48:	e004      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b4a:	bf00      	nop
 8003b4c:	e002      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b4e:	bf00      	nop
 8003b50:	e000      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b54:	7dfb      	ldrb	r3, [r7, #23]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b5a:	4b65      	ldr	r3, [pc, #404]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b68:	4961      	ldr	r1, [pc, #388]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	658b      	str	r3, [r1, #88]	; 0x58
 8003b6e:	e001      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b70:	7dfb      	ldrb	r3, [r7, #23]
 8003b72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d04b      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b86:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b8a:	d02e      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003b8c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003b90:	d828      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b96:	d02a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b9c:	d822      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003b9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ba2:	d026      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003ba4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ba8:	d81c      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003baa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bae:	d010      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb4:	d816      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01d      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bbe:	d111      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 f9c2 	bl	8003f50 <RCCEx_PLL2_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003bd0:	e012      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3324      	adds	r3, #36	; 0x24
 8003bd6:	2102      	movs	r1, #2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fa6b 	bl	80040b4 <RCCEx_PLL3_Config>
 8003bde:	4603      	mov	r3, r0
 8003be0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003be2:	e009      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	75fb      	strb	r3, [r7, #23]
      break;
 8003be8:	e006      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003bea:	bf00      	nop
 8003bec:	e004      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003bee:	bf00      	nop
 8003bf0:	e002      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003bf2:	bf00      	nop
 8003bf4:	e000      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bf8:	7dfb      	ldrb	r3, [r7, #23]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10a      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003bfe:	4b3c      	ldr	r3, [pc, #240]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c0c:	4938      	ldr	r1, [pc, #224]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	658b      	str	r3, [r1, #88]	; 0x58
 8003c12:	e001      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
 8003c16:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d01a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c2e:	d10a      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3324      	adds	r3, #36	; 0x24
 8003c34:	2102      	movs	r1, #2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fa3c 	bl	80040b4 <RCCEx_PLL3_Config>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c46:	4b2a      	ldr	r3, [pc, #168]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c54:	4926      	ldr	r1, [pc, #152]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d01a      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c70:	d10a      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3324      	adds	r3, #36	; 0x24
 8003c76:	2102      	movs	r1, #2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fa1b 	bl	80040b4 <RCCEx_PLL3_Config>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c88:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c96:	4916      	ldr	r1, [pc, #88]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d036      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cb2:	d01f      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cb8:	d817      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc2:	d009      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003cc4:	e011      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	2100      	movs	r1, #0
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 f93f 	bl	8003f50 <RCCEx_PLL2_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003cd6:	e00e      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3324      	adds	r3, #36	; 0x24
 8003cdc:	2102      	movs	r1, #2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 f9e8 	bl	80040b4 <RCCEx_PLL3_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003ce8:	e005      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	75fb      	strb	r3, [r7, #23]
      break;
 8003cee:	e002      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003cf0:	58024400 	.word	0x58024400
      break;
 8003cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10a      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cfc:	4b93      	ldr	r3, [pc, #588]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d0a:	4990      	ldr	r1, [pc, #576]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	658b      	str	r3, [r1, #88]	; 0x58
 8003d10:	e001      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
 8003d14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d033      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d2c:	d01c      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003d2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d32:	d816      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d38:	d003      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003d3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d3e:	d007      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003d40:	e00f      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d42:	4b82      	ldr	r3, [pc, #520]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	4a81      	ldr	r2, [pc, #516]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d4e:	e00c      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3324      	adds	r3, #36	; 0x24
 8003d54:	2101      	movs	r1, #1
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 f9ac 	bl	80040b4 <RCCEx_PLL3_Config>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d60:	e003      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	75fb      	strb	r3, [r7, #23]
      break;
 8003d66:	e000      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d70:	4b76      	ldr	r3, [pc, #472]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d7e:	4973      	ldr	r1, [pc, #460]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	654b      	str	r3, [r1, #84]	; 0x54
 8003d84:	e001      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d86:	7dfb      	ldrb	r3, [r7, #23]
 8003d88:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d029      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8003d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da2:	d007      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003da4:	e00f      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da6:	4b69      	ldr	r3, [pc, #420]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	4a68      	ldr	r2, [pc, #416]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003db2:	e00b      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3304      	adds	r3, #4
 8003db8:	2102      	movs	r1, #2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 f8c8 	bl	8003f50 <RCCEx_PLL2_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003dc4:	e002      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d109      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003dd2:	4b5e      	ldr	r3, [pc, #376]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dde:	495b      	ldr	r1, [pc, #364]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003de4:	e001      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
 8003de8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3324      	adds	r3, #36	; 0x24
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f959 	bl	80040b4 <RCCEx_PLL3_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d030      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e20:	d017      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003e22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e26:	d811      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e2c:	d013      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e32:	d80b      	bhi.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d010      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e3c:	d106      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e3e:	4b43      	ldr	r3, [pc, #268]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e42:	4a42      	ldr	r2, [pc, #264]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003e4a:	e007      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e50:	e004      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003e52:	bf00      	nop
 8003e54:	e002      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003e56:	bf00      	nop
 8003e58:	e000      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e5c:	7dfb      	ldrb	r3, [r7, #23]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d109      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e62:	4b3a      	ldr	r3, [pc, #232]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e6e:	4937      	ldr	r1, [pc, #220]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	654b      	str	r3, [r1, #84]	; 0x54
 8003e74:	e001      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
 8003e78:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d008      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e86:	4b31      	ldr	r3, [pc, #196]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	492e      	ldr	r1, [pc, #184]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d009      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003ea4:	4b29      	ldr	r3, [pc, #164]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003eb2:	4926      	ldr	r1, [pc, #152]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ec4:	4b21      	ldr	r3, [pc, #132]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ed0:	491e      	ldr	r1, [pc, #120]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00d      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ee2:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	4a19      	ldr	r2, [pc, #100]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ee8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003eec:	6113      	str	r3, [r2, #16]
 8003eee:	4b17      	ldr	r3, [pc, #92]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ef8:	4914      	ldr	r1, [pc, #80]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	da08      	bge.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f06:	4b11      	ldr	r3, [pc, #68]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f12:	490e      	ldr	r1, [pc, #56]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d009      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f24:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f32:	4906      	ldr	r1, [pc, #24]	; (8003f4c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003f38:	7dbb      	ldrb	r3, [r7, #22]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e000      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	58024400 	.word	0x58024400

08003f50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f5e:	4b53      	ldr	r3, [pc, #332]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d101      	bne.n	8003f6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e099      	b.n	80040a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f6e:	4b4f      	ldr	r3, [pc, #316]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a4e      	ldr	r2, [pc, #312]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8003f74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f7a:	f7fd f88f 	bl	800109c <HAL_GetTick>
 8003f7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f80:	e008      	b.n	8003f94 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003f82:	f7fd f88b 	bl	800109c <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e086      	b.n	80040a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f94:	4b45      	ldr	r3, [pc, #276]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f0      	bne.n	8003f82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003fa0:	4b42      	ldr	r3, [pc, #264]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	031b      	lsls	r3, r3, #12
 8003fae:	493f      	ldr	r1, [pc, #252]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	628b      	str	r3, [r1, #40]	; 0x28
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	025b      	lsls	r3, r3, #9
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	041b      	lsls	r3, r3, #16
 8003fd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	061b      	lsls	r3, r3, #24
 8003fe0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003fe4:	4931      	ldr	r1, [pc, #196]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003fea:	4b30      	ldr	r3, [pc, #192]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	492d      	ldr	r1, [pc, #180]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ffc:	4b2b      	ldr	r3, [pc, #172]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	f023 0220 	bic.w	r2, r3, #32
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	4928      	ldr	r1, [pc, #160]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 800400a:	4313      	orrs	r3, r2
 800400c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800400e:	4b27      	ldr	r3, [pc, #156]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	4a26      	ldr	r2, [pc, #152]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8004014:	f023 0310 	bic.w	r3, r3, #16
 8004018:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800401a:	4b24      	ldr	r3, [pc, #144]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 800401c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800401e:	4b24      	ldr	r3, [pc, #144]	; (80040b0 <RCCEx_PLL2_Config+0x160>)
 8004020:	4013      	ands	r3, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	69d2      	ldr	r2, [r2, #28]
 8004026:	00d2      	lsls	r2, r2, #3
 8004028:	4920      	ldr	r1, [pc, #128]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 800402a:	4313      	orrs	r3, r2
 800402c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800402e:	4b1f      	ldr	r3, [pc, #124]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	4a1e      	ldr	r2, [pc, #120]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8004034:	f043 0310 	orr.w	r3, r3, #16
 8004038:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d106      	bne.n	800404e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004040:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	4a19      	ldr	r2, [pc, #100]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8004046:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800404a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800404c:	e00f      	b.n	800406e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d106      	bne.n	8004062 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004054:	4b15      	ldr	r3, [pc, #84]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	4a14      	ldr	r2, [pc, #80]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 800405a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800405e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004060:	e005      	b.n	800406e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004062:	4b12      	ldr	r3, [pc, #72]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	4a11      	ldr	r2, [pc, #68]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8004068:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800406c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800406e:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a0e      	ldr	r2, [pc, #56]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8004074:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800407a:	f7fd f80f 	bl	800109c <HAL_GetTick>
 800407e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004080:	e008      	b.n	8004094 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004082:	f7fd f80b 	bl	800109c <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e006      	b.n	80040a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <RCCEx_PLL2_Config+0x15c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	58024400 	.word	0x58024400
 80040b0:	ffff0007 	.word	0xffff0007

080040b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040c2:	4b53      	ldr	r3, [pc, #332]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 80040c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d101      	bne.n	80040d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e099      	b.n	8004206 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80040d2:	4b4f      	ldr	r3, [pc, #316]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a4e      	ldr	r2, [pc, #312]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 80040d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040de:	f7fc ffdd 	bl	800109c <HAL_GetTick>
 80040e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040e4:	e008      	b.n	80040f8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80040e6:	f7fc ffd9 	bl	800109c <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e086      	b.n	8004206 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040f8:	4b45      	ldr	r3, [pc, #276]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1f0      	bne.n	80040e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004104:	4b42      	ldr	r3, [pc, #264]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	051b      	lsls	r3, r3, #20
 8004112:	493f      	ldr	r1, [pc, #252]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 8004114:	4313      	orrs	r3, r2
 8004116:	628b      	str	r3, [r1, #40]	; 0x28
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	3b01      	subs	r3, #1
 800411e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	3b01      	subs	r3, #1
 8004128:	025b      	lsls	r3, r3, #9
 800412a:	b29b      	uxth	r3, r3
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	3b01      	subs	r3, #1
 8004134:	041b      	lsls	r3, r3, #16
 8004136:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	3b01      	subs	r3, #1
 8004142:	061b      	lsls	r3, r3, #24
 8004144:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004148:	4931      	ldr	r1, [pc, #196]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 800414a:	4313      	orrs	r3, r2
 800414c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800414e:	4b30      	ldr	r3, [pc, #192]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	492d      	ldr	r1, [pc, #180]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 800415c:	4313      	orrs	r3, r2
 800415e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004160:	4b2b      	ldr	r3, [pc, #172]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	4928      	ldr	r1, [pc, #160]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 800416e:	4313      	orrs	r3, r2
 8004170:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004172:	4b27      	ldr	r3, [pc, #156]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	4a26      	ldr	r2, [pc, #152]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 8004178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800417c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800417e:	4b24      	ldr	r3, [pc, #144]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 8004180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004182:	4b24      	ldr	r3, [pc, #144]	; (8004214 <RCCEx_PLL3_Config+0x160>)
 8004184:	4013      	ands	r3, r2
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	69d2      	ldr	r2, [r2, #28]
 800418a:	00d2      	lsls	r2, r2, #3
 800418c:	4920      	ldr	r1, [pc, #128]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 800418e:	4313      	orrs	r3, r2
 8004190:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004192:	4b1f      	ldr	r3, [pc, #124]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	4a1e      	ldr	r2, [pc, #120]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 8004198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80041a4:	4b1a      	ldr	r3, [pc, #104]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	4a19      	ldr	r2, [pc, #100]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 80041aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041b0:	e00f      	b.n	80041d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d106      	bne.n	80041c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80041b8:	4b15      	ldr	r3, [pc, #84]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	4a14      	ldr	r2, [pc, #80]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 80041be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041c4:	e005      	b.n	80041d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80041c6:	4b12      	ldr	r3, [pc, #72]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	4a11      	ldr	r2, [pc, #68]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 80041cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80041d2:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a0e      	ldr	r2, [pc, #56]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 80041d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041de:	f7fc ff5d 	bl	800109c <HAL_GetTick>
 80041e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041e4:	e008      	b.n	80041f8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80041e6:	f7fc ff59 	bl	800109c <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e006      	b.n	8004206 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <RCCEx_PLL3_Config+0x15c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004204:	7bfb      	ldrb	r3, [r7, #15]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	58024400 	.word	0x58024400
 8004214:	ffff0007 	.word	0xffff0007

08004218 <__libc_init_array>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	4d0d      	ldr	r5, [pc, #52]	; (8004250 <__libc_init_array+0x38>)
 800421c:	4c0d      	ldr	r4, [pc, #52]	; (8004254 <__libc_init_array+0x3c>)
 800421e:	1b64      	subs	r4, r4, r5
 8004220:	10a4      	asrs	r4, r4, #2
 8004222:	2600      	movs	r6, #0
 8004224:	42a6      	cmp	r6, r4
 8004226:	d109      	bne.n	800423c <__libc_init_array+0x24>
 8004228:	4d0b      	ldr	r5, [pc, #44]	; (8004258 <__libc_init_array+0x40>)
 800422a:	4c0c      	ldr	r4, [pc, #48]	; (800425c <__libc_init_array+0x44>)
 800422c:	f000 f820 	bl	8004270 <_init>
 8004230:	1b64      	subs	r4, r4, r5
 8004232:	10a4      	asrs	r4, r4, #2
 8004234:	2600      	movs	r6, #0
 8004236:	42a6      	cmp	r6, r4
 8004238:	d105      	bne.n	8004246 <__libc_init_array+0x2e>
 800423a:	bd70      	pop	{r4, r5, r6, pc}
 800423c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004240:	4798      	blx	r3
 8004242:	3601      	adds	r6, #1
 8004244:	e7ee      	b.n	8004224 <__libc_init_array+0xc>
 8004246:	f855 3b04 	ldr.w	r3, [r5], #4
 800424a:	4798      	blx	r3
 800424c:	3601      	adds	r6, #1
 800424e:	e7f2      	b.n	8004236 <__libc_init_array+0x1e>
 8004250:	08004298 	.word	0x08004298
 8004254:	08004298 	.word	0x08004298
 8004258:	08004298 	.word	0x08004298
 800425c:	0800429c 	.word	0x0800429c

08004260 <memset>:
 8004260:	4402      	add	r2, r0
 8004262:	4603      	mov	r3, r0
 8004264:	4293      	cmp	r3, r2
 8004266:	d100      	bne.n	800426a <memset+0xa>
 8004268:	4770      	bx	lr
 800426a:	f803 1b01 	strb.w	r1, [r3], #1
 800426e:	e7f9      	b.n	8004264 <memset+0x4>

08004270 <_init>:
 8004270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004272:	bf00      	nop
 8004274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004276:	bc08      	pop	{r3}
 8004278:	469e      	mov	lr, r3
 800427a:	4770      	bx	lr

0800427c <_fini>:
 800427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427e:	bf00      	nop
 8004280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004282:	bc08      	pop	{r3}
 8004284:	469e      	mov	lr, r3
 8004286:	4770      	bx	lr
