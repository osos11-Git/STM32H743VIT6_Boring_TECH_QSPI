
H743_QSPI_deneme3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000403c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080042d4  080042d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080042e4  080042e4  000142e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080042e8  080042e8  000142e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  24000000  080042ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d0  24000028  08004314  00020028  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240000f8  08004314  000200f8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013e2d  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000252d  00000000  00000000  00033e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000008e0  00000000  00000000  000363b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000808  00000000  00000000  00036c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035045  00000000  00000000  00037498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b241  00000000  00000000  0006c4dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014fd55  00000000  00000000  0007771e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001c7473  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002290  00000000  00000000  001c74c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000028 	.word	0x24000028
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080042bc 	.word	0x080042bc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400002c 	.word	0x2400002c
 80002d4:	080042bc 	.word	0x080042bc

080002d8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b087      	sub	sp, #28
 80002dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002de:	4b28      	ldr	r3, [pc, #160]	; (8000380 <MX_GPIO_Init+0xa8>)
 80002e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002e4:	4a26      	ldr	r2, [pc, #152]	; (8000380 <MX_GPIO_Init+0xa8>)
 80002e6:	f043 0310 	orr.w	r3, r3, #16
 80002ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002ee:	4b24      	ldr	r3, [pc, #144]	; (8000380 <MX_GPIO_Init+0xa8>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	f003 0310 	and.w	r3, r3, #16
 80002f8:	617b      	str	r3, [r7, #20]
 80002fa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002fc:	4b20      	ldr	r3, [pc, #128]	; (8000380 <MX_GPIO_Init+0xa8>)
 80002fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000302:	4a1f      	ldr	r2, [pc, #124]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800030c:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <MX_GPIO_Init+0xa8>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000316:	613b      	str	r3, [r7, #16]
 8000318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <MX_GPIO_Init+0xa8>)
 800031c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000320:	4a17      	ldr	r2, [pc, #92]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800032a:	4b15      	ldr	r3, [pc, #84]	; (8000380 <MX_GPIO_Init+0xa8>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	f003 0301 	and.w	r3, r3, #1
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_GPIO_Init+0xa8>)
 800033a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800033e:	4a10      	ldr	r2, [pc, #64]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000340:	f043 0302 	orr.w	r3, r3, #2
 8000344:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000348:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <MX_GPIO_Init+0xa8>)
 800034a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800034e:	f003 0302 	and.w	r3, r3, #2
 8000352:	60bb      	str	r3, [r7, #8]
 8000354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000356:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800035c:	4a08      	ldr	r2, [pc, #32]	; (8000380 <MX_GPIO_Init+0xa8>)
 800035e:	f043 0308 	orr.w	r3, r3, #8
 8000362:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <MX_GPIO_Init+0xa8>)
 8000368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800036c:	f003 0308 	and.w	r3, r3, #8
 8000370:	607b      	str	r3, [r7, #4]
 8000372:	687b      	ldr	r3, [r7, #4]

}
 8000374:	bf00      	nop
 8000376:	371c      	adds	r7, #28
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	58024400 	.word	0x58024400

08000384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800038a:	4b48      	ldr	r3, [pc, #288]	; (80004ac <main+0x128>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000392:	2b00      	cmp	r3, #0
 8000394:	d11b      	bne.n	80003ce <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039c:	f3bf 8f6f 	isb	sy
}
 80003a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003a2:	4b42      	ldr	r3, [pc, #264]	; (80004ac <main+0x128>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003aa:	f3bf 8f4f 	dsb	sy
}
 80003ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b0:	f3bf 8f6f 	isb	sy
}
 80003b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003b6:	4b3d      	ldr	r3, [pc, #244]	; (80004ac <main+0x128>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a3c      	ldr	r2, [pc, #240]	; (80004ac <main+0x128>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003c2:	f3bf 8f4f 	dsb	sy
}
 80003c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
}
 80003cc:	e000      	b.n	80003d0 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003d0:	4b36      	ldr	r3, [pc, #216]	; (80004ac <main+0x128>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d138      	bne.n	800044e <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003dc:	4b33      	ldr	r3, [pc, #204]	; (80004ac <main+0x128>)
 80003de:	2200      	movs	r2, #0
 80003e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003e4:	f3bf 8f4f 	dsb	sy
}
 80003e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003ea:	4b30      	ldr	r3, [pc, #192]	; (80004ac <main+0x128>)
 80003ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003f0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	0b5b      	lsrs	r3, r3, #13
 80003f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003fa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	08db      	lsrs	r3, r3, #3
 8000400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000404:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	015a      	lsls	r2, r3, #5
 800040a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800040e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000414:	4925      	ldr	r1, [pc, #148]	; (80004ac <main+0x128>)
 8000416:	4313      	orrs	r3, r2
 8000418:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	607a      	str	r2, [r7, #4]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1ef      	bne.n	8000406 <main+0x82>
    } while(sets-- != 0U);
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	60ba      	str	r2, [r7, #8]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1e5      	bne.n	80003fc <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000430:	f3bf 8f4f 	dsb	sy
}
 8000434:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000436:	4b1d      	ldr	r3, [pc, #116]	; (80004ac <main+0x128>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a1c      	ldr	r2, [pc, #112]	; (80004ac <main+0x128>)
 800043c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000448:	f3bf 8f6f 	isb	sy
}
 800044c:	e000      	b.n	8000450 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800044e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000450:	f000 fe26 	bl	80010a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000454:	f000 f830 	bl	80004b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000458:	f7ff ff3e 	bl	80002d8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 800045c:	f000 f8b0 	bl	80005c0 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  if (CSP_QUADSPI_Init() != HAL_OK)
 8000460:	f000 f9e8 	bl	8000834 <CSP_QUADSPI_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <main+0xea>
  {
	  Error_Handler();
 800046a:	f000 f8a3 	bl	80005b4 <Error_Handler>
  }

  HAL_Delay(100);
 800046e:	2064      	movs	r0, #100	; 0x64
 8000470:	f000 fea8 	bl	80011c4 <HAL_Delay>

  if (CSP_QSPI_Erase_Chip() != HAL_OK)  //approx 13 second to execute
 8000474:	f000 fa14 	bl	80008a0 <CSP_QSPI_Erase_Chip>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <main+0xfe>
  {
	  Error_Handler();
 800047e:	f000 f899 	bl	80005b4 <Error_Handler>
  }

  if (CSP_QSPI_WriteMemory(writebuf, 0, sizeof(writebuf)) != HAL_OK)
 8000482:	2218      	movs	r2, #24
 8000484:	2100      	movs	r1, #0
 8000486:	480a      	ldr	r0, [pc, #40]	; (80004b0 <main+0x12c>)
 8000488:	f000 fbc6 	bl	8000c18 <CSP_QSPI_WriteMemory>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <main+0x112>
  {
	  Error_Handler();
 8000492:	f000 f88f 	bl	80005b4 <Error_Handler>
  }

  if (CSP_QSPI_Read(readbuf, 0, 100) != HAL_OK)
 8000496:	2264      	movs	r2, #100	; 0x64
 8000498:	2100      	movs	r1, #0
 800049a:	4806      	ldr	r0, [pc, #24]	; (80004b4 <main+0x130>)
 800049c:	f000 fcb0 	bl	8000e00 <CSP_QSPI_Read>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <main+0x126>
  {
	  Error_Handler();
 80004a6:	f000 f885 	bl	80005b4 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004aa:	e7fe      	b.n	80004aa <main+0x126>
 80004ac:	e000ed00 	.word	0xe000ed00
 80004b0:	24000000 	.word	0x24000000
 80004b4:	24000044 	.word	0x24000044

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b09c      	sub	sp, #112	; 0x70
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c2:	224c      	movs	r2, #76	; 0x4c
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f003 fef0 	bl	80042ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2220      	movs	r2, #32
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f003 feea 	bl	80042ac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004d8:	2002      	movs	r0, #2
 80004da:	f001 fa41 	bl	8001960 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80004de:	2300      	movs	r3, #0
 80004e0:	603b      	str	r3, [r7, #0]
 80004e2:	4b32      	ldr	r3, [pc, #200]	; (80005ac <SystemClock_Config+0xf4>)
 80004e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e6:	4a31      	ldr	r2, [pc, #196]	; (80005ac <SystemClock_Config+0xf4>)
 80004e8:	f023 0301 	bic.w	r3, r3, #1
 80004ec:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004ee:	4b2f      	ldr	r3, [pc, #188]	; (80005ac <SystemClock_Config+0xf4>)
 80004f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	4b2d      	ldr	r3, [pc, #180]	; (80005b0 <SystemClock_Config+0xf8>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000500:	4a2b      	ldr	r2, [pc, #172]	; (80005b0 <SystemClock_Config+0xf8>)
 8000502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b29      	ldr	r3, [pc, #164]	; (80005b0 <SystemClock_Config+0xf8>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000510:	603b      	str	r3, [r7, #0]
 8000512:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000514:	bf00      	nop
 8000516:	4b26      	ldr	r3, [pc, #152]	; (80005b0 <SystemClock_Config+0xf8>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800051e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000522:	d1f8      	bne.n	8000516 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000524:	2301      	movs	r3, #1
 8000526:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800052c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052e:	2302      	movs	r3, #2
 8000530:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000532:	2302      	movs	r3, #2
 8000534:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000536:	2306      	movs	r3, #6
 8000538:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 399;
 800053a:	f240 138f 	movw	r3, #399	; 0x18f
 800053e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000540:	2302      	movs	r3, #2
 8000542:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000544:	2302      	movs	r3, #2
 8000546:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000548:	2302      	movs	r3, #2
 800054a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800054c:	2300      	movs	r3, #0
 800054e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000550:	2300      	movs	r3, #0
 8000552:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055c:	4618      	mov	r0, r3
 800055e:	f001 fe9d 	bl	800229c <HAL_RCC_OscConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000568:	f000 f824 	bl	80005b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056c:	233f      	movs	r3, #63	; 0x3f
 800056e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000570:	2303      	movs	r3, #3
 8000572:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000578:	2308      	movs	r3, #8
 800057a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800057c:	2340      	movs	r3, #64	; 0x40
 800057e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000580:	2340      	movs	r3, #64	; 0x40
 8000582:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000588:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800058a:	2340      	movs	r3, #64	; 0x40
 800058c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2102      	movs	r1, #2
 8000592:	4618      	mov	r0, r3
 8000594:	f002 fa92 	bl	8002abc <HAL_RCC_ClockConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800059e:	f000 f809 	bl	80005b4 <Error_Handler>
  }
}
 80005a2:	bf00      	nop
 80005a4:	3770      	adds	r7, #112	; 0x70
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	58000400 	.word	0x58000400
 80005b0:	58024800 	.word	0x58024800

080005b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80005b8:	b672      	cpsid	i
}
 80005ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005bc:	e7fe      	b.n	80005bc <Error_Handler+0x8>
	...

080005c0 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_QUADSPI_Init+0x50>)
 80005c6:	4a13      	ldr	r2, [pc, #76]	; (8000614 <MX_QUADSPI_Init+0x54>)
 80005c8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_QUADSPI_Init+0x50>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_QUADSPI_Init+0x50>)
 80005d2:	2204      	movs	r2, #4
 80005d4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_QUADSPI_Init+0x50>)
 80005d8:	2210      	movs	r2, #16
 80005da:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_QUADSPI_Init+0x50>)
 80005de:	2216      	movs	r2, #22
 80005e0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <MX_QUADSPI_Init+0x50>)
 80005e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005e8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_QUADSPI_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <MX_QUADSPI_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_QUADSPI_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <MX_QUADSPI_Init+0x50>)
 80005fe:	f001 f9e9 	bl	80019d4 <HAL_QSPI_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000608:	f7ff ffd4 	bl	80005b4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	240000a8 	.word	0x240000a8
 8000614:	52005000 	.word	0x52005000

08000618 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b0bc      	sub	sp, #240	; 0xf0
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	22bc      	movs	r2, #188	; 0xbc
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f003 fe37 	bl	80042ac <memset>
  if(qspiHandle->Instance==QUADSPI)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a5c      	ldr	r2, [pc, #368]	; (80007b4 <HAL_QSPI_MspInit+0x19c>)
 8000644:	4293      	cmp	r3, r2
 8000646:	f040 80b0 	bne.w	80007aa <HAL_QSPI_MspInit+0x192>
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800064a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800064e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000650:	2300      	movs	r3, #0
 8000652:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f002 fd5f 	bl	800311c <HAL_RCCEx_PeriphCLKConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8000664:	f7ff ffa6 	bl	80005b4 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000668:	4b53      	ldr	r3, [pc, #332]	; (80007b8 <HAL_QSPI_MspInit+0x1a0>)
 800066a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800066e:	4a52      	ldr	r2, [pc, #328]	; (80007b8 <HAL_QSPI_MspInit+0x1a0>)
 8000670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000674:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000678:	4b4f      	ldr	r3, [pc, #316]	; (80007b8 <HAL_QSPI_MspInit+0x1a0>)
 800067a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800067e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000682:	61fb      	str	r3, [r7, #28]
 8000684:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000686:	4b4c      	ldr	r3, [pc, #304]	; (80007b8 <HAL_QSPI_MspInit+0x1a0>)
 8000688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068c:	4a4a      	ldr	r2, [pc, #296]	; (80007b8 <HAL_QSPI_MspInit+0x1a0>)
 800068e:	f043 0310 	orr.w	r3, r3, #16
 8000692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000696:	4b48      	ldr	r3, [pc, #288]	; (80007b8 <HAL_QSPI_MspInit+0x1a0>)
 8000698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069c:	f003 0310 	and.w	r3, r3, #16
 80006a0:	61bb      	str	r3, [r7, #24]
 80006a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b44      	ldr	r3, [pc, #272]	; (80007b8 <HAL_QSPI_MspInit+0x1a0>)
 80006a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006aa:	4a43      	ldr	r2, [pc, #268]	; (80007b8 <HAL_QSPI_MspInit+0x1a0>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b4:	4b40      	ldr	r3, [pc, #256]	; (80007b8 <HAL_QSPI_MspInit+0x1a0>)
 80006b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	4b3d      	ldr	r3, [pc, #244]	; (80007b8 <HAL_QSPI_MspInit+0x1a0>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c8:	4a3b      	ldr	r2, [pc, #236]	; (80007b8 <HAL_QSPI_MspInit+0x1a0>)
 80006ca:	f043 0302 	orr.w	r3, r3, #2
 80006ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006d2:	4b39      	ldr	r3, [pc, #228]	; (80007b8 <HAL_QSPI_MspInit+0x1a0>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d8:	f003 0302 	and.w	r3, r3, #2
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e0:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <HAL_QSPI_MspInit+0x1a0>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e6:	4a34      	ldr	r2, [pc, #208]	; (80007b8 <HAL_QSPI_MspInit+0x1a0>)
 80006e8:	f043 0308 	orr.w	r3, r3, #8
 80006ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006f0:	4b31      	ldr	r3, [pc, #196]	; (80007b8 <HAL_QSPI_MspInit+0x1a0>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f6:	f003 0308 	and.w	r3, r3, #8
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PB10     ------> QUADSPI_BK1_NCS
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006fe:	2304      	movs	r3, #4
 8000700:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000704:	2302      	movs	r3, #2
 8000706:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000716:	2309      	movs	r3, #9
 8000718:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800071c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000720:	4619      	mov	r1, r3
 8000722:	4826      	ldr	r0, [pc, #152]	; (80007bc <HAL_QSPI_MspInit+0x1a4>)
 8000724:	f000 fe62 	bl	80013ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000728:	2302      	movs	r3, #2
 800072a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072e:	2302      	movs	r3, #2
 8000730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073a:	2303      	movs	r3, #3
 800073c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000740:	2309      	movs	r3, #9
 8000742:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800074a:	4619      	mov	r1, r3
 800074c:	481c      	ldr	r0, [pc, #112]	; (80007c0 <HAL_QSPI_MspInit+0x1a8>)
 800074e:	f000 fe4d 	bl	80013ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000752:	f240 4304 	movw	r3, #1028	; 0x404
 8000756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800076c:	2309      	movs	r3, #9
 800076e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000772:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000776:	4619      	mov	r1, r3
 8000778:	4812      	ldr	r0, [pc, #72]	; (80007c4 <HAL_QSPI_MspInit+0x1ac>)
 800077a:	f000 fe37 	bl	80013ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800077e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000798:	2309      	movs	r3, #9
 800079a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800079e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80007a2:	4619      	mov	r1, r3
 80007a4:	4808      	ldr	r0, [pc, #32]	; (80007c8 <HAL_QSPI_MspInit+0x1b0>)
 80007a6:	f000 fe21 	bl	80013ec <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80007aa:	bf00      	nop
 80007ac:	37f0      	adds	r7, #240	; 0xf0
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	52005000 	.word	0x52005000
 80007b8:	58024400 	.word	0x58024400
 80007bc:	58021000 	.word	0x58021000
 80007c0:	58020000 	.word	0x58020000
 80007c4:	58020400 	.word	0x58020400
 80007c8:	58020c00 	.word	0x58020c00

080007cc <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a10      	ldr	r2, [pc, #64]	; (800081c <HAL_QSPI_MspDeInit+0x50>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d119      	bne.n	8000812 <HAL_QSPI_MspDeInit+0x46>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <HAL_QSPI_MspDeInit+0x54>)
 80007e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80007e4:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <HAL_QSPI_MspDeInit+0x54>)
 80007e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007ea:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PB2     ------> QUADSPI_CLK
    PB10     ------> QUADSPI_BK1_NCS
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 80007ee:	2104      	movs	r1, #4
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <HAL_QSPI_MspDeInit+0x58>)
 80007f2:	f000 ffab 	bl	800174c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
 80007f6:	2102      	movs	r1, #2
 80007f8:	480b      	ldr	r0, [pc, #44]	; (8000828 <HAL_QSPI_MspDeInit+0x5c>)
 80007fa:	f000 ffa7 	bl	800174c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_10);
 80007fe:	f240 4104 	movw	r1, #1028	; 0x404
 8000802:	480a      	ldr	r0, [pc, #40]	; (800082c <HAL_QSPI_MspDeInit+0x60>)
 8000804:	f000 ffa2 	bl	800174c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_11|GPIO_PIN_12);
 8000808:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800080c:	4808      	ldr	r0, [pc, #32]	; (8000830 <HAL_QSPI_MspDeInit+0x64>)
 800080e:	f000 ff9d 	bl	800174c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	52005000 	.word	0x52005000
 8000820:	58024400 	.word	0x58024400
 8000824:	58021000 	.word	0x58021000
 8000828:	58020000 	.word	0x58020000
 800082c:	58020400 	.word	0x58020400
 8000830:	58020c00 	.word	0x58020c00

08000834 <CSP_QUADSPI_Init>:

/* USER CODE BEGIN 1 */
/* QUADSPI init function */
uint8_t CSP_QUADSPI_Init(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <CSP_QUADSPI_Init+0x64>)
 800083a:	4a18      	ldr	r2, [pc, #96]	; (800089c <CSP_QUADSPI_Init+0x68>)
 800083c:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 800083e:	4816      	ldr	r0, [pc, #88]	; (8000898 <CSP_QUADSPI_Init+0x64>)
 8000840:	f001 f93c 	bl	8001abc <HAL_QSPI_DeInit>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <CSP_QUADSPI_Init+0x1a>
		return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	e021      	b.n	8000892 <CSP_QUADSPI_Init+0x5e>
	}

	MX_QUADSPI_Init();
 800084e:	f7ff feb7 	bl	80005c0 <MX_QUADSPI_Init>

	if (QSPI_ResetChip() != HAL_OK) {
 8000852:	f000 fa6d 	bl	8000d30 <QSPI_ResetChip>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <CSP_QUADSPI_Init+0x2c>
		return HAL_ERROR;
 800085c:	2301      	movs	r3, #1
 800085e:	e018      	b.n	8000892 <CSP_QUADSPI_Init+0x5e>
	}

	HAL_Delay(1);
 8000860:	2001      	movs	r0, #1
 8000862:	f000 fcaf 	bl	80011c4 <HAL_Delay>

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000866:	f000 f853 	bl	8000910 <QSPI_AutoPollingMemReady>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <CSP_QUADSPI_Init+0x40>
		return HAL_ERROR;
 8000870:	2301      	movs	r3, #1
 8000872:	e00e      	b.n	8000892 <CSP_QUADSPI_Init+0x5e>
	}

	if (QSPI_WriteEnable() != HAL_OK) {
 8000874:	f000 f898 	bl	80009a8 <QSPI_WriteEnable>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <CSP_QUADSPI_Init+0x4e>

		return HAL_ERROR;
 800087e:	2301      	movs	r3, #1
 8000880:	e007      	b.n	8000892 <CSP_QUADSPI_Init+0x5e>
	}

	if (QSPI_Configuration() != HAL_OK) {
 8000882:	f000 f8f3 	bl	8000a6c <QSPI_Configuration>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <CSP_QUADSPI_Init+0x5c>
		return HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	e000      	b.n	8000892 <CSP_QUADSPI_Init+0x5e>
	}

	return HAL_OK;
 8000890:	2300      	movs	r3, #0

}
 8000892:	4618      	mov	r0, r3
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	240000a8 	.word	0x240000a8
 800089c:	52005000 	.word	0x52005000

080008a0 <CSP_QSPI_Erase_Chip>:

uint8_t CSP_QSPI_Erase_Chip(void) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08e      	sub	sp, #56	; 0x38
 80008a4:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;

	if (QSPI_WriteEnable() != HAL_OK) {
 80008a6:	f000 f87f 	bl	80009a8 <QSPI_WriteEnable>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <CSP_QSPI_Erase_Chip+0x14>
		return HAL_ERROR;
 80008b0:	2301      	movs	r3, #1
 80008b2:	e026      	b.n	8000902 <CSP_QSPI_Erase_Chip+0x62>
	}

	/* Erasing Sequence --------------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80008b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b8:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = CHIP_ERASE_CMD;
 80008ba:	23c7      	movs	r3, #199	; 0xc7
 80008bc:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80008d2:	2300      	movs	r3, #0
 80008d4:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80008d6:	2300      	movs	r3, #0
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_MAX_DELAY) != HAL_OK) {
 80008da:	463b      	mov	r3, r7
 80008dc:	f04f 32ff 	mov.w	r2, #4294967295
 80008e0:	4619      	mov	r1, r3
 80008e2:	480a      	ldr	r0, [pc, #40]	; (800090c <CSP_QSPI_Erase_Chip+0x6c>)
 80008e4:	f001 f90a 	bl	8001afc <HAL_QSPI_Command>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <CSP_QSPI_Erase_Chip+0x52>
		return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e007      	b.n	8000902 <CSP_QSPI_Erase_Chip+0x62>
	}

	if (QSPI_AutoPollingMemReady() != HAL_OK) {
 80008f2:	f000 f80d 	bl	8000910 <QSPI_AutoPollingMemReady>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <CSP_QSPI_Erase_Chip+0x60>
		return HAL_ERROR;
 80008fc:	2301      	movs	r3, #1
 80008fe:	e000      	b.n	8000902 <CSP_QSPI_Erase_Chip+0x62>
	}

	return HAL_OK;
 8000900:	2300      	movs	r3, #0

}
 8000902:	4618      	mov	r0, r3
 8000904:	3738      	adds	r7, #56	; 0x38
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	240000a8 	.word	0x240000a8

08000910 <QSPI_AutoPollingMemReady>:

uint8_t QSPI_AutoPollingMemReady(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b096      	sub	sp, #88	; 0x58
 8000914:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = { 0 };
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	2238      	movs	r2, #56	; 0x38
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f003 fcc4 	bl	80042ac <memset>
	QSPI_AutoPollingTypeDef sConfig = { 0 };
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]
 8000932:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef ret;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000934:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000938:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.Instruction = READ_STATUS_REG_CMD;
 800093a:	2305      	movs	r3, #5
 800093c:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 800093e:	2300      	movs	r3, #0
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000942:	2300      	movs	r3, #0
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000946:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800094a:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DummyCycles = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000954:	2300      	movs	r3, #0
 8000956:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000958:	2300      	movs	r3, #0
 800095a:	653b      	str	r3, [r7, #80]	; 0x50

	sConfig.Match = 0x00;
 800095c:	2300      	movs	r3, #0
 800095e:	607b      	str	r3, [r7, #4]
	sConfig.Mask = 0x01;
 8000960:	2301      	movs	r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
	sConfig.StatusBytesSize = 1;
 8000968:	2301      	movs	r3, #1
 800096a:	613b      	str	r3, [r7, #16]
	sConfig.Interval = 0x10;
 800096c:	2310      	movs	r3, #16
 800096e:	60fb      	str	r3, [r7, #12]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000970:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000974:	61bb      	str	r3, [r7, #24]
	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000976:	1d3a      	adds	r2, r7, #4
 8000978:	f107 011c 	add.w	r1, r7, #28
 800097c:	f04f 33ff 	mov.w	r3, #4294967295
 8000980:	4808      	ldr	r0, [pc, #32]	; (80009a4 <QSPI_AutoPollingMemReady+0x94>)
 8000982:	f001 fa48 	bl	8001e16 <HAL_QSPI_AutoPolling>
 8000986:	4603      	mov	r3, r0
 8000988:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800098c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <QSPI_AutoPollingMemReady+0x8a>
			HAL_MAX_DELAY)) != HAL_OK) {
		return ret;
 8000994:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000998:	e000      	b.n	800099c <QSPI_AutoPollingMemReady+0x8c>
	}
	return HAL_OK;
 800099a:	2300      	movs	r3, #0
}
 800099c:	4618      	mov	r0, r3
 800099e:	3758      	adds	r7, #88	; 0x58
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	240000a8 	.word	0x240000a8

080009a8 <QSPI_WriteEnable>:

static uint8_t QSPI_WriteEnable(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b096      	sub	sp, #88	; 0x58
 80009ac:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand = { 0 };
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	2238      	movs	r2, #56	; 0x38
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f003 fc78 	bl	80042ac <memset>
	QSPI_AutoPollingTypeDef sConfig = { 0 };
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
 80009ca:	615a      	str	r2, [r3, #20]
	HAL_StatusTypeDef ret;

	/* Enable write operations ------------------------------------------ */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80009cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.Instruction = WRITE_ENABLE_CMD;
 80009d2:	2306      	movs	r3, #6
 80009d4:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80009da:	2300      	movs	r3, #0
 80009dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DataMode = QSPI_DATA_NONE;
 80009de:	2300      	movs	r3, #0
 80009e0:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DummyCycles = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80009ea:	2300      	movs	r3, #0
 80009ec:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80009ee:	2300      	movs	r3, #0
 80009f0:	653b      	str	r3, [r7, #80]	; 0x50

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80009fa:	4619      	mov	r1, r3
 80009fc:	481a      	ldr	r0, [pc, #104]	; (8000a68 <QSPI_WriteEnable+0xc0>)
 80009fe:	f001 f87d 	bl	8001afc <HAL_QSPI_Command>
 8000a02:	4603      	mov	r3, r0
 8000a04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000a08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d002      	beq.n	8000a16 <QSPI_WriteEnable+0x6e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000a10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000a14:	e024      	b.n	8000a60 <QSPI_WriteEnable+0xb8>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 8000a16:	2302      	movs	r3, #2
 8000a18:	607b      	str	r3, [r7, #4]
	sConfig.Mask = 0x02;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	60bb      	str	r3, [r7, #8]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
	sConfig.StatusBytesSize = 1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	613b      	str	r3, [r7, #16]
	sConfig.Interval = 0x10;
 8000a26:	2310      	movs	r3, #16
 8000a28:	60fb      	str	r3, [r7, #12]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000a2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a2e:	61bb      	str	r3, [r7, #24]

	sCommand.Instruction = READ_STATUS_REG_CMD;
 8000a30:	2305      	movs	r3, #5
 8000a32:	61fb      	str	r3, [r7, #28]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a38:	643b      	str	r3, [r7, #64]	; 0x40

	if ((ret = HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000a3a:	1d3a      	adds	r2, r7, #4
 8000a3c:	f107 011c 	add.w	r1, r7, #28
 8000a40:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <QSPI_WriteEnable+0xc0>)
 8000a46:	f001 f9e6 	bl	8001e16 <HAL_QSPI_AutoPolling>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000a50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d002      	beq.n	8000a5e <QSPI_WriteEnable+0xb6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000a58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000a5c:	e000      	b.n	8000a60 <QSPI_WriteEnable+0xb8>
	}
	return HAL_OK;
 8000a5e:	2300      	movs	r3, #0
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3758      	adds	r7, #88	; 0x58
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	240000a8 	.word	0x240000a8

08000a6c <QSPI_Configuration>:
/*Enable quad mode*/
/* Las versiones acabadas en IQ lo llevan activado por defecto, como en mi caso. */

uint8_t QSPI_Configuration(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b090      	sub	sp, #64	; 0x40
 8000a70:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand = { 0 };
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2238      	movs	r2, #56	; 0x38
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f003 fc17 	bl	80042ac <memset>
	uint8_t reg;
	HAL_StatusTypeDef ret;

	/* Read Volatile Configuration register 2 --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a82:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_STATUS_REG2_CMD;
 8000a84:	2335      	movs	r3, #53	; 0x35
 8000a86:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000a90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = 1;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4858      	ldr	r0, [pc, #352]	; (8000c14 <QSPI_Configuration+0x1a8>)
 8000ab4:	f001 f822 	bl	8001afc <HAL_QSPI_Command>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000abe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d002      	beq.n	8000acc <QSPI_Configuration+0x60>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000ac6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000aca:	e09f      	b.n	8000c0c <QSPI_Configuration+0x1a0>
	}

	if ((ret = HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE))
 8000acc:	1cfb      	adds	r3, r7, #3
 8000ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	484f      	ldr	r0, [pc, #316]	; (8000c14 <QSPI_Configuration+0x1a8>)
 8000ad6:	f001 f901 	bl	8001cdc <HAL_QSPI_Receive>
 8000ada:	4603      	mov	r3, r0
 8000adc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000ae0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d002      	beq.n	8000aee <QSPI_Configuration+0x82>
			!= HAL_OK) {
		return ret;
 8000ae8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000aec:	e08e      	b.n	8000c0c <QSPI_Configuration+0x1a0>
	}

	/* Enable Volatile Write operations ---------------------------------------- */
	sCommand.DataMode = QSPI_DATA_NONE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.Instruction = VOLATILE_SR_WRITE_ENABLE;
 8000af2:	2350      	movs	r3, #80	; 0x50
 8000af4:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000afc:	4619      	mov	r1, r3
 8000afe:	4845      	ldr	r0, [pc, #276]	; (8000c14 <QSPI_Configuration+0x1a8>)
 8000b00:	f000 fffc 	bl	8001afc <HAL_QSPI_Command>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <QSPI_Configuration+0xa4>
			!= HAL_OK) {
		return ret;
 8000b0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b0e:	e07d      	b.n	8000c0c <QSPI_Configuration+0x1a0>
	}

	/* Write Volatile Configuration register 2 (QE = 1) -- */
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.Instruction = WRITE_STATUS_REG2_CMD;
 8000b16:	2331      	movs	r3, #49	; 0x31
 8000b18:	607b      	str	r3, [r7, #4]
	reg |= 2; // QE bit
 8000b1a:	78fb      	ldrb	r3, [r7, #3]
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	70fb      	strb	r3, [r7, #3]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4839      	ldr	r0, [pc, #228]	; (8000c14 <QSPI_Configuration+0x1a8>)
 8000b2e:	f000 ffe5 	bl	8001afc <HAL_QSPI_Command>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d002      	beq.n	8000b3e <QSPI_Configuration+0xd2>
			!= HAL_OK) {
		return ret;
 8000b38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b3c:	e066      	b.n	8000c0c <QSPI_Configuration+0x1a0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000b3e:	1cfb      	adds	r3, r7, #3
 8000b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b44:	4619      	mov	r1, r3
 8000b46:	4833      	ldr	r0, [pc, #204]	; (8000c14 <QSPI_Configuration+0x1a8>)
 8000b48:	f001 f836 	bl	8001bb8 <HAL_QSPI_Transmit>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d002      	beq.n	8000b58 <QSPI_Configuration+0xec>
			!= HAL_OK) {
		return ret;
 8000b52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b56:	e059      	b.n	8000c0c <QSPI_Configuration+0x1a0>
	}

	/* Read Volatile Configuration register 3 --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b5c:	61fb      	str	r3, [r7, #28]
	sCommand.Instruction = READ_STATUS_REG3_CMD;
 8000b5e:	2315      	movs	r3, #21
 8000b60:	607b      	str	r3, [r7, #4]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000b6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61bb      	str	r3, [r7, #24]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = 1;
 8000b80:	2301      	movs	r3, #1
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4821      	ldr	r0, [pc, #132]	; (8000c14 <QSPI_Configuration+0x1a8>)
 8000b8e:	f000 ffb5 	bl	8001afc <HAL_QSPI_Command>
 8000b92:	4603      	mov	r3, r0
 8000b94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000b98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d002      	beq.n	8000ba6 <QSPI_Configuration+0x13a>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000ba0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ba4:	e032      	b.n	8000c0c <QSPI_Configuration+0x1a0>
	}

	if ((ret = HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE))
 8000ba6:	1cfb      	adds	r3, r7, #3
 8000ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bac:	4619      	mov	r1, r3
 8000bae:	4819      	ldr	r0, [pc, #100]	; (8000c14 <QSPI_Configuration+0x1a8>)
 8000bb0:	f001 f894 	bl	8001cdc <HAL_QSPI_Receive>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000bba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d002      	beq.n	8000bc8 <QSPI_Configuration+0x15c>
			!= HAL_OK) {
		return ret;
 8000bc2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bc6:	e021      	b.n	8000c0c <QSPI_Configuration+0x1a0>
	}

	/* Write Volatile Configuration register 2 (DRV1:2 = 00) -- */
	sCommand.Instruction = WRITE_STATUS_REG3_CMD;
 8000bc8:	2311      	movs	r3, #17
 8000bca:	607b      	str	r3, [r7, #4]
	reg &= 0x9f; // DRV1:2 bit
 8000bcc:	78fb      	ldrb	r3, [r7, #3]
 8000bce:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	70fb      	strb	r3, [r7, #3]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480d      	ldr	r0, [pc, #52]	; (8000c14 <QSPI_Configuration+0x1a8>)
 8000be0:	f000 ff8c 	bl	8001afc <HAL_QSPI_Command>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <QSPI_Configuration+0x184>
			!= HAL_OK) {
		return ret;
 8000bea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bee:	e00d      	b.n	8000c0c <QSPI_Configuration+0x1a0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000bf0:	1cfb      	adds	r3, r7, #3
 8000bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4806      	ldr	r0, [pc, #24]	; (8000c14 <QSPI_Configuration+0x1a8>)
 8000bfa:	f000 ffdd 	bl	8001bb8 <HAL_QSPI_Transmit>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <QSPI_Configuration+0x19e>
			!= HAL_OK) {
		return ret;
 8000c04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c08:	e000      	b.n	8000c0c <QSPI_Configuration+0x1a0>
	}

	return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3740      	adds	r7, #64	; 0x40
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	240000a8 	.word	0x240000a8

08000c18 <CSP_QSPI_WriteMemory>:

	return HAL_OK;
}

uint8_t CSP_QSPI_WriteMemory(uint8_t *buffer, uint32_t address,
		uint32_t buffer_size) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b096      	sub	sp, #88	; 0x58
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]

	QSPI_CommandTypeDef sCommand;
	uint32_t end_addr, current_size, current_addr;

	/* Calculation of the size between the write address and the end of the page */
	current_addr = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	653b      	str	r3, [r7, #80]	; 0x50

	//
	while (current_addr <= address) {
 8000c28:	e003      	b.n	8000c32 <CSP_QSPI_WriteMemory+0x1a>
		current_addr += MEMORY_PAGE_SIZE;
 8000c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c30:	653b      	str	r3, [r7, #80]	; 0x50
	while (current_addr <= address) {
 8000c32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d9f7      	bls.n	8000c2a <CSP_QSPI_WriteMemory+0x12>
	}
	current_size = current_addr - address;
 8000c3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check if the size of the data is less than the remaining place in the page */
	if (current_size > buffer_size) {
 8000c42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d901      	bls.n	8000c4e <CSP_QSPI_WriteMemory+0x36>
		current_size = buffer_size;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Initialize the adress variables */
	current_addr = address;
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	653b      	str	r3, [r7, #80]	; 0x50
	end_addr = address + buffer_size;
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4413      	add	r3, r2
 8000c58:	64fb      	str	r3, [r7, #76]	; 0x4c

	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
 8000c60:	2332      	movs	r3, #50	; 0x32
 8000c62:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8000c64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6e:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.DataMode = QSPI_DATA_4_LINES;
 8000c80:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000c84:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.NbData = buffer_size;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.Address = address;
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	61bb      	str	r3, [r7, #24]
	sCommand.DummyCycles = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Perform the write page by page */
	do {
		sCommand.Address = current_addr;
 8000c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c94:	61bb      	str	r3, [r7, #24]
		sCommand.NbData = current_size;
 8000c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c98:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (current_size == 0) {
 8000c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d101      	bne.n	8000ca4 <CSP_QSPI_WriteMemory+0x8c>
			return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	e03f      	b.n	8000d24 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Enable write operations */
		if (QSPI_WriteEnable() != HAL_OK) {
 8000ca4:	f7ff fe80 	bl	80009a8 <QSPI_WriteEnable>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <CSP_QSPI_WriteMemory+0x9a>
			return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e038      	b.n	8000d24 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure the command */
		if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cba:	4619      	mov	r1, r3
 8000cbc:	481b      	ldr	r0, [pc, #108]	; (8000d2c <CSP_QSPI_WriteMemory+0x114>)
 8000cbe:	f000 ff1d 	bl	8001afc <HAL_QSPI_Command>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <CSP_QSPI_WriteMemory+0xb4>
				!= HAL_OK) {

			return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e02b      	b.n	8000d24 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Transmission of the data */
		if (HAL_QSPI_Transmit(&hqspi, buffer, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cd0:	68f9      	ldr	r1, [r7, #12]
 8000cd2:	4816      	ldr	r0, [pc, #88]	; (8000d2c <CSP_QSPI_WriteMemory+0x114>)
 8000cd4:	f000 ff70 	bl	8001bb8 <HAL_QSPI_Transmit>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <CSP_QSPI_WriteMemory+0xca>
				!= HAL_OK) {

			return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e020      	b.n	8000d24 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Configure automatic polling mode to wait for end of program */
		if (QSPI_AutoPollingMemReady() != HAL_OK) {
 8000ce2:	f7ff fe15 	bl	8000910 <QSPI_AutoPollingMemReady>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <CSP_QSPI_WriteMemory+0xd8>
			return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e019      	b.n	8000d24 <CSP_QSPI_WriteMemory+0x10c>
		}

		/* Update the address and size variables for next page programming */
		current_addr += current_size;
 8000cf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cf4:	4413      	add	r3, r2
 8000cf6:	653b      	str	r3, [r7, #80]	; 0x50
		buffer += current_size;
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cfc:	4413      	add	r3, r2
 8000cfe:	60fb      	str	r3, [r7, #12]
		current_size =
				((current_addr + MEMORY_PAGE_SIZE) > end_addr) ?
 8000d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d02:	f503 7380 	add.w	r3, r3, #256	; 0x100
						(end_addr - current_addr) : MEMORY_PAGE_SIZE;
 8000d06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d203      	bcs.n	8000d14 <CSP_QSPI_WriteMemory+0xfc>
 8000d0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	e001      	b.n	8000d18 <CSP_QSPI_WriteMemory+0x100>
 8000d14:	f44f 7380 	mov.w	r3, #256	; 0x100
		current_size =
 8000d18:	657b      	str	r3, [r7, #84]	; 0x54
	} while (current_addr <= end_addr);
 8000d1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d9b7      	bls.n	8000c92 <CSP_QSPI_WriteMemory+0x7a>

	return HAL_OK;
 8000d22:	2300      	movs	r3, #0

}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3758      	adds	r7, #88	; 0x58
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	240000a8 	.word	0x240000a8

08000d30 <QSPI_ResetChip>:
		return HAL_ERROR;
	}
	return HAL_OK;
}

uint8_t QSPI_ResetChip() {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b090      	sub	sp, #64	; 0x40
 8000d34:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand = { 0 };
 8000d36:	463b      	mov	r3, r7
 8000d38:	2238      	movs	r2, #56	; 0x38
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f003 fab5 	bl	80042ac <memset>
	uint32_t temp = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_StatusTypeDef ret;

	/* Enable Reset --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4a:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = RESET_ENABLE_CMD;
 8000d4c:	2366      	movs	r3, #102	; 0x66
 8000d4e:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d64:	2300      	movs	r3, #0
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d72:	4619      	mov	r1, r3
 8000d74:	4820      	ldr	r0, [pc, #128]	; (8000df8 <QSPI_ResetChip+0xc8>)
 8000d76:	f000 fec1 	bl	8001afc <HAL_QSPI_Command>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000d80:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <QSPI_ResetChip+0x5e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000d88:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d8c:	e02f      	b.n	8000dee <QSPI_ResetChip+0xbe>
	}

	/* Reset Device --------------------------- */
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d92:	61bb      	str	r3, [r7, #24]
	sCommand.Instruction = RESET_EXECUTE_CMD;
 8000d94:	2399      	movs	r3, #153	; 0x99
 8000d96:	603b      	str	r3, [r7, #0]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DummyCycles = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000dac:	2300      	movs	r3, #0
 8000dae:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000db0:	2300      	movs	r3, #0
 8000db2:	637b      	str	r3, [r7, #52]	; 0x34

	if ((ret = HAL_QSPI_Command(&hqspi, &sCommand,
 8000db4:	463b      	mov	r3, r7
 8000db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480e      	ldr	r0, [pc, #56]	; (8000df8 <QSPI_ResetChip+0xc8>)
 8000dbe:	f000 fe9d 	bl	8001afc <HAL_QSPI_Command>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000dc8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d002      	beq.n	8000dd6 <QSPI_ResetChip+0xa6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return ret;
 8000dd0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000dd4:	e00b      	b.n	8000dee <QSPI_ResetChip+0xbe>
	}

	for (temp = 0; temp < 500000; temp++) {
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dda:	e003      	b.n	8000de4 <QSPI_ResetChip+0xb4>
		__NOP();
 8000ddc:	bf00      	nop
	for (temp = 0; temp < 500000; temp++) {
 8000dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000de0:	3301      	adds	r3, #1
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000de6:	4a05      	ldr	r2, [pc, #20]	; (8000dfc <QSPI_ResetChip+0xcc>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d9f7      	bls.n	8000ddc <QSPI_ResetChip+0xac>
	}

	return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3740      	adds	r7, #64	; 0x40
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	240000a8 	.word	0x240000a8
 8000dfc:	0007a11f 	.word	0x0007a11f

08000e00 <CSP_QSPI_Read>:

uint8_t CSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b092      	sub	sp, #72	; 0x48
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
	QSPI_CommandTypeDef s_command;

	/* Initialize the read command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.Instruction = QUAD_IN_OUT_FAST_READ_CMD;
 8000e12:	23eb      	movs	r3, #235	; 0xeb
 8000e14:	613b      	str	r3, [r7, #16]
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 8000e16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8000e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e20:	61fb      	str	r3, [r7, #28]
	s_command.Address = ReadAddr;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.DataMode = QSPI_DATA_4_LINES;
 8000e2a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000e2e:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DummyCycles = 6U;
 8000e30:	2306      	movs	r3, #6
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.NbData = Size;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e40:	2300      	movs	r3, #0
 8000e42:	647b      	str	r3, [r7, #68]	; 0x44

	/* Configure the command */
	if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4816      	ldr	r0, [pc, #88]	; (8000ea8 <CSP_QSPI_Read+0xa8>)
 8000e50:	f000 fe54 	bl	8001afc <HAL_QSPI_Command>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <CSP_QSPI_Read+0x5e>
			!= HAL_OK) {
		return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e01f      	b.n	8000e9e <CSP_QSPI_Read+0x9e>
	}

	/* Set S# timing for Read command */
	MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT,
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <CSP_QSPI_Read+0xa8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <CSP_QSPI_Read+0xa8>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e70:	605a      	str	r2, [r3, #4]
			QSPI_CS_HIGH_TIME_5_CYCLE);

	/* Reception of the data */
	if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e76:	68f9      	ldr	r1, [r7, #12]
 8000e78:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <CSP_QSPI_Read+0xa8>)
 8000e7a:	f000 ff2f 	bl	8001cdc <HAL_QSPI_Receive>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <CSP_QSPI_Read+0x88>
			!= HAL_OK) {
		return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e00a      	b.n	8000e9e <CSP_QSPI_Read+0x9e>
	}

	/* Restore S# timing for nonRead commands */
	MODIFY_REG(hqspi.Instance->DCR, QUADSPI_DCR_CSHT,
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <CSP_QSPI_Read+0xa8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <CSP_QSPI_Read+0xa8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8000e9a:	605a      	str	r2, [r3, #4]
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3748      	adds	r7, #72	; 0x48
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	240000a8 	.word	0x240000a8

08000eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_MspInit+0x30>)
 8000eb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eb8:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_MspInit+0x30>)
 8000eba:	f043 0302 	orr.w	r3, r3, #2
 8000ebe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_MspInit+0x30>)
 8000ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	58024400 	.word	0x58024400

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <UsageFault_Handler+0x4>

08000efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2c:	f000 f92a 	bl	8001184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f38:	4b39      	ldr	r3, [pc, #228]	; (8001020 <SystemInit+0xec>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3e:	4a38      	ldr	r2, [pc, #224]	; (8001020 <SystemInit+0xec>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f48:	4b36      	ldr	r3, [pc, #216]	; (8001024 <SystemInit+0xf0>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 030f 	and.w	r3, r3, #15
 8000f50:	2b06      	cmp	r3, #6
 8000f52:	d807      	bhi.n	8000f64 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f54:	4b33      	ldr	r3, [pc, #204]	; (8001024 <SystemInit+0xf0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f023 030f 	bic.w	r3, r3, #15
 8000f5c:	4a31      	ldr	r2, [pc, #196]	; (8001024 <SystemInit+0xf0>)
 8000f5e:	f043 0307 	orr.w	r3, r3, #7
 8000f62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f64:	4b30      	ldr	r3, [pc, #192]	; (8001028 <SystemInit+0xf4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a2f      	ldr	r2, [pc, #188]	; (8001028 <SystemInit+0xf4>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f70:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <SystemInit+0xf4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f76:	4b2c      	ldr	r3, [pc, #176]	; (8001028 <SystemInit+0xf4>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	492b      	ldr	r1, [pc, #172]	; (8001028 <SystemInit+0xf4>)
 8000f7c:	4b2b      	ldr	r3, [pc, #172]	; (800102c <SystemInit+0xf8>)
 8000f7e:	4013      	ands	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f82:	4b28      	ldr	r3, [pc, #160]	; (8001024 <SystemInit+0xf0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d007      	beq.n	8000f9e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f8e:	4b25      	ldr	r3, [pc, #148]	; (8001024 <SystemInit+0xf0>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f023 030f 	bic.w	r3, r3, #15
 8000f96:	4a23      	ldr	r2, [pc, #140]	; (8001024 <SystemInit+0xf0>)
 8000f98:	f043 0307 	orr.w	r3, r3, #7
 8000f9c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f9e:	4b22      	ldr	r3, [pc, #136]	; (8001028 <SystemInit+0xf4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fa4:	4b20      	ldr	r3, [pc, #128]	; (8001028 <SystemInit+0xf4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000faa:	4b1f      	ldr	r3, [pc, #124]	; (8001028 <SystemInit+0xf4>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fb0:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <SystemInit+0xf4>)
 8000fb2:	4a1f      	ldr	r2, [pc, #124]	; (8001030 <SystemInit+0xfc>)
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <SystemInit+0xf4>)
 8000fb8:	4a1e      	ldr	r2, [pc, #120]	; (8001034 <SystemInit+0x100>)
 8000fba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <SystemInit+0xf4>)
 8000fbe:	4a1e      	ldr	r2, [pc, #120]	; (8001038 <SystemInit+0x104>)
 8000fc0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <SystemInit+0xf4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <SystemInit+0xf4>)
 8000fca:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <SystemInit+0x104>)
 8000fcc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <SystemInit+0xf4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <SystemInit+0xf4>)
 8000fd6:	4a18      	ldr	r2, [pc, #96]	; (8001038 <SystemInit+0x104>)
 8000fd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <SystemInit+0xf4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <SystemInit+0xf4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a10      	ldr	r2, [pc, #64]	; (8001028 <SystemInit+0xf4>)
 8000fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <SystemInit+0xf4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <SystemInit+0x108>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4b12      	ldr	r3, [pc, #72]	; (8001040 <SystemInit+0x10c>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ffe:	d202      	bcs.n	8001006 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <SystemInit+0x110>)
 8001002:	2201      	movs	r2, #1
 8001004:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <SystemInit+0x114>)
 8001008:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800100c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SystemInit+0xec>)
 8001010:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001014:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00
 8001024:	52002000 	.word	0x52002000
 8001028:	58024400 	.word	0x58024400
 800102c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001030:	02020200 	.word	0x02020200
 8001034:	01ff0000 	.word	0x01ff0000
 8001038:	01010280 	.word	0x01010280
 800103c:	5c001000 	.word	0x5c001000
 8001040:	ffff0000 	.word	0xffff0000
 8001044:	51008108 	.word	0x51008108
 8001048:	52004000 	.word	0x52004000

0800104c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800104c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001084 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001050:	f7ff ff70 	bl	8000f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001056:	490d      	ldr	r1, [pc, #52]	; (800108c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800105c:	e002      	b.n	8001064 <LoopCopyDataInit>

0800105e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001062:	3304      	adds	r3, #4

08001064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001068:	d3f9      	bcc.n	800105e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800106c:	4c0a      	ldr	r4, [pc, #40]	; (8001098 <LoopFillZerobss+0x22>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001070:	e001      	b.n	8001076 <LoopFillZerobss>

08001072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001074:	3204      	adds	r2, #4

08001076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001078:	d3fb      	bcc.n	8001072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107a:	f003 f8f3 	bl	8004264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107e:	f7ff f981 	bl	8000384 <main>
  bx  lr
 8001082:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001084:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001088:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800108c:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8001090:	080042ec 	.word	0x080042ec
  ldr r2, =_sbss
 8001094:	24000028 	.word	0x24000028
  ldr r4, =_ebss
 8001098:	240000f8 	.word	0x240000f8

0800109c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC3_IRQHandler>
	...

080010a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a6:	2003      	movs	r0, #3
 80010a8:	f000 f96e 	bl	8001388 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010ac:	f001 febc 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 80010b0:	4602      	mov	r2, r0
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_Init+0x68>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	0a1b      	lsrs	r3, r3, #8
 80010b8:	f003 030f 	and.w	r3, r3, #15
 80010bc:	4913      	ldr	r1, [pc, #76]	; (800110c <HAL_Init+0x6c>)
 80010be:	5ccb      	ldrb	r3, [r1, r3]
 80010c0:	f003 031f 	and.w	r3, r3, #31
 80010c4:	fa22 f303 	lsr.w	r3, r2, r3
 80010c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <HAL_Init+0x68>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	4a0e      	ldr	r2, [pc, #56]	; (800110c <HAL_Init+0x6c>)
 80010d4:	5cd3      	ldrb	r3, [r2, r3]
 80010d6:	f003 031f 	and.w	r3, r3, #31
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	fa22 f303 	lsr.w	r3, r2, r3
 80010e0:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <HAL_Init+0x70>)
 80010e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010e4:	4a0b      	ldr	r2, [pc, #44]	; (8001114 <HAL_Init+0x74>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ea:	200f      	movs	r0, #15
 80010ec:	f000 f814 	bl	8001118 <HAL_InitTick>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e002      	b.n	8001100 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010fa:	f7ff fed7 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	58024400 	.word	0x58024400
 800110c:	080042d4 	.word	0x080042d4
 8001110:	2400001c 	.word	0x2400001c
 8001114:	24000018 	.word	0x24000018

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_InitTick+0x60>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e021      	b.n	8001170 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_InitTick+0x64>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_InitTick+0x60>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4619      	mov	r1, r3
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	fbb3 f3f1 	udiv	r3, r3, r1
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f945 	bl	80013d2 <HAL_SYSTICK_Config>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e00e      	b.n	8001170 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b0f      	cmp	r3, #15
 8001156:	d80a      	bhi.n	800116e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001158:	2200      	movs	r2, #0
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f000 f91d 	bl	800139e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_InitTick+0x68>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e000      	b.n	8001170 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	24000024 	.word	0x24000024
 800117c:	24000018 	.word	0x24000018
 8001180:	24000020 	.word	0x24000020

08001184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_IncTick+0x20>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_IncTick+0x24>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4413      	add	r3, r2
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <HAL_IncTick+0x24>)
 8001196:	6013      	str	r3, [r2, #0]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	24000024 	.word	0x24000024
 80011a8:	240000f4 	.word	0x240000f4

080011ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return uwTick;
 80011b0:	4b03      	ldr	r3, [pc, #12]	; (80011c0 <HAL_GetTick+0x14>)
 80011b2:	681b      	ldr	r3, [r3, #0]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	240000f4 	.word	0x240000f4

080011c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011cc:	f7ff ffee 	bl	80011ac <HAL_GetTick>
 80011d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011dc:	d005      	beq.n	80011ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_Delay+0x44>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ea:	bf00      	nop
 80011ec:	f7ff ffde 	bl	80011ac <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d8f7      	bhi.n	80011ec <HAL_Delay+0x28>
  {
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	24000024 	.word	0x24000024

0800120c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <HAL_GetREVID+0x14>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	0c1b      	lsrs	r3, r3, #16
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	5c001000 	.word	0x5c001000

08001224 <__NVIC_SetPriorityGrouping>:
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <__NVIC_SetPriorityGrouping+0x40>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001240:	4013      	ands	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <__NVIC_SetPriorityGrouping+0x44>)
 800124e:	4313      	orrs	r3, r2
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <__NVIC_SetPriorityGrouping+0x40>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00
 8001268:	05fa0000 	.word	0x05fa0000

0800126c <__NVIC_GetPriorityGrouping>:
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <__NVIC_GetPriorityGrouping+0x18>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	0a1b      	lsrs	r3, r3, #8
 8001276:	f003 0307 	and.w	r3, r3, #7
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <__NVIC_SetPriority>:
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	; (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	; (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	; 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001354:	d301      	bcc.n	800135a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001356:	2301      	movs	r3, #1
 8001358:	e00f      	b.n	800137a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <SysTick_Config+0x40>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001362:	210f      	movs	r1, #15
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	f7ff ff8e 	bl	8001288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <SysTick_Config+0x40>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <SysTick_Config+0x40>)
 8001374:	2207      	movs	r2, #7
 8001376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	e000e010 	.word	0xe000e010

08001388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff ff47 	bl	8001224 <__NVIC_SetPriorityGrouping>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
 80013aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013ac:	f7ff ff5e 	bl	800126c <__NVIC_GetPriorityGrouping>
 80013b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	68b9      	ldr	r1, [r7, #8]
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f7ff ff90 	bl	80012dc <NVIC_EncodePriority>
 80013bc:	4602      	mov	r2, r0
 80013be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013c2:	4611      	mov	r1, r2
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff5f 	bl	8001288 <__NVIC_SetPriority>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffb2 	bl	8001344 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	; 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80013fa:	4b89      	ldr	r3, [pc, #548]	; (8001620 <HAL_GPIO_Init+0x234>)
 80013fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013fe:	e194      	b.n	800172a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	2101      	movs	r1, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 8186 	beq.w	8001724 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d00b      	beq.n	8001438 <HAL_GPIO_Init+0x4c>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d007      	beq.n	8001438 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800142c:	2b11      	cmp	r3, #17
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b12      	cmp	r3, #18
 8001436:	d130      	bne.n	800149a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	2203      	movs	r2, #3
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800146e:	2201      	movs	r2, #1
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	091b      	lsrs	r3, r3, #4
 8001484:	f003 0201 	and.w	r2, r3, #1
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0xee>
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b12      	cmp	r3, #18
 80014d8:	d123      	bne.n	8001522 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	08da      	lsrs	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3208      	adds	r2, #8
 80014e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	220f      	movs	r2, #15
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	69b9      	ldr	r1, [r7, #24]
 800151e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0203 	and.w	r2, r3, #3
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 80e0 	beq.w	8001724 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001564:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <HAL_GPIO_Init+0x238>)
 8001566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800156a:	4a2e      	ldr	r2, [pc, #184]	; (8001624 <HAL_GPIO_Init+0x238>)
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001574:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <HAL_GPIO_Init+0x238>)
 8001576:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001582:	4a29      	ldr	r2, [pc, #164]	; (8001628 <HAL_GPIO_Init+0x23c>)
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	089b      	lsrs	r3, r3, #2
 8001588:	3302      	adds	r3, #2
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	220f      	movs	r2, #15
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4013      	ands	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a20      	ldr	r2, [pc, #128]	; (800162c <HAL_GPIO_Init+0x240>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d052      	beq.n	8001654 <HAL_GPIO_Init+0x268>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a1f      	ldr	r2, [pc, #124]	; (8001630 <HAL_GPIO_Init+0x244>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d031      	beq.n	800161a <HAL_GPIO_Init+0x22e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <HAL_GPIO_Init+0x248>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d02b      	beq.n	8001616 <HAL_GPIO_Init+0x22a>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a1d      	ldr	r2, [pc, #116]	; (8001638 <HAL_GPIO_Init+0x24c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d025      	beq.n	8001612 <HAL_GPIO_Init+0x226>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a1c      	ldr	r2, [pc, #112]	; (800163c <HAL_GPIO_Init+0x250>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d01f      	beq.n	800160e <HAL_GPIO_Init+0x222>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a1b      	ldr	r2, [pc, #108]	; (8001640 <HAL_GPIO_Init+0x254>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d019      	beq.n	800160a <HAL_GPIO_Init+0x21e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a1a      	ldr	r2, [pc, #104]	; (8001644 <HAL_GPIO_Init+0x258>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d013      	beq.n	8001606 <HAL_GPIO_Init+0x21a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a19      	ldr	r2, [pc, #100]	; (8001648 <HAL_GPIO_Init+0x25c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d00d      	beq.n	8001602 <HAL_GPIO_Init+0x216>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a18      	ldr	r2, [pc, #96]	; (800164c <HAL_GPIO_Init+0x260>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d007      	beq.n	80015fe <HAL_GPIO_Init+0x212>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a17      	ldr	r2, [pc, #92]	; (8001650 <HAL_GPIO_Init+0x264>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d101      	bne.n	80015fa <HAL_GPIO_Init+0x20e>
 80015f6:	2309      	movs	r3, #9
 80015f8:	e02d      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 80015fa:	230a      	movs	r3, #10
 80015fc:	e02b      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 80015fe:	2308      	movs	r3, #8
 8001600:	e029      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 8001602:	2307      	movs	r3, #7
 8001604:	e027      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 8001606:	2306      	movs	r3, #6
 8001608:	e025      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 800160a:	2305      	movs	r3, #5
 800160c:	e023      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 800160e:	2304      	movs	r3, #4
 8001610:	e021      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 8001612:	2303      	movs	r3, #3
 8001614:	e01f      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 8001616:	2302      	movs	r3, #2
 8001618:	e01d      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 800161a:	2301      	movs	r3, #1
 800161c:	e01b      	b.n	8001656 <HAL_GPIO_Init+0x26a>
 800161e:	bf00      	nop
 8001620:	58000080 	.word	0x58000080
 8001624:	58024400 	.word	0x58024400
 8001628:	58000400 	.word	0x58000400
 800162c:	58020000 	.word	0x58020000
 8001630:	58020400 	.word	0x58020400
 8001634:	58020800 	.word	0x58020800
 8001638:	58020c00 	.word	0x58020c00
 800163c:	58021000 	.word	0x58021000
 8001640:	58021400 	.word	0x58021400
 8001644:	58021800 	.word	0x58021800
 8001648:	58021c00 	.word	0x58021c00
 800164c:	58022000 	.word	0x58022000
 8001650:	58022400 	.word	0x58022400
 8001654:	2300      	movs	r3, #0
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	f002 0203 	and.w	r2, r2, #3
 800165c:	0092      	lsls	r2, r2, #2
 800165e:	4093      	lsls	r3, r2
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001666:	4938      	ldr	r1, [pc, #224]	; (8001748 <HAL_GPIO_Init+0x35c>)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80016ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800171c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	3301      	adds	r3, #1
 8001728:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	fa22 f303 	lsr.w	r3, r2, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	f47f ae63 	bne.w	8001400 <HAL_GPIO_Init+0x14>
  }
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	3724      	adds	r7, #36	; 0x24
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	58000400 	.word	0x58000400

0800174c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800175a:	4b75      	ldr	r3, [pc, #468]	; (8001930 <HAL_GPIO_DeInit+0x1e4>)
 800175c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800175e:	e0d9      	b.n	8001914 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8001760:	2201      	movs	r2, #1
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	4013      	ands	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 80cc 	beq.w	800190e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001776:	4a6f      	ldr	r2, [pc, #444]	; (8001934 <HAL_GPIO_DeInit+0x1e8>)
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	3302      	adds	r3, #2
 800177e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001782:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	220f      	movs	r2, #15
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a67      	ldr	r2, [pc, #412]	; (8001938 <HAL_GPIO_DeInit+0x1ec>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d037      	beq.n	8001810 <HAL_GPIO_DeInit+0xc4>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a66      	ldr	r2, [pc, #408]	; (800193c <HAL_GPIO_DeInit+0x1f0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d031      	beq.n	800180c <HAL_GPIO_DeInit+0xc0>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a65      	ldr	r2, [pc, #404]	; (8001940 <HAL_GPIO_DeInit+0x1f4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d02b      	beq.n	8001808 <HAL_GPIO_DeInit+0xbc>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a64      	ldr	r2, [pc, #400]	; (8001944 <HAL_GPIO_DeInit+0x1f8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d025      	beq.n	8001804 <HAL_GPIO_DeInit+0xb8>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a63      	ldr	r2, [pc, #396]	; (8001948 <HAL_GPIO_DeInit+0x1fc>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d01f      	beq.n	8001800 <HAL_GPIO_DeInit+0xb4>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a62      	ldr	r2, [pc, #392]	; (800194c <HAL_GPIO_DeInit+0x200>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d019      	beq.n	80017fc <HAL_GPIO_DeInit+0xb0>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a61      	ldr	r2, [pc, #388]	; (8001950 <HAL_GPIO_DeInit+0x204>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d013      	beq.n	80017f8 <HAL_GPIO_DeInit+0xac>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a60      	ldr	r2, [pc, #384]	; (8001954 <HAL_GPIO_DeInit+0x208>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d00d      	beq.n	80017f4 <HAL_GPIO_DeInit+0xa8>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a5f      	ldr	r2, [pc, #380]	; (8001958 <HAL_GPIO_DeInit+0x20c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d007      	beq.n	80017f0 <HAL_GPIO_DeInit+0xa4>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a5e      	ldr	r2, [pc, #376]	; (800195c <HAL_GPIO_DeInit+0x210>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d101      	bne.n	80017ec <HAL_GPIO_DeInit+0xa0>
 80017e8:	2309      	movs	r3, #9
 80017ea:	e012      	b.n	8001812 <HAL_GPIO_DeInit+0xc6>
 80017ec:	230a      	movs	r3, #10
 80017ee:	e010      	b.n	8001812 <HAL_GPIO_DeInit+0xc6>
 80017f0:	2308      	movs	r3, #8
 80017f2:	e00e      	b.n	8001812 <HAL_GPIO_DeInit+0xc6>
 80017f4:	2307      	movs	r3, #7
 80017f6:	e00c      	b.n	8001812 <HAL_GPIO_DeInit+0xc6>
 80017f8:	2306      	movs	r3, #6
 80017fa:	e00a      	b.n	8001812 <HAL_GPIO_DeInit+0xc6>
 80017fc:	2305      	movs	r3, #5
 80017fe:	e008      	b.n	8001812 <HAL_GPIO_DeInit+0xc6>
 8001800:	2304      	movs	r3, #4
 8001802:	e006      	b.n	8001812 <HAL_GPIO_DeInit+0xc6>
 8001804:	2303      	movs	r3, #3
 8001806:	e004      	b.n	8001812 <HAL_GPIO_DeInit+0xc6>
 8001808:	2302      	movs	r3, #2
 800180a:	e002      	b.n	8001812 <HAL_GPIO_DeInit+0xc6>
 800180c:	2301      	movs	r3, #1
 800180e:	e000      	b.n	8001812 <HAL_GPIO_DeInit+0xc6>
 8001810:	2300      	movs	r3, #0
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	f002 0203 	and.w	r2, r2, #3
 8001818:	0092      	lsls	r2, r2, #2
 800181a:	4093      	lsls	r3, r2
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	429a      	cmp	r2, r3
 8001820:	d136      	bne.n	8001890 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	43db      	mvns	r3, r3
 800182a:	401a      	ands	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	43db      	mvns	r3, r3
 8001838:	401a      	ands	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800183e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43db      	mvns	r3, r3
 8001848:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800184c:	4013      	ands	r3, r2
 800184e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8001850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	43db      	mvns	r3, r3
 800185a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800185e:	4013      	ands	r3, r2
 8001860:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001872:	4a30      	ldr	r2, [pc, #192]	; (8001934 <HAL_GPIO_DeInit+0x1e8>)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	43da      	mvns	r2, r3
 8001882:	482c      	ldr	r0, [pc, #176]	; (8001934 <HAL_GPIO_DeInit+0x1e8>)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	400a      	ands	r2, r1
 800188a:	3302      	adds	r3, #2
 800188c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	2103      	movs	r1, #3
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	220f      	movs	r2, #15
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	08d2      	lsrs	r2, r2, #3
 80018c4:	4019      	ands	r1, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3208      	adds	r2, #8
 80018ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2103      	movs	r1, #3
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	401a      	ands	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	2101      	movs	r1, #1
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	fa01 f303 	lsl.w	r3, r1, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	401a      	ands	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2103      	movs	r1, #3
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	401a      	ands	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	f47f af1f 	bne.w	8001760 <HAL_GPIO_DeInit+0x14>
  }
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	371c      	adds	r7, #28
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	58000080 	.word	0x58000080
 8001934:	58000400 	.word	0x58000400
 8001938:	58020000 	.word	0x58020000
 800193c:	58020400 	.word	0x58020400
 8001940:	58020800 	.word	0x58020800
 8001944:	58020c00 	.word	0x58020c00
 8001948:	58021000 	.word	0x58021000
 800194c:	58021400 	.word	0x58021400
 8001950:	58021800 	.word	0x58021800
 8001954:	58021c00 	.word	0x58021c00
 8001958:	58022000 	.word	0x58022000
 800195c:	58022400 	.word	0x58022400

08001960 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <HAL_PWREx_ConfigSupply+0x70>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	2b04      	cmp	r3, #4
 8001972:	d00a      	beq.n	800198a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001974:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <HAL_PWREx_ConfigSupply+0x70>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	d001      	beq.n	8001986 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e01f      	b.n	80019c6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	e01d      	b.n	80019c6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_PWREx_ConfigSupply+0x70>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	f023 0207 	bic.w	r2, r3, #7
 8001992:	490f      	ldr	r1, [pc, #60]	; (80019d0 <HAL_PWREx_ConfigSupply+0x70>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4313      	orrs	r3, r2
 8001998:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800199a:	f7ff fc07 	bl	80011ac <HAL_GetTick>
 800199e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019a0:	e009      	b.n	80019b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019a2:	f7ff fc03 	bl	80011ac <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019b0:	d901      	bls.n	80019b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e007      	b.n	80019c6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_PWREx_ConfigSupply+0x70>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019c2:	d1ee      	bne.n	80019a2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	58024800 	.word	0x58024800

080019d4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af02      	add	r7, sp, #8
 80019da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff fbe6 	bl	80011ac <HAL_GetTick>
 80019e0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e05f      	b.n	8001aac <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d107      	bne.n	8001a08 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7fe fe0d 	bl	8000618 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80019fe:	f241 3188 	movw	r1, #5000	; 0x1388
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 fa7e 	bl	8001f04 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	021a      	lsls	r2, r3, #8
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2120      	movs	r1, #32
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fa76 	bl	8001f20 <QSPI_WaitFlagStateUntilTimeout>
 8001a34:	4603      	mov	r3, r0
 8001a36:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001a38:	7afb      	ldrb	r3, [r7, #11]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d135      	bne.n	8001aaa <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <HAL_QSPI_Init+0xe0>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6852      	ldr	r2, [r2, #4]
 8001a4c:	0611      	lsls	r1, r2, #24
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68d2      	ldr	r2, [r2, #12]
 8001a52:	4311      	orrs	r1, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	69d2      	ldr	r2, [r2, #28]
 8001a58:	4311      	orrs	r1, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6a12      	ldr	r2, [r2, #32]
 8001a5e:	4311      	orrs	r1, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	430b      	orrs	r3, r1
 8001a66:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_QSPI_Init+0xe4>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6912      	ldr	r2, [r2, #16]
 8001a76:	0411      	lsls	r1, r2, #16
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6952      	ldr	r2, [r2, #20]
 8001a7c:	4311      	orrs	r1, r2
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6992      	ldr	r2, [r2, #24]
 8001a82:	4311      	orrs	r1, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6812      	ldr	r2, [r2, #0]
 8001a88:	430b      	orrs	r3, r1
 8001a8a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0201 	orr.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8001aaa:	7afb      	ldrb	r3, [r7, #11]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	00ffff2f 	.word	0x00ffff2f
 8001ab8:	ffe0f8fe 	.word	0xffe0f8fe

08001abc <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e012      	b.n	8001af4 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0201 	bic.w	r2, r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7fe fe74 	bl	80007cc <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff fb50 	bl	80011ac <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_QSPI_Command+0x22>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e048      	b.n	8001bb0 <HAL_QSPI_Command+0xb4>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d137      	bne.n	8001ba2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2200      	movs	r2, #0
 8001b48:	2120      	movs	r1, #32
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f9e8 	bl	8001f20 <QSPI_WaitFlagStateUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d125      	bne.n	8001ba6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 fa15 	bl	8001f8e <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d115      	bne.n	8001b98 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	2201      	movs	r2, #1
 8001b74:	2102      	movs	r1, #2
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 f9d2 	bl	8001f20 <QSPI_WaitFlagStateUntilTimeout>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8001b80:	7dfb      	ldrb	r3, [r7, #23]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10f      	bne.n	8001ba6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b96:	e006      	b.n	8001ba6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001ba0:	e001      	b.n	8001ba6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_QSPI_Transmit>:
  * @note   This function is used only in Indirect Write Mode
  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001bc8:	f7ff faf0 	bl	80011ac <HAL_GetTick>
 8001bcc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	3320      	adds	r3, #32
 8001bd4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_QSPI_Transmit+0x2e>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e076      	b.n	8001cd4 <HAL_QSPI_Transmit+0x11c>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d165      	bne.n	8001cc6 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d056      	beq.n	8001cb4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2212      	movs	r2, #18
 8001c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695a      	ldr	r2, [r3, #20]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001c3a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8001c3c:	e01b      	b.n	8001c76 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	2201      	movs	r2, #1
 8001c46:	2104      	movs	r1, #4
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 f969 	bl	8001f20 <QSPI_WaitFlagStateUntilTimeout>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8001c52:	7ffb      	ldrb	r3, [r7, #31]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d113      	bne.n	8001c80 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	781a      	ldrb	r2, [r3, #0]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	1e5a      	subs	r2, r3, #1
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1df      	bne.n	8001c3e <HAL_QSPI_Transmit+0x86>
 8001c7e:	e000      	b.n	8001c82 <HAL_QSPI_Transmit+0xca>
          break;
 8001c80:	bf00      	nop
      }

      if (status == HAL_OK)
 8001c82:	7ffb      	ldrb	r3, [r7, #31]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d110      	bne.n	8001caa <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	2102      	movs	r1, #2
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f944 	bl	8001f20 <QSPI_WaitFlagStateUntilTimeout>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8001c9c:	7ffb      	ldrb	r3, [r7, #31]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d103      	bne.n	8001caa <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001cb2:	e00a      	b.n	8001cca <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb8:	f043 0208 	orr.w	r2, r3, #8
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	77fb      	strb	r3, [r7, #31]
 8001cc4:	e001      	b.n	8001cca <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8001cd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff fa5e 	bl	80011ac <HAL_GetTick>
 8001cf0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	3320      	adds	r3, #32
 8001d00:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_QSPI_Receive+0x36>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e07d      	b.n	8001e0e <HAL_QSPI_Receive+0x132>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d16c      	bne.n	8001e00 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d05d      	beq.n	8001dee <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2222      	movs	r2, #34	; 0x22
 8001d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001d6a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8001d74:	e01c      	b.n	8001db0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	2106      	movs	r1, #6
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f000 f8cd 	bl	8001f20 <QSPI_WaitFlagStateUntilTimeout>
 8001d86:	4603      	mov	r3, r0
 8001d88:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8001d8a:	7ffb      	ldrb	r3, [r7, #31]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d114      	bne.n	8001dba <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	7812      	ldrb	r2, [r2, #0]
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001daa:	1e5a      	subs	r2, r3, #1
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1de      	bne.n	8001d76 <HAL_QSPI_Receive+0x9a>
 8001db8:	e000      	b.n	8001dbc <HAL_QSPI_Receive+0xe0>
          break;
 8001dba:	bf00      	nop
      }

      if (status == HAL_OK)
 8001dbc:	7ffb      	ldrb	r3, [r7, #31]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d110      	bne.n	8001de4 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	2102      	movs	r1, #2
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 f8a7 	bl	8001f20 <QSPI_WaitFlagStateUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8001dd6:	7ffb      	ldrb	r3, [r7, #31]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d103      	bne.n	8001de4 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2202      	movs	r2, #2
 8001de2:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001dec:	e00a      	b.n	8001e04 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f043 0208 	orr.w	r2, r3, #8
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	77fb      	strb	r3, [r7, #31]
 8001dfe:	e001      	b.n	8001e04 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001e00:	2302      	movs	r3, #2
 8001e02:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8001e0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3720      	adds	r7, #32
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b088      	sub	sp, #32
 8001e1a:	af02      	add	r7, sp, #8
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001e24:	f7ff f9c2 	bl	80011ac <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d101      	bne.n	8001e3a <HAL_QSPI_AutoPolling+0x24>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e060      	b.n	8001efc <HAL_QSPI_AutoPolling+0xe6>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d14f      	bne.n	8001eee <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2242      	movs	r2, #66	; 0x42
 8001e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2200      	movs	r2, #0
 8001e64:	2120      	movs	r1, #32
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 f85a 	bl	8001f20 <QSPI_WaitFlagStateUntilTimeout>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001e70:	7dfb      	ldrb	r3, [r7, #23]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d13d      	bne.n	8001ef2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6852      	ldr	r2, [r2, #4]
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6892      	ldr	r2, [r2, #8]
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001eac:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8001eb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001eba:	68b9      	ldr	r1, [r7, #8]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f866 	bl	8001f8e <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	2108      	movs	r1, #8
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f827 	bl	8001f20 <QSPI_WaitFlagStateUntilTimeout>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8001ed6:	7dfb      	ldrb	r3, [r7, #23]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10a      	bne.n	8001ef2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2208      	movs	r2, #8
 8001ee2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001eec:	e001      	b.n	8001ef2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001f30:	e01a      	b.n	8001f68 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f38:	d016      	beq.n	8001f68 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3a:	f7ff f937 	bl	80011ac <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d302      	bcc.n	8001f50 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10b      	bne.n	8001f68 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2204      	movs	r2, #4
 8001f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5c:	f043 0201 	orr.w	r2, r3, #1
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e00e      	b.n	8001f86 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	bf14      	ite	ne
 8001f76:	2301      	movne	r3, #1
 8001f78:	2300      	moveq	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d1d6      	bne.n	8001f32 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b085      	sub	sp, #20
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d009      	beq.n	8001fb6 <QSPI_Config+0x28>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001fa8:	d005      	beq.n	8001fb6 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	3a01      	subs	r2, #1
 8001fb4:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80b9 	beq.w	8002132 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d05f      	beq.n	8002088 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	6892      	ldr	r2, [r2, #8]
 8001fd0:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d031      	beq.n	800203e <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	049b      	lsls	r3, r3, #18
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	431a      	orrs	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	431a      	orrs	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	431a      	orrs	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	431a      	orrs	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	ea42 0103 	orr.w	r1, r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	430a      	orrs	r2, r1
 8002026:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800202e:	f000 812e 	beq.w	800228e <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	6852      	ldr	r2, [r2, #4]
 800203a:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800203c:	e127      	b.n	800228e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	431a      	orrs	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204c:	431a      	orrs	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	431a      	orrs	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	049b      	lsls	r3, r3, #18
 800205a:	431a      	orrs	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	431a      	orrs	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	431a      	orrs	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	431a      	orrs	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	431a      	orrs	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	ea42 0103 	orr.w	r1, r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	430a      	orrs	r2, r1
 8002084:	615a      	str	r2, [r3, #20]
}
 8002086:	e102      	b.n	800228e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d02e      	beq.n	80020ee <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	431a      	orrs	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209e:	431a      	orrs	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	431a      	orrs	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	049b      	lsls	r3, r3, #18
 80020ac:	431a      	orrs	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	431a      	orrs	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	431a      	orrs	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	ea42 0103 	orr.w	r1, r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80020de:	f000 80d6 	beq.w	800228e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	6852      	ldr	r2, [r2, #4]
 80020ea:	619a      	str	r2, [r3, #24]
}
 80020ec:	e0cf      	b.n	800228e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	431a      	orrs	r2, r3
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fc:	431a      	orrs	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	431a      	orrs	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	049b      	lsls	r3, r3, #18
 800210a:	431a      	orrs	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	431a      	orrs	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	431a      	orrs	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	431a      	orrs	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	ea42 0103 	orr.w	r1, r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	430a      	orrs	r2, r1
 800212e:	615a      	str	r2, [r3, #20]
}
 8002130:	e0ad      	b.n	800228e <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d058      	beq.n	80021ec <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	6892      	ldr	r2, [r2, #8]
 8002142:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d02d      	beq.n	80021a8 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	431a      	orrs	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215a:	431a      	orrs	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	431a      	orrs	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	049b      	lsls	r3, r3, #18
 8002168:	431a      	orrs	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	431a      	orrs	r2, r3
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	431a      	orrs	r2, r3
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	431a      	orrs	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	431a      	orrs	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	ea42 0103 	orr.w	r1, r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	430a      	orrs	r2, r1
 8002192:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800219a:	d078      	beq.n	800228e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	6852      	ldr	r2, [r2, #4]
 80021a4:	619a      	str	r2, [r3, #24]
}
 80021a6:	e072      	b.n	800228e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	431a      	orrs	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b6:	431a      	orrs	r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	431a      	orrs	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	049b      	lsls	r3, r3, #18
 80021c4:	431a      	orrs	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	431a      	orrs	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	431a      	orrs	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	ea42 0103 	orr.w	r1, r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	615a      	str	r2, [r3, #20]
}
 80021ea:	e050      	b.n	800228e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d02a      	beq.n	800224a <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	431a      	orrs	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002202:	431a      	orrs	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	431a      	orrs	r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	049b      	lsls	r3, r3, #18
 8002210:	431a      	orrs	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	431a      	orrs	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	431a      	orrs	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	431a      	orrs	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	ea42 0103 	orr.w	r1, r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	430a      	orrs	r2, r1
 8002234:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800223c:	d027      	beq.n	800228e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	6852      	ldr	r2, [r2, #4]
 8002246:	619a      	str	r2, [r3, #24]
}
 8002248:	e021      	b.n	800228e <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	2b00      	cmp	r3, #0
 8002250:	d01d      	beq.n	800228e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	431a      	orrs	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002260:	431a      	orrs	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002266:	431a      	orrs	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	049b      	lsls	r3, r3, #18
 800226e:	431a      	orrs	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	431a      	orrs	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	431a      	orrs	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	ea42 0103 	orr.w	r1, r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	430a      	orrs	r2, r1
 800228c:	615a      	str	r2, [r3, #20]
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	; 0x30
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e3ff      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8087 	beq.w	80023ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022bc:	4b99      	ldr	r3, [pc, #612]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022c6:	4b97      	ldr	r3, [pc, #604]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ce:	2b10      	cmp	r3, #16
 80022d0:	d007      	beq.n	80022e2 <HAL_RCC_OscConfig+0x46>
 80022d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d4:	2b18      	cmp	r3, #24
 80022d6:	d110      	bne.n	80022fa <HAL_RCC_OscConfig+0x5e>
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d10b      	bne.n	80022fa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e2:	4b90      	ldr	r3, [pc, #576]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d06c      	beq.n	80023c8 <HAL_RCC_OscConfig+0x12c>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d168      	bne.n	80023c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e3d9      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x76>
 8002304:	4b87      	ldr	r3, [pc, #540]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a86      	ldr	r2, [pc, #536]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 800230a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	e02e      	b.n	8002370 <HAL_RCC_OscConfig+0xd4>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x98>
 800231a:	4b82      	ldr	r3, [pc, #520]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a81      	ldr	r2, [pc, #516]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 8002320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b7f      	ldr	r3, [pc, #508]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a7e      	ldr	r2, [pc, #504]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 800232c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e01d      	b.n	8002370 <HAL_RCC_OscConfig+0xd4>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0xbc>
 800233e:	4b79      	ldr	r3, [pc, #484]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a78      	ldr	r2, [pc, #480]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b76      	ldr	r3, [pc, #472]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a75      	ldr	r2, [pc, #468]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0xd4>
 8002358:	4b72      	ldr	r3, [pc, #456]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a71      	ldr	r2, [pc, #452]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 800235e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b6f      	ldr	r3, [pc, #444]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a6e      	ldr	r2, [pc, #440]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 800236a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7fe ff18 	bl	80011ac <HAL_GetTick>
 800237c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe ff14 	bl	80011ac <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e38d      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002392:	4b64      	ldr	r3, [pc, #400]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0xe4>
 800239e:	e014      	b.n	80023ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe ff04 	bl	80011ac <HAL_GetTick>
 80023a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a8:	f7fe ff00 	bl	80011ac <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e379      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023ba:	4b5a      	ldr	r3, [pc, #360]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x10c>
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 80ae 	beq.w	8002534 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d8:	4b52      	ldr	r3, [pc, #328]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023e2:	4b50      	ldr	r3, [pc, #320]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d007      	beq.n	80023fe <HAL_RCC_OscConfig+0x162>
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	2b18      	cmp	r3, #24
 80023f2:	d13a      	bne.n	800246a <HAL_RCC_OscConfig+0x1ce>
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d135      	bne.n	800246a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023fe:	4b49      	ldr	r3, [pc, #292]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_RCC_OscConfig+0x17a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e34b      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002416:	f7fe fef9 	bl	800120c <HAL_GetREVID>
 800241a:	4603      	mov	r3, r0
 800241c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002420:	4293      	cmp	r3, r2
 8002422:	d817      	bhi.n	8002454 <HAL_RCC_OscConfig+0x1b8>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	2b40      	cmp	r3, #64	; 0x40
 800242a:	d108      	bne.n	800243e <HAL_RCC_OscConfig+0x1a2>
 800242c:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002434:	4a3b      	ldr	r2, [pc, #236]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 8002436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800243c:	e07a      	b.n	8002534 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243e:	4b39      	ldr	r3, [pc, #228]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	031b      	lsls	r3, r3, #12
 800244c:	4935      	ldr	r1, [pc, #212]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002452:	e06f      	b.n	8002534 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002454:	4b33      	ldr	r3, [pc, #204]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	061b      	lsls	r3, r3, #24
 8002462:	4930      	ldr	r1, [pc, #192]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002468:	e064      	b.n	8002534 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d045      	beq.n	80024fe <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002472:	4b2c      	ldr	r3, [pc, #176]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 0219 	bic.w	r2, r3, #25
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	4929      	ldr	r1, [pc, #164]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 8002480:	4313      	orrs	r3, r2
 8002482:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe fe92 	bl	80011ac <HAL_GetTick>
 8002488:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248c:	f7fe fe8e 	bl	80011ac <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e307      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800249e:	4b21      	ldr	r3, [pc, #132]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024aa:	f7fe feaf 	bl	800120c <HAL_GetREVID>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d817      	bhi.n	80024e8 <HAL_RCC_OscConfig+0x24c>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	2b40      	cmp	r3, #64	; 0x40
 80024be:	d108      	bne.n	80024d2 <HAL_RCC_OscConfig+0x236>
 80024c0:	4b18      	ldr	r3, [pc, #96]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024c8:	4a16      	ldr	r2, [pc, #88]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 80024ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ce:	6053      	str	r3, [r2, #4]
 80024d0:	e030      	b.n	8002534 <HAL_RCC_OscConfig+0x298>
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	031b      	lsls	r3, r3, #12
 80024e0:	4910      	ldr	r1, [pc, #64]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
 80024e6:	e025      	b.n	8002534 <HAL_RCC_OscConfig+0x298>
 80024e8:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	061b      	lsls	r3, r3, #24
 80024f6:	490b      	ldr	r1, [pc, #44]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]
 80024fc:	e01a      	b.n	8002534 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a08      	ldr	r2, [pc, #32]	; (8002524 <HAL_RCC_OscConfig+0x288>)
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250a:	f7fe fe4f 	bl	80011ac <HAL_GetTick>
 800250e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002510:	e00a      	b.n	8002528 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002512:	f7fe fe4b 	bl	80011ac <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d903      	bls.n	8002528 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e2c4      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
 8002524:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002528:	4ba4      	ldr	r3, [pc, #656]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1ee      	bne.n	8002512 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80a9 	beq.w	8002694 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002542:	4b9e      	ldr	r3, [pc, #632]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800254a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800254c:	4b9b      	ldr	r3, [pc, #620]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2b08      	cmp	r3, #8
 8002556:	d007      	beq.n	8002568 <HAL_RCC_OscConfig+0x2cc>
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b18      	cmp	r3, #24
 800255c:	d13a      	bne.n	80025d4 <HAL_RCC_OscConfig+0x338>
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d135      	bne.n	80025d4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002568:	4b94      	ldr	r3, [pc, #592]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_RCC_OscConfig+0x2e4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	2b80      	cmp	r3, #128	; 0x80
 800257a:	d001      	beq.n	8002580 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e296      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002580:	f7fe fe44 	bl	800120c <HAL_GetREVID>
 8002584:	4603      	mov	r3, r0
 8002586:	f241 0203 	movw	r2, #4099	; 0x1003
 800258a:	4293      	cmp	r3, r2
 800258c:	d817      	bhi.n	80025be <HAL_RCC_OscConfig+0x322>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	2b20      	cmp	r3, #32
 8002594:	d108      	bne.n	80025a8 <HAL_RCC_OscConfig+0x30c>
 8002596:	4b89      	ldr	r3, [pc, #548]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800259e:	4a87      	ldr	r2, [pc, #540]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 80025a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025a4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025a6:	e075      	b.n	8002694 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025a8:	4b84      	ldr	r3, [pc, #528]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	069b      	lsls	r3, r3, #26
 80025b6:	4981      	ldr	r1, [pc, #516]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025bc:	e06a      	b.n	8002694 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025be:	4b7f      	ldr	r3, [pc, #508]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	061b      	lsls	r3, r3, #24
 80025cc:	497b      	ldr	r1, [pc, #492]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025d2:	e05f      	b.n	8002694 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d042      	beq.n	8002662 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025dc:	4b77      	ldr	r3, [pc, #476]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a76      	ldr	r2, [pc, #472]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 80025e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe fde0 	bl	80011ac <HAL_GetTick>
 80025ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80025f0:	f7fe fddc 	bl	80011ac <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e255      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002602:	4b6e      	ldr	r3, [pc, #440]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800260e:	f7fe fdfd 	bl	800120c <HAL_GetREVID>
 8002612:	4603      	mov	r3, r0
 8002614:	f241 0203 	movw	r2, #4099	; 0x1003
 8002618:	4293      	cmp	r3, r2
 800261a:	d817      	bhi.n	800264c <HAL_RCC_OscConfig+0x3b0>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	2b20      	cmp	r3, #32
 8002622:	d108      	bne.n	8002636 <HAL_RCC_OscConfig+0x39a>
 8002624:	4b65      	ldr	r3, [pc, #404]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800262c:	4a63      	ldr	r2, [pc, #396]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 800262e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002632:	6053      	str	r3, [r2, #4]
 8002634:	e02e      	b.n	8002694 <HAL_RCC_OscConfig+0x3f8>
 8002636:	4b61      	ldr	r3, [pc, #388]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	069b      	lsls	r3, r3, #26
 8002644:	495d      	ldr	r1, [pc, #372]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 8002646:	4313      	orrs	r3, r2
 8002648:	604b      	str	r3, [r1, #4]
 800264a:	e023      	b.n	8002694 <HAL_RCC_OscConfig+0x3f8>
 800264c:	4b5b      	ldr	r3, [pc, #364]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	061b      	lsls	r3, r3, #24
 800265a:	4958      	ldr	r1, [pc, #352]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 800265c:	4313      	orrs	r3, r2
 800265e:	60cb      	str	r3, [r1, #12]
 8002660:	e018      	b.n	8002694 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002662:	4b56      	ldr	r3, [pc, #344]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a55      	ldr	r2, [pc, #340]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 8002668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800266c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266e:	f7fe fd9d 	bl	80011ac <HAL_GetTick>
 8002672:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002674:	e008      	b.n	8002688 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002676:	f7fe fd99 	bl	80011ac <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e212      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002688:	4b4c      	ldr	r3, [pc, #304]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f0      	bne.n	8002676 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d036      	beq.n	800270e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d019      	beq.n	80026dc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026a8:	4b44      	ldr	r3, [pc, #272]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 80026aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ac:	4a43      	ldr	r2, [pc, #268]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7fe fd7a 	bl	80011ac <HAL_GetTick>
 80026b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026bc:	f7fe fd76 	bl	80011ac <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e1ef      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026ce:	4b3b      	ldr	r3, [pc, #236]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 80026d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x420>
 80026da:	e018      	b.n	800270e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026dc:	4b37      	ldr	r3, [pc, #220]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 80026de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e0:	4a36      	ldr	r2, [pc, #216]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e8:	f7fe fd60 	bl	80011ac <HAL_GetTick>
 80026ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f0:	f7fe fd5c 	bl	80011ac <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e1d5      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002702:	4b2e      	ldr	r3, [pc, #184]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 8002704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b00      	cmp	r3, #0
 8002718:	d036      	beq.n	8002788 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d019      	beq.n	8002756 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a25      	ldr	r2, [pc, #148]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 8002728:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800272c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800272e:	f7fe fd3d 	bl	80011ac <HAL_GetTick>
 8002732:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002736:	f7fe fd39 	bl	80011ac <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e1b2      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002748:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x49a>
 8002754:	e018      	b.n	8002788 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002756:	4b19      	ldr	r3, [pc, #100]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a18      	ldr	r2, [pc, #96]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 800275c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002760:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002762:	f7fe fd23 	bl	80011ac <HAL_GetTick>
 8002766:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800276a:	f7fe fd1f 	bl	80011ac <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e198      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <HAL_RCC_OscConfig+0x520>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f0      	bne.n	800276a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 8085 	beq.w	80028a0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_RCC_OscConfig+0x524>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <HAL_RCC_OscConfig+0x524>)
 800279c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027a2:	f7fe fd03 	bl	80011ac <HAL_GetTick>
 80027a6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027a8:	e00c      	b.n	80027c4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80027aa:	f7fe fcff 	bl	80011ac <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b64      	cmp	r3, #100	; 0x64
 80027b6:	d905      	bls.n	80027c4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e178      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
 80027bc:	58024400 	.word	0x58024400
 80027c0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027c4:	4b96      	ldr	r3, [pc, #600]	; (8002a20 <HAL_RCC_OscConfig+0x784>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0ec      	beq.n	80027aa <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d106      	bne.n	80027e6 <HAL_RCC_OscConfig+0x54a>
 80027d8:	4b92      	ldr	r3, [pc, #584]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4a91      	ldr	r2, [pc, #580]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6713      	str	r3, [r2, #112]	; 0x70
 80027e4:	e02d      	b.n	8002842 <HAL_RCC_OscConfig+0x5a6>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x56c>
 80027ee:	4b8d      	ldr	r3, [pc, #564]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f2:	4a8c      	ldr	r2, [pc, #560]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	6713      	str	r3, [r2, #112]	; 0x70
 80027fa:	4b8a      	ldr	r3, [pc, #552]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fe:	4a89      	ldr	r2, [pc, #548]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	6713      	str	r3, [r2, #112]	; 0x70
 8002806:	e01c      	b.n	8002842 <HAL_RCC_OscConfig+0x5a6>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2b05      	cmp	r3, #5
 800280e:	d10c      	bne.n	800282a <HAL_RCC_OscConfig+0x58e>
 8002810:	4b84      	ldr	r3, [pc, #528]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	4a83      	ldr	r2, [pc, #524]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 8002816:	f043 0304 	orr.w	r3, r3, #4
 800281a:	6713      	str	r3, [r2, #112]	; 0x70
 800281c:	4b81      	ldr	r3, [pc, #516]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	4a80      	ldr	r2, [pc, #512]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6713      	str	r3, [r2, #112]	; 0x70
 8002828:	e00b      	b.n	8002842 <HAL_RCC_OscConfig+0x5a6>
 800282a:	4b7e      	ldr	r3, [pc, #504]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 800282c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282e:	4a7d      	ldr	r2, [pc, #500]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	6713      	str	r3, [r2, #112]	; 0x70
 8002836:	4b7b      	ldr	r3, [pc, #492]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	4a7a      	ldr	r2, [pc, #488]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 800283c:	f023 0304 	bic.w	r3, r3, #4
 8002840:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d015      	beq.n	8002876 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284a:	f7fe fcaf 	bl	80011ac <HAL_GetTick>
 800284e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7fe fcab 	bl	80011ac <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002860:	4293      	cmp	r3, r2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e122      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002868:	4b6e      	ldr	r3, [pc, #440]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0ee      	beq.n	8002852 <HAL_RCC_OscConfig+0x5b6>
 8002874:	e014      	b.n	80028a0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002876:	f7fe fc99 	bl	80011ac <HAL_GetTick>
 800287a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800287c:	e00a      	b.n	8002894 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7fe fc95 	bl	80011ac <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f241 3288 	movw	r2, #5000	; 0x1388
 800288c:	4293      	cmp	r3, r2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e10c      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002894:	4b63      	ldr	r3, [pc, #396]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ee      	bne.n	800287e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 8101 	beq.w	8002aac <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028aa:	4b5e      	ldr	r3, [pc, #376]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028b2:	2b18      	cmp	r3, #24
 80028b4:	f000 80bc 	beq.w	8002a30 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	2b02      	cmp	r3, #2
 80028be:	f040 8095 	bne.w	80029ec <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c2:	4b58      	ldr	r3, [pc, #352]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a57      	ldr	r2, [pc, #348]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80028c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ce:	f7fe fc6d 	bl	80011ac <HAL_GetTick>
 80028d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d6:	f7fe fc69 	bl	80011ac <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e0e2      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028e8:	4b4e      	ldr	r3, [pc, #312]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f0      	bne.n	80028d6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f4:	4b4b      	ldr	r3, [pc, #300]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80028f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028f8:	4b4b      	ldr	r3, [pc, #300]	; (8002a28 <HAL_RCC_OscConfig+0x78c>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002904:	0112      	lsls	r2, r2, #4
 8002906:	430a      	orrs	r2, r1
 8002908:	4946      	ldr	r1, [pc, #280]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 800290a:	4313      	orrs	r3, r2
 800290c:	628b      	str	r3, [r1, #40]	; 0x28
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	3b01      	subs	r3, #1
 8002914:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291c:	3b01      	subs	r3, #1
 800291e:	025b      	lsls	r3, r3, #9
 8002920:	b29b      	uxth	r3, r3
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	3b01      	subs	r3, #1
 800292a:	041b      	lsls	r3, r3, #16
 800292c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	3b01      	subs	r3, #1
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800293e:	4939      	ldr	r1, [pc, #228]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 8002940:	4313      	orrs	r3, r2
 8002942:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002944:	4b37      	ldr	r3, [pc, #220]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	4a36      	ldr	r2, [pc, #216]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 800294a:	f023 0301 	bic.w	r3, r3, #1
 800294e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002950:	4b34      	ldr	r3, [pc, #208]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 8002952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002954:	4b35      	ldr	r3, [pc, #212]	; (8002a2c <HAL_RCC_OscConfig+0x790>)
 8002956:	4013      	ands	r3, r2
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800295c:	00d2      	lsls	r2, r2, #3
 800295e:	4931      	ldr	r1, [pc, #196]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 8002960:	4313      	orrs	r3, r2
 8002962:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002964:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	f023 020c 	bic.w	r2, r3, #12
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	492c      	ldr	r1, [pc, #176]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 8002972:	4313      	orrs	r3, r2
 8002974:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002976:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	f023 0202 	bic.w	r2, r3, #2
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4928      	ldr	r1, [pc, #160]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 8002984:	4313      	orrs	r3, r2
 8002986:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002988:	4b26      	ldr	r3, [pc, #152]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	4a25      	ldr	r2, [pc, #148]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 800298e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002992:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002994:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	4a22      	ldr	r2, [pc, #136]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 800299a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029a0:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80029a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a4:	4a1f      	ldr	r2, [pc, #124]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80029a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b8:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a19      	ldr	r2, [pc, #100]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80029be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe fbf2 	bl	80011ac <HAL_GetTick>
 80029c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe fbee 	bl	80011ac <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e067      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0x730>
 80029ea:	e05f      	b.n	8002aac <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ec:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0c      	ldr	r2, [pc, #48]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 80029f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fe fbd8 	bl	80011ac <HAL_GetTick>
 80029fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a00:	f7fe fbd4 	bl	80011ac <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e04d      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a12:	4b04      	ldr	r3, [pc, #16]	; (8002a24 <HAL_RCC_OscConfig+0x788>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x764>
 8002a1e:	e045      	b.n	8002aac <HAL_RCC_OscConfig+0x810>
 8002a20:	58024800 	.word	0x58024800
 8002a24:	58024400 	.word	0x58024400
 8002a28:	fffffc0c 	.word	0xfffffc0c
 8002a2c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a30:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <HAL_RCC_OscConfig+0x81c>)
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a36:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <HAL_RCC_OscConfig+0x81c>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d031      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f003 0203 	and.w	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d12a      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d122      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d11a      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	0a5b      	lsrs	r3, r3, #9
 8002a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d111      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	0c1b      	lsrs	r3, r3, #16
 8002a88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d108      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	0e1b      	lsrs	r3, r3, #24
 8002a9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3730      	adds	r7, #48	; 0x30
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	58024400 	.word	0x58024400

08002abc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e19c      	b.n	8002e0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b8a      	ldr	r3, [pc, #552]	; (8002cfc <HAL_RCC_ClockConfig+0x240>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d910      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b87      	ldr	r3, [pc, #540]	; (8002cfc <HAL_RCC_ClockConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 020f 	bic.w	r2, r3, #15
 8002ae6:	4985      	ldr	r1, [pc, #532]	; (8002cfc <HAL_RCC_ClockConfig+0x240>)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b83      	ldr	r3, [pc, #524]	; (8002cfc <HAL_RCC_ClockConfig+0x240>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e184      	b.n	8002e0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d010      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	4b7b      	ldr	r3, [pc, #492]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d908      	bls.n	8002b2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b1c:	4b78      	ldr	r3, [pc, #480]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	4975      	ldr	r1, [pc, #468]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d010      	beq.n	8002b5c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	4b70      	ldr	r3, [pc, #448]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d908      	bls.n	8002b5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b4a:	4b6d      	ldr	r3, [pc, #436]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	496a      	ldr	r1, [pc, #424]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d010      	beq.n	8002b8a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699a      	ldr	r2, [r3, #24]
 8002b6c:	4b64      	ldr	r3, [pc, #400]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d908      	bls.n	8002b8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b78:	4b61      	ldr	r3, [pc, #388]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	495e      	ldr	r1, [pc, #376]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d010      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69da      	ldr	r2, [r3, #28]
 8002b9a:	4b59      	ldr	r3, [pc, #356]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d908      	bls.n	8002bb8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002ba6:	4b56      	ldr	r3, [pc, #344]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	4953      	ldr	r1, [pc, #332]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d010      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	4b4d      	ldr	r3, [pc, #308]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	f003 030f 	and.w	r3, r3, #15
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d908      	bls.n	8002be6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd4:	4b4a      	ldr	r3, [pc, #296]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f023 020f 	bic.w	r2, r3, #15
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4947      	ldr	r1, [pc, #284]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d055      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002bf2:	4b43      	ldr	r3, [pc, #268]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	4940      	ldr	r1, [pc, #256]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c0c:	4b3c      	ldr	r3, [pc, #240]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d121      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0f6      	b.n	8002e0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c24:	4b36      	ldr	r3, [pc, #216]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d115      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0ea      	b.n	8002e0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c3c:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0de      	b.n	8002e0a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c4c:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0d6      	b.n	8002e0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c5c:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f023 0207 	bic.w	r2, r3, #7
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4925      	ldr	r1, [pc, #148]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c6e:	f7fe fa9d 	bl	80011ac <HAL_GetTick>
 8002c72:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c74:	e00a      	b.n	8002c8c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c76:	f7fe fa99 	bl	80011ac <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e0be      	b.n	8002e0a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8c:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d1eb      	bne.n	8002c76 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d010      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d208      	bcs.n	8002ccc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f023 020f 	bic.w	r2, r3, #15
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	490e      	ldr	r1, [pc, #56]	; (8002d00 <HAL_RCC_ClockConfig+0x244>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCC_ClockConfig+0x240>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d214      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <HAL_RCC_ClockConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 020f 	bic.w	r2, r3, #15
 8002ce2:	4906      	ldr	r1, [pc, #24]	; (8002cfc <HAL_RCC_ClockConfig+0x240>)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <HAL_RCC_ClockConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e086      	b.n	8002e0a <HAL_RCC_ClockConfig+0x34e>
 8002cfc:	52002000 	.word	0x52002000
 8002d00:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d010      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	4b3f      	ldr	r3, [pc, #252]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d208      	bcs.n	8002d32 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d20:	4b3c      	ldr	r3, [pc, #240]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	4939      	ldr	r1, [pc, #228]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d010      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	4b34      	ldr	r3, [pc, #208]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d208      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d4e:	4b31      	ldr	r3, [pc, #196]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	492e      	ldr	r1, [pc, #184]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d010      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699a      	ldr	r2, [r3, #24]
 8002d70:	4b28      	ldr	r3, [pc, #160]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d208      	bcs.n	8002d8e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d7c:	4b25      	ldr	r3, [pc, #148]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	4922      	ldr	r1, [pc, #136]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d010      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d208      	bcs.n	8002dbc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002daa:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	4917      	ldr	r1, [pc, #92]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dbc:	f000 f834 	bl	8002e28 <HAL_RCC_GetSysClockFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	0a1b      	lsrs	r3, r3, #8
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	4912      	ldr	r1, [pc, #72]	; (8002e18 <HAL_RCC_ClockConfig+0x35c>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	f003 031f 	and.w	r3, r3, #31
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dda:	4b0e      	ldr	r3, [pc, #56]	; (8002e14 <HAL_RCC_ClockConfig+0x358>)
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	4a0d      	ldr	r2, [pc, #52]	; (8002e18 <HAL_RCC_ClockConfig+0x35c>)
 8002de4:	5cd3      	ldrb	r3, [r2, r3]
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	fa22 f303 	lsr.w	r3, r2, r3
 8002df0:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <HAL_RCC_ClockConfig+0x360>)
 8002df2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002df4:	4a0a      	ldr	r2, [pc, #40]	; (8002e20 <HAL_RCC_ClockConfig+0x364>)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <HAL_RCC_ClockConfig+0x368>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fe f98a 	bl	8001118 <HAL_InitTick>
 8002e04:	4603      	mov	r3, r0
 8002e06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	58024400 	.word	0x58024400
 8002e18:	080042d4 	.word	0x080042d4
 8002e1c:	2400001c 	.word	0x2400001c
 8002e20:	24000018 	.word	0x24000018
 8002e24:	24000020 	.word	0x24000020

08002e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b089      	sub	sp, #36	; 0x24
 8002e2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e2e:	4bb3      	ldr	r3, [pc, #716]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e36:	2b18      	cmp	r3, #24
 8002e38:	f200 8155 	bhi.w	80030e6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e3c:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e42:	bf00      	nop
 8002e44:	08002ea9 	.word	0x08002ea9
 8002e48:	080030e7 	.word	0x080030e7
 8002e4c:	080030e7 	.word	0x080030e7
 8002e50:	080030e7 	.word	0x080030e7
 8002e54:	080030e7 	.word	0x080030e7
 8002e58:	080030e7 	.word	0x080030e7
 8002e5c:	080030e7 	.word	0x080030e7
 8002e60:	080030e7 	.word	0x080030e7
 8002e64:	08002ecf 	.word	0x08002ecf
 8002e68:	080030e7 	.word	0x080030e7
 8002e6c:	080030e7 	.word	0x080030e7
 8002e70:	080030e7 	.word	0x080030e7
 8002e74:	080030e7 	.word	0x080030e7
 8002e78:	080030e7 	.word	0x080030e7
 8002e7c:	080030e7 	.word	0x080030e7
 8002e80:	080030e7 	.word	0x080030e7
 8002e84:	08002ed5 	.word	0x08002ed5
 8002e88:	080030e7 	.word	0x080030e7
 8002e8c:	080030e7 	.word	0x080030e7
 8002e90:	080030e7 	.word	0x080030e7
 8002e94:	080030e7 	.word	0x080030e7
 8002e98:	080030e7 	.word	0x080030e7
 8002e9c:	080030e7 	.word	0x080030e7
 8002ea0:	080030e7 	.word	0x080030e7
 8002ea4:	08002edb 	.word	0x08002edb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ea8:	4b94      	ldr	r3, [pc, #592]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d009      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002eb4:	4b91      	ldr	r3, [pc, #580]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	08db      	lsrs	r3, r3, #3
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	4a90      	ldr	r2, [pc, #576]	; (8003100 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002ec6:	e111      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ec8:	4b8d      	ldr	r3, [pc, #564]	; (8003100 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eca:	61bb      	str	r3, [r7, #24]
    break;
 8002ecc:	e10e      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002ece:	4b8d      	ldr	r3, [pc, #564]	; (8003104 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ed0:	61bb      	str	r3, [r7, #24]
    break;
 8002ed2:	e10b      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002ed4:	4b8c      	ldr	r3, [pc, #560]	; (8003108 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ed6:	61bb      	str	r3, [r7, #24]
    break;
 8002ed8:	e108      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002eda:	4b88      	ldr	r3, [pc, #544]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002ee4:	4b85      	ldr	r3, [pc, #532]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ef0:	4b82      	ldr	r3, [pc, #520]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002efa:	4b80      	ldr	r3, [pc, #512]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efe:	08db      	lsrs	r3, r3, #3
 8002f00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	fb02 f303 	mul.w	r3, r2, r3
 8002f0a:	ee07 3a90 	vmov	s15, r3
 8002f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f12:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80e1 	beq.w	80030e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	f000 8083 	beq.w	800302c <HAL_RCC_GetSysClockFreq+0x204>
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	f200 80a1 	bhi.w	8003070 <HAL_RCC_GetSysClockFreq+0x248>
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x114>
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d056      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f3a:	e099      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f3c:	4b6f      	ldr	r3, [pc, #444]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d02d      	beq.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f48:	4b6c      	ldr	r3, [pc, #432]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	08db      	lsrs	r3, r3, #3
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	4a6b      	ldr	r2, [pc, #428]	; (8003100 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
 8002f58:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	ee07 3a90 	vmov	s15, r3
 8002f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f72:	4b62      	ldr	r3, [pc, #392]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f7a:	ee07 3a90 	vmov	s15, r3
 8002f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f82:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f86:	eddf 5a61 	vldr	s11, [pc, #388]	; 800310c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002fa2:	e087      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	ee07 3a90 	vmov	s15, r3
 8002faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fae:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003110 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fb6:	4b51      	ldr	r3, [pc, #324]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fbe:	ee07 3a90 	vmov	s15, r3
 8002fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fca:	eddf 5a50 	vldr	s11, [pc, #320]	; 800310c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fe6:	e065      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	ee07 3a90 	vmov	s15, r3
 8002fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003114 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ffa:	4b40      	ldr	r3, [pc, #256]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800300a:	ed97 6a02 	vldr	s12, [r7, #8]
 800300e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800310c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800301a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800301e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003026:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800302a:	e043      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003036:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003118 <HAL_RCC_GetSysClockFreq+0x2f0>
 800303a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800303e:	4b2f      	ldr	r3, [pc, #188]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003046:	ee07 3a90 	vmov	s15, r3
 800304a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800304e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003052:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800310c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800305a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800305e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800306a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800306e:	e021      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800307a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003114 <HAL_RCC_GetSysClockFreq+0x2ec>
 800307e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003082:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003092:	ed97 6a02 	vldr	s12, [r7, #8]
 8003096:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800310c <HAL_RCC_GetSysClockFreq+0x2e4>
 800309a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800309e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030b2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80030b4:	4b11      	ldr	r3, [pc, #68]	; (80030fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	0a5b      	lsrs	r3, r3, #9
 80030ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030be:	3301      	adds	r3, #1
 80030c0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	ee07 3a90 	vmov	s15, r3
 80030c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80030d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030d8:	ee17 3a90 	vmov	r3, s15
 80030dc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80030de:	e005      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61bb      	str	r3, [r7, #24]
    break;
 80030e4:	e002      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80030e6:	4b07      	ldr	r3, [pc, #28]	; (8003104 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030e8:	61bb      	str	r3, [r7, #24]
    break;
 80030ea:	bf00      	nop
  }

  return sysclockfreq;
 80030ec:	69bb      	ldr	r3, [r7, #24]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3724      	adds	r7, #36	; 0x24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	58024400 	.word	0x58024400
 8003100:	03d09000 	.word	0x03d09000
 8003104:	003d0900 	.word	0x003d0900
 8003108:	007a1200 	.word	0x007a1200
 800310c:	46000000 	.word	0x46000000
 8003110:	4c742400 	.word	0x4c742400
 8003114:	4a742400 	.word	0x4a742400
 8003118:	4af42400 	.word	0x4af42400

0800311c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003124:	2300      	movs	r3, #0
 8003126:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003128:	2300      	movs	r3, #0
 800312a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d03f      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800313c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003140:	d02a      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003142:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003146:	d824      	bhi.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003148:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800314c:	d018      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800314e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003152:	d81e      	bhi.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800315c:	d007      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800315e:	e018      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003160:	4bab      	ldr	r3, [pc, #684]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	4aaa      	ldr	r2, [pc, #680]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800316a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800316c:	e015      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3304      	adds	r3, #4
 8003172:	2102      	movs	r1, #2
 8003174:	4618      	mov	r0, r3
 8003176:	f000 ff11 	bl	8003f9c <RCCEx_PLL2_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800317e:	e00c      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3324      	adds	r3, #36	; 0x24
 8003184:	2102      	movs	r1, #2
 8003186:	4618      	mov	r0, r3
 8003188:	f000 ffba 	bl	8004100 <RCCEx_PLL3_Config>
 800318c:	4603      	mov	r3, r0
 800318e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003190:	e003      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	75fb      	strb	r3, [r7, #23]
      break;
 8003196:	e000      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003198:	bf00      	nop
    }

    if(ret == HAL_OK)
 800319a:	7dfb      	ldrb	r3, [r7, #23]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d109      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80031a0:	4b9b      	ldr	r3, [pc, #620]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ac:	4998      	ldr	r1, [pc, #608]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	650b      	str	r3, [r1, #80]	; 0x50
 80031b2:	e001      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
 80031b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d03d      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d826      	bhi.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80031cc:	a201      	add	r2, pc, #4	; (adr r2, 80031d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80031ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d2:	bf00      	nop
 80031d4:	080031e9 	.word	0x080031e9
 80031d8:	080031f7 	.word	0x080031f7
 80031dc:	08003209 	.word	0x08003209
 80031e0:	08003221 	.word	0x08003221
 80031e4:	08003221 	.word	0x08003221
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031e8:	4b89      	ldr	r3, [pc, #548]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	4a88      	ldr	r2, [pc, #544]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031f4:	e015      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3304      	adds	r3, #4
 80031fa:	2100      	movs	r1, #0
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 fecd 	bl	8003f9c <RCCEx_PLL2_Config>
 8003202:	4603      	mov	r3, r0
 8003204:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003206:	e00c      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3324      	adds	r3, #36	; 0x24
 800320c:	2100      	movs	r1, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f000 ff76 	bl	8004100 <RCCEx_PLL3_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003218:	e003      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	75fb      	strb	r3, [r7, #23]
      break;
 800321e:	e000      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003222:	7dfb      	ldrb	r3, [r7, #23]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d109      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003228:	4b79      	ldr	r3, [pc, #484]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800322a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800322c:	f023 0207 	bic.w	r2, r3, #7
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	4976      	ldr	r1, [pc, #472]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003236:	4313      	orrs	r3, r2
 8003238:	650b      	str	r3, [r1, #80]	; 0x50
 800323a:	e001      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003248:	2b00      	cmp	r3, #0
 800324a:	d042      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003254:	d02b      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325a:	d825      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800325c:	2bc0      	cmp	r3, #192	; 0xc0
 800325e:	d028      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003260:	2bc0      	cmp	r3, #192	; 0xc0
 8003262:	d821      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003264:	2b80      	cmp	r3, #128	; 0x80
 8003266:	d016      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003268:	2b80      	cmp	r3, #128	; 0x80
 800326a:	d81d      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	d007      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003274:	e018      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003276:	4b66      	ldr	r3, [pc, #408]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327a:	4a65      	ldr	r2, [pc, #404]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800327c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003280:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003282:	e017      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3304      	adds	r3, #4
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fe86 	bl	8003f9c <RCCEx_PLL2_Config>
 8003290:	4603      	mov	r3, r0
 8003292:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003294:	e00e      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3324      	adds	r3, #36	; 0x24
 800329a:	2100      	movs	r1, #0
 800329c:	4618      	mov	r0, r3
 800329e:	f000 ff2f 	bl	8004100 <RCCEx_PLL3_Config>
 80032a2:	4603      	mov	r3, r0
 80032a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80032a6:	e005      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	75fb      	strb	r3, [r7, #23]
      break;
 80032ac:	e002      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80032ae:	bf00      	nop
 80032b0:	e000      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80032b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032b4:	7dfb      	ldrb	r3, [r7, #23]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80032ba:	4b55      	ldr	r3, [pc, #340]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032be:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c6:	4952      	ldr	r1, [pc, #328]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	650b      	str	r3, [r1, #80]	; 0x50
 80032cc:	e001      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ce:	7dfb      	ldrb	r3, [r7, #23]
 80032d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d049      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032e8:	d030      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80032ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032ee:	d82a      	bhi.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032f4:	d02c      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80032f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032fa:	d824      	bhi.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003300:	d018      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003306:	d81e      	bhi.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800330c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003310:	d007      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003312:	e018      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003314:	4b3e      	ldr	r3, [pc, #248]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	4a3d      	ldr	r2, [pc, #244]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800331a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003320:	e017      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3304      	adds	r3, #4
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fe37 	bl	8003f9c <RCCEx_PLL2_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003332:	e00e      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3324      	adds	r3, #36	; 0x24
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fee0 	bl	8004100 <RCCEx_PLL3_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003344:	e005      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	75fb      	strb	r3, [r7, #23]
      break;
 800334a:	e002      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800334c:	bf00      	nop
 800334e:	e000      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003350:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003352:	7dfb      	ldrb	r3, [r7, #23]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10a      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003358:	4b2d      	ldr	r3, [pc, #180]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003366:	492a      	ldr	r1, [pc, #168]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003368:	4313      	orrs	r3, r2
 800336a:	658b      	str	r3, [r1, #88]	; 0x58
 800336c:	e001      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336e:	7dfb      	ldrb	r3, [r7, #23]
 8003370:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800337a:	2b00      	cmp	r3, #0
 800337c:	d04c      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003384:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003388:	d030      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800338a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800338e:	d82a      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003390:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003394:	d02c      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003396:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800339a:	d824      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800339c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033a0:	d018      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80033a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033a6:	d81e      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80033ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033b0:	d007      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80033b2:	e018      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b4:	4b16      	ldr	r3, [pc, #88]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	4a15      	ldr	r2, [pc, #84]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033c0:	e017      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fde7 	bl	8003f9c <RCCEx_PLL2_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80033d2:	e00e      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3324      	adds	r3, #36	; 0x24
 80033d8:	2100      	movs	r1, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fe90 	bl	8004100 <RCCEx_PLL3_Config>
 80033e0:	4603      	mov	r3, r0
 80033e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033e4:	e005      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	75fb      	strb	r3, [r7, #23]
      break;
 80033ea:	e002      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80033ec:	bf00      	nop
 80033ee:	e000      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80033f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10d      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003406:	4902      	ldr	r1, [pc, #8]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003408:	4313      	orrs	r3, r2
 800340a:	658b      	str	r3, [r1, #88]	; 0x58
 800340c:	e004      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800340e:	bf00      	nop
 8003410:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003414:	7dfb      	ldrb	r3, [r7, #23]
 8003416:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d032      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003428:	2b30      	cmp	r3, #48	; 0x30
 800342a:	d01c      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800342c:	2b30      	cmp	r3, #48	; 0x30
 800342e:	d817      	bhi.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003430:	2b20      	cmp	r3, #32
 8003432:	d00c      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003434:	2b20      	cmp	r3, #32
 8003436:	d813      	bhi.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d016      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800343c:	2b10      	cmp	r3, #16
 800343e:	d10f      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003440:	4baf      	ldr	r3, [pc, #700]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	4aae      	ldr	r2, [pc, #696]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800344a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800344c:	e00e      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3304      	adds	r3, #4
 8003452:	2102      	movs	r1, #2
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fda1 	bl	8003f9c <RCCEx_PLL2_Config>
 800345a:	4603      	mov	r3, r0
 800345c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800345e:	e005      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	75fb      	strb	r3, [r7, #23]
      break;
 8003464:	e002      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003466:	bf00      	nop
 8003468:	e000      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800346a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800346c:	7dfb      	ldrb	r3, [r7, #23]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003472:	4ba3      	ldr	r3, [pc, #652]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003476:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347e:	49a0      	ldr	r1, [pc, #640]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003480:	4313      	orrs	r3, r2
 8003482:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003484:	e001      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003486:	7dfb      	ldrb	r3, [r7, #23]
 8003488:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d047      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800349e:	d030      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80034a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a4:	d82a      	bhi.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80034a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034aa:	d02c      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80034ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034b0:	d824      	bhi.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80034b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b6:	d018      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80034b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034bc:	d81e      	bhi.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80034c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c6:	d007      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80034c8:	e018      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ca:	4b8d      	ldr	r3, [pc, #564]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	4a8c      	ldr	r2, [pc, #560]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034d6:	e017      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3304      	adds	r3, #4
 80034dc:	2100      	movs	r1, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fd5c 	bl	8003f9c <RCCEx_PLL2_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034e8:	e00e      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3324      	adds	r3, #36	; 0x24
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fe05 	bl	8004100 <RCCEx_PLL3_Config>
 80034f6:	4603      	mov	r3, r0
 80034f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034fa:	e005      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003500:	e002      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003502:	bf00      	nop
 8003504:	e000      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003508:	7dfb      	ldrb	r3, [r7, #23]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d109      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800350e:	4b7c      	ldr	r3, [pc, #496]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003512:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351a:	4979      	ldr	r1, [pc, #484]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800351c:	4313      	orrs	r3, r2
 800351e:	650b      	str	r3, [r1, #80]	; 0x50
 8003520:	e001      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d049      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003536:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800353a:	d02e      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800353c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003540:	d828      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003542:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003546:	d02a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003548:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800354c:	d822      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800354e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003552:	d026      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003554:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003558:	d81c      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800355a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800355e:	d010      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003564:	d816      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01d      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800356a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356e:	d111      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3304      	adds	r3, #4
 8003574:	2101      	movs	r1, #1
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fd10 	bl	8003f9c <RCCEx_PLL2_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003580:	e012      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3324      	adds	r3, #36	; 0x24
 8003586:	2101      	movs	r1, #1
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fdb9 	bl	8004100 <RCCEx_PLL3_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003592:	e009      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	75fb      	strb	r3, [r7, #23]
      break;
 8003598:	e006      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800359a:	bf00      	nop
 800359c:	e004      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800359e:	bf00      	nop
 80035a0:	e002      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80035a2:	bf00      	nop
 80035a4:	e000      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80035a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80035ae:	4b54      	ldr	r3, [pc, #336]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ba:	4951      	ldr	r1, [pc, #324]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	650b      	str	r3, [r1, #80]	; 0x50
 80035c0:	e001      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
 80035c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d04b      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035dc:	d02e      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80035de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035e2:	d828      	bhi.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e8:	d02a      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80035ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ee:	d822      	bhi.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035f4:	d026      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80035f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035fa:	d81c      	bhi.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003600:	d010      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003606:	d816      	bhi.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01d      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800360c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003610:	d111      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	2101      	movs	r1, #1
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fcbf 	bl	8003f9c <RCCEx_PLL2_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003622:	e012      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3324      	adds	r3, #36	; 0x24
 8003628:	2101      	movs	r1, #1
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fd68 	bl	8004100 <RCCEx_PLL3_Config>
 8003630:	4603      	mov	r3, r0
 8003632:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003634:	e009      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	75fb      	strb	r3, [r7, #23]
      break;
 800363a:	e006      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800363c:	bf00      	nop
 800363e:	e004      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003640:	bf00      	nop
 8003642:	e002      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003644:	bf00      	nop
 8003646:	e000      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800364a:	7dfb      	ldrb	r3, [r7, #23]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10a      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003650:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003654:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800365e:	4928      	ldr	r1, [pc, #160]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003660:	4313      	orrs	r3, r2
 8003662:	658b      	str	r3, [r1, #88]	; 0x58
 8003664:	e001      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003666:	7dfb      	ldrb	r3, [r7, #23]
 8003668:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d02f      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800367e:	d00e      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003684:	d814      	bhi.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d015      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800368a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800368e:	d10f      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	4a1a      	ldr	r2, [pc, #104]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800369a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800369c:	e00c      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3304      	adds	r3, #4
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fc79 	bl	8003f9c <RCCEx_PLL2_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80036ae:	e003      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	75fb      	strb	r3, [r7, #23]
      break;
 80036b4:	e000      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80036b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036be:	4b10      	ldr	r3, [pc, #64]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ca:	490d      	ldr	r1, [pc, #52]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	650b      	str	r3, [r1, #80]	; 0x50
 80036d0:	e001      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d033      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d81c      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80036ea:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f0:	0800372b 	.word	0x0800372b
 80036f4:	08003705 	.word	0x08003705
 80036f8:	08003713 	.word	0x08003713
 80036fc:	0800372b 	.word	0x0800372b
 8003700:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003704:	4bb8      	ldr	r3, [pc, #736]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	4ab7      	ldr	r2, [pc, #732]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800370a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003710:	e00c      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	2102      	movs	r1, #2
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fc3f 	bl	8003f9c <RCCEx_PLL2_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003722:	e003      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	75fb      	strb	r3, [r7, #23]
      break;
 8003728:	e000      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800372a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800372c:	7dfb      	ldrb	r3, [r7, #23]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003732:	4bad      	ldr	r3, [pc, #692]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003736:	f023 0203 	bic.w	r2, r3, #3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	49aa      	ldr	r1, [pc, #680]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003740:	4313      	orrs	r3, r2
 8003742:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003744:	e001      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003746:	7dfb      	ldrb	r3, [r7, #23]
 8003748:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 8086 	beq.w	8003864 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003758:	4ba4      	ldr	r3, [pc, #656]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4aa3      	ldr	r2, [pc, #652]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800375e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003762:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003764:	f7fd fd22 	bl	80011ac <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800376a:	e009      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376c:	f7fd fd1e 	bl	80011ac <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b64      	cmp	r3, #100	; 0x64
 8003778:	d902      	bls.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	75fb      	strb	r3, [r7, #23]
        break;
 800377e:	e005      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003780:	4b9a      	ldr	r3, [pc, #616]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ef      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800378c:	7dfb      	ldrb	r3, [r7, #23]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d166      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003792:	4b95      	ldr	r3, [pc, #596]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003794:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800379c:	4053      	eors	r3, r2
 800379e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d013      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037a6:	4b90      	ldr	r3, [pc, #576]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037b0:	4b8d      	ldr	r3, [pc, #564]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	4a8c      	ldr	r2, [pc, #560]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037bc:	4b8a      	ldr	r3, [pc, #552]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	4a89      	ldr	r2, [pc, #548]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80037c8:	4a87      	ldr	r2, [pc, #540]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d8:	d115      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7fd fce7 	bl	80011ac <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037e0:	e00b      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e2:	f7fd fce3 	bl	80011ac <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d902      	bls.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	75fb      	strb	r3, [r7, #23]
            break;
 80037f8:	e005      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037fa:	4b7b      	ldr	r3, [pc, #492]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0ed      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003806:	7dfb      	ldrb	r3, [r7, #23]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d126      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800381a:	d10d      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800381c:	4b72      	ldr	r3, [pc, #456]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800382a:	0919      	lsrs	r1, r3, #4
 800382c:	4b70      	ldr	r3, [pc, #448]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800382e:	400b      	ands	r3, r1
 8003830:	496d      	ldr	r1, [pc, #436]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	610b      	str	r3, [r1, #16]
 8003836:	e005      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003838:	4b6b      	ldr	r3, [pc, #428]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	4a6a      	ldr	r2, [pc, #424]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800383e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003842:	6113      	str	r3, [r2, #16]
 8003844:	4b68      	ldr	r3, [pc, #416]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003846:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800384e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003852:	4965      	ldr	r1, [pc, #404]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003854:	4313      	orrs	r3, r2
 8003856:	670b      	str	r3, [r1, #112]	; 0x70
 8003858:	e004      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800385a:	7dfb      	ldrb	r3, [r7, #23]
 800385c:	75bb      	strb	r3, [r7, #22]
 800385e:	e001      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003860:	7dfb      	ldrb	r3, [r7, #23]
 8003862:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d07e      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003874:	2b28      	cmp	r3, #40	; 0x28
 8003876:	d867      	bhi.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003878:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	0800394f 	.word	0x0800394f
 8003884:	08003949 	.word	0x08003949
 8003888:	08003949 	.word	0x08003949
 800388c:	08003949 	.word	0x08003949
 8003890:	08003949 	.word	0x08003949
 8003894:	08003949 	.word	0x08003949
 8003898:	08003949 	.word	0x08003949
 800389c:	08003949 	.word	0x08003949
 80038a0:	08003925 	.word	0x08003925
 80038a4:	08003949 	.word	0x08003949
 80038a8:	08003949 	.word	0x08003949
 80038ac:	08003949 	.word	0x08003949
 80038b0:	08003949 	.word	0x08003949
 80038b4:	08003949 	.word	0x08003949
 80038b8:	08003949 	.word	0x08003949
 80038bc:	08003949 	.word	0x08003949
 80038c0:	08003937 	.word	0x08003937
 80038c4:	08003949 	.word	0x08003949
 80038c8:	08003949 	.word	0x08003949
 80038cc:	08003949 	.word	0x08003949
 80038d0:	08003949 	.word	0x08003949
 80038d4:	08003949 	.word	0x08003949
 80038d8:	08003949 	.word	0x08003949
 80038dc:	08003949 	.word	0x08003949
 80038e0:	0800394f 	.word	0x0800394f
 80038e4:	08003949 	.word	0x08003949
 80038e8:	08003949 	.word	0x08003949
 80038ec:	08003949 	.word	0x08003949
 80038f0:	08003949 	.word	0x08003949
 80038f4:	08003949 	.word	0x08003949
 80038f8:	08003949 	.word	0x08003949
 80038fc:	08003949 	.word	0x08003949
 8003900:	0800394f 	.word	0x0800394f
 8003904:	08003949 	.word	0x08003949
 8003908:	08003949 	.word	0x08003949
 800390c:	08003949 	.word	0x08003949
 8003910:	08003949 	.word	0x08003949
 8003914:	08003949 	.word	0x08003949
 8003918:	08003949 	.word	0x08003949
 800391c:	08003949 	.word	0x08003949
 8003920:	0800394f 	.word	0x0800394f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3304      	adds	r3, #4
 8003928:	2101      	movs	r1, #1
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fb36 	bl	8003f9c <RCCEx_PLL2_Config>
 8003930:	4603      	mov	r3, r0
 8003932:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003934:	e00c      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3324      	adds	r3, #36	; 0x24
 800393a:	2101      	movs	r1, #1
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fbdf 	bl	8004100 <RCCEx_PLL3_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003946:	e003      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	75fb      	strb	r3, [r7, #23]
      break;
 800394c:	e000      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800394e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003956:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003962:	4921      	ldr	r1, [pc, #132]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003964:	4313      	orrs	r3, r2
 8003966:	654b      	str	r3, [r1, #84]	; 0x54
 8003968:	e001      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396a:	7dfb      	ldrb	r3, [r7, #23]
 800396c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d03e      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397e:	2b05      	cmp	r3, #5
 8003980:	d820      	bhi.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003982:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003988:	080039cb 	.word	0x080039cb
 800398c:	080039a1 	.word	0x080039a1
 8003990:	080039b3 	.word	0x080039b3
 8003994:	080039cb 	.word	0x080039cb
 8003998:	080039cb 	.word	0x080039cb
 800399c:	080039cb 	.word	0x080039cb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	2101      	movs	r1, #1
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 faf8 	bl	8003f9c <RCCEx_PLL2_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80039b0:	e00c      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3324      	adds	r3, #36	; 0x24
 80039b6:	2101      	movs	r1, #1
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fba1 	bl	8004100 <RCCEx_PLL3_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80039c2:	e003      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	75fb      	strb	r3, [r7, #23]
      break;
 80039c8:	e000      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80039ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d110      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	f023 0207 	bic.w	r2, r3, #7
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039de:	4902      	ldr	r1, [pc, #8]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	654b      	str	r3, [r1, #84]	; 0x54
 80039e4:	e008      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80039e6:	bf00      	nop
 80039e8:	58024400 	.word	0x58024400
 80039ec:	58024800 	.word	0x58024800
 80039f0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
 80039f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d039      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	2b05      	cmp	r3, #5
 8003a0c:	d820      	bhi.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003a0e:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a14:	08003a57 	.word	0x08003a57
 8003a18:	08003a2d 	.word	0x08003a2d
 8003a1c:	08003a3f 	.word	0x08003a3f
 8003a20:	08003a57 	.word	0x08003a57
 8003a24:	08003a57 	.word	0x08003a57
 8003a28:	08003a57 	.word	0x08003a57
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	2101      	movs	r1, #1
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fab2 	bl	8003f9c <RCCEx_PLL2_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a3c:	e00c      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3324      	adds	r3, #36	; 0x24
 8003a42:	2101      	movs	r1, #1
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fb5b 	bl	8004100 <RCCEx_PLL3_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a4e:	e003      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	75fb      	strb	r3, [r7, #23]
      break;
 8003a54:	e000      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10a      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a5e:	4bb7      	ldr	r3, [pc, #732]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a62:	f023 0207 	bic.w	r2, r3, #7
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6c:	49b3      	ldr	r1, [pc, #716]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	658b      	str	r3, [r1, #88]	; 0x58
 8003a72:	e001      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
 8003a76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d04b      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a8e:	d02e      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a94:	d828      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9a:	d02a      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa0:	d822      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003aa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003aa6:	d026      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003aa8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003aac:	d81c      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003aae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ab2:	d010      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ab8:	d816      	bhi.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d01d      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003abe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ac2:	d111      	bne.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fa66 	bl	8003f9c <RCCEx_PLL2_Config>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ad4:	e012      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3324      	adds	r3, #36	; 0x24
 8003ada:	2102      	movs	r1, #2
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fb0f 	bl	8004100 <RCCEx_PLL3_Config>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ae6:	e009      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	75fb      	strb	r3, [r7, #23]
      break;
 8003aec:	e006      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003aee:	bf00      	nop
 8003af0:	e004      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003af2:	bf00      	nop
 8003af4:	e002      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003af6:	bf00      	nop
 8003af8:	e000      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003afa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10a      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b02:	4b8e      	ldr	r3, [pc, #568]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b06:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b10:	498a      	ldr	r1, [pc, #552]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	654b      	str	r3, [r1, #84]	; 0x54
 8003b16:	e001      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
 8003b1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d04b      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b32:	d02e      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003b34:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b38:	d828      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3e:	d02a      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b44:	d822      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b4a:	d026      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003b4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b50:	d81c      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b56:	d010      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b5c:	d816      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01d      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b66:	d111      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fa14 	bl	8003f9c <RCCEx_PLL2_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b78:	e012      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3324      	adds	r3, #36	; 0x24
 8003b7e:	2102      	movs	r1, #2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 fabd 	bl	8004100 <RCCEx_PLL3_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b8a:	e009      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b90:	e006      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b92:	bf00      	nop
 8003b94:	e004      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b96:	bf00      	nop
 8003b98:	e002      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b9a:	bf00      	nop
 8003b9c:	e000      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ba0:	7dfb      	ldrb	r3, [r7, #23]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10a      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ba6:	4b65      	ldr	r3, [pc, #404]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003baa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bb4:	4961      	ldr	r1, [pc, #388]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	658b      	str	r3, [r1, #88]	; 0x58
 8003bba:	e001      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bbc:	7dfb      	ldrb	r3, [r7, #23]
 8003bbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d04b      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bd2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003bd6:	d02e      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003bd8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003bdc:	d828      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be2:	d02a      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be8:	d822      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003bea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003bee:	d026      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003bf0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003bf4:	d81c      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003bf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bfa:	d010      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c00:	d816      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d01d      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c0a:	d111      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f9c2 	bl	8003f9c <RCCEx_PLL2_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c1c:	e012      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3324      	adds	r3, #36	; 0x24
 8003c22:	2102      	movs	r1, #2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fa6b 	bl	8004100 <RCCEx_PLL3_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c2e:	e009      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	75fb      	strb	r3, [r7, #23]
      break;
 8003c34:	e006      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c36:	bf00      	nop
 8003c38:	e004      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e002      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c3e:	bf00      	nop
 8003c40:	e000      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10a      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003c4a:	4b3c      	ldr	r3, [pc, #240]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c58:	4938      	ldr	r1, [pc, #224]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	658b      	str	r3, [r1, #88]	; 0x58
 8003c5e:	e001      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
 8003c62:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7a:	d10a      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3324      	adds	r3, #36	; 0x24
 8003c80:	2102      	movs	r1, #2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 fa3c 	bl	8004100 <RCCEx_PLL3_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c92:	4b2a      	ldr	r3, [pc, #168]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca0:	4926      	ldr	r1, [pc, #152]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d01a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cbc:	d10a      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3324      	adds	r3, #36	; 0x24
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fa1b 	bl	8004100 <RCCEx_PLL3_Config>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cd4:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce2:	4916      	ldr	r1, [pc, #88]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d036      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cfe:	d01f      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003d00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d04:	d817      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d0e:	d009      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003d10:	e011      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3304      	adds	r3, #4
 8003d16:	2100      	movs	r1, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 f93f 	bl	8003f9c <RCCEx_PLL2_Config>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d22:	e00e      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3324      	adds	r3, #36	; 0x24
 8003d28:	2102      	movs	r1, #2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 f9e8 	bl	8004100 <RCCEx_PLL3_Config>
 8003d30:	4603      	mov	r3, r0
 8003d32:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d34:	e005      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	75fb      	strb	r3, [r7, #23]
      break;
 8003d3a:	e002      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003d3c:	58024400 	.word	0x58024400
      break;
 8003d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d48:	4b93      	ldr	r3, [pc, #588]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d56:	4990      	ldr	r1, [pc, #576]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	658b      	str	r3, [r1, #88]	; 0x58
 8003d5c:	e001      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
 8003d60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d033      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d78:	d01c      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003d7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d7e:	d816      	bhi.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003d80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d84:	d003      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003d86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d8a:	d007      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003d8c:	e00f      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d8e:	4b82      	ldr	r3, [pc, #520]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	4a81      	ldr	r2, [pc, #516]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003d9a:	e00c      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3324      	adds	r3, #36	; 0x24
 8003da0:	2101      	movs	r1, #1
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f9ac 	bl	8004100 <RCCEx_PLL3_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003dac:	e003      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	75fb      	strb	r3, [r7, #23]
      break;
 8003db2:	e000      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10a      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dbc:	4b76      	ldr	r3, [pc, #472]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dca:	4973      	ldr	r1, [pc, #460]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	654b      	str	r3, [r1, #84]	; 0x54
 8003dd0:	e001      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd2:	7dfb      	ldrb	r3, [r7, #23]
 8003dd4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d029      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8003dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dee:	d007      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003df0:	e00f      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df2:	4b69      	ldr	r3, [pc, #420]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	4a68      	ldr	r2, [pc, #416]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3304      	adds	r3, #4
 8003e04:	2102      	movs	r1, #2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 f8c8 	bl	8003f9c <RCCEx_PLL2_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003e10:	e002      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	75fb      	strb	r3, [r7, #23]
      break;
 8003e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e1e:	4b5e      	ldr	r3, [pc, #376]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2a:	495b      	ldr	r1, [pc, #364]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e30:	e001      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
 8003e34:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	3324      	adds	r3, #36	; 0x24
 8003e46:	2102      	movs	r1, #2
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 f959 	bl	8004100 <RCCEx_PLL3_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d030      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e6c:	d017      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e72:	d811      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e78:	d013      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7e:	d80b      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d010      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e88:	d106      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e8a:	4b43      	ldr	r3, [pc, #268]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	4a42      	ldr	r2, [pc, #264]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003e96:	e007      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e9c:	e004      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003e9e:	bf00      	nop
 8003ea0:	e002      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e000      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ea8:	7dfb      	ldrb	r3, [r7, #23]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d109      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003eae:	4b3a      	ldr	r3, [pc, #232]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eba:	4937      	ldr	r1, [pc, #220]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	654b      	str	r3, [r1, #84]	; 0x54
 8003ec0:	e001      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec2:	7dfb      	ldrb	r3, [r7, #23]
 8003ec4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d008      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ed2:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	492e      	ldr	r1, [pc, #184]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d009      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003ef0:	4b29      	ldr	r3, [pc, #164]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003efe:	4926      	ldr	r1, [pc, #152]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f10:	4b21      	ldr	r3, [pc, #132]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f1c:	491e      	ldr	r1, [pc, #120]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00d      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f2e:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	4a19      	ldr	r2, [pc, #100]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f38:	6113      	str	r3, [r2, #16]
 8003f3a:	4b17      	ldr	r3, [pc, #92]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003f44:	4914      	ldr	r1, [pc, #80]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	da08      	bge.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f52:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5e:	490e      	ldr	r1, [pc, #56]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d009      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f70:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7e:	4906      	ldr	r1, [pc, #24]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003f84:	7dbb      	ldrb	r3, [r7, #22]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	e000      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	58024400 	.word	0x58024400

08003f9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003faa:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d101      	bne.n	8003fba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e099      	b.n	80040ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003fba:	4b4f      	ldr	r3, [pc, #316]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a4e      	ldr	r2, [pc, #312]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8003fc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc6:	f7fd f8f1 	bl	80011ac <HAL_GetTick>
 8003fca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fcc:	e008      	b.n	8003fe0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003fce:	f7fd f8ed 	bl	80011ac <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e086      	b.n	80040ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003fe0:	4b45      	ldr	r3, [pc, #276]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1f0      	bne.n	8003fce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003fec:	4b42      	ldr	r3, [pc, #264]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	031b      	lsls	r3, r3, #12
 8003ffa:	493f      	ldr	r1, [pc, #252]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	628b      	str	r3, [r1, #40]	; 0x28
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	3b01      	subs	r3, #1
 8004006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	3b01      	subs	r3, #1
 8004010:	025b      	lsls	r3, r3, #9
 8004012:	b29b      	uxth	r3, r3
 8004014:	431a      	orrs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	3b01      	subs	r3, #1
 800401c:	041b      	lsls	r3, r3, #16
 800401e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	3b01      	subs	r3, #1
 800402a:	061b      	lsls	r3, r3, #24
 800402c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004030:	4931      	ldr	r1, [pc, #196]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004032:	4313      	orrs	r3, r2
 8004034:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004036:	4b30      	ldr	r3, [pc, #192]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	492d      	ldr	r1, [pc, #180]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004044:	4313      	orrs	r3, r2
 8004046:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004048:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	f023 0220 	bic.w	r2, r3, #32
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	4928      	ldr	r1, [pc, #160]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004056:	4313      	orrs	r3, r2
 8004058:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800405a:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	4a26      	ldr	r2, [pc, #152]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004060:	f023 0310 	bic.w	r3, r3, #16
 8004064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004066:	4b24      	ldr	r3, [pc, #144]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004068:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800406a:	4b24      	ldr	r3, [pc, #144]	; (80040fc <RCCEx_PLL2_Config+0x160>)
 800406c:	4013      	ands	r3, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	69d2      	ldr	r2, [r2, #28]
 8004072:	00d2      	lsls	r2, r2, #3
 8004074:	4920      	ldr	r1, [pc, #128]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004076:	4313      	orrs	r3, r2
 8004078:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800407a:	4b1f      	ldr	r3, [pc, #124]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	4a1e      	ldr	r2, [pc, #120]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004080:	f043 0310 	orr.w	r3, r3, #16
 8004084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800408c:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	4a19      	ldr	r2, [pc, #100]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 8004092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004096:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004098:	e00f      	b.n	80040ba <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d106      	bne.n	80040ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80040a0:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040ac:	e005      	b.n	80040ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	4a11      	ldr	r2, [pc, #68]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80040ba:	4b0f      	ldr	r3, [pc, #60]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a0e      	ldr	r2, [pc, #56]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c6:	f7fd f871 	bl	80011ac <HAL_GetTick>
 80040ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040cc:	e008      	b.n	80040e0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80040ce:	f7fd f86d 	bl	80011ac <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e006      	b.n	80040ee <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <RCCEx_PLL2_Config+0x15c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	58024400 	.word	0x58024400
 80040fc:	ffff0007 	.word	0xffff0007

08004100 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800410e:	4b53      	ldr	r3, [pc, #332]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	2b03      	cmp	r3, #3
 8004118:	d101      	bne.n	800411e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e099      	b.n	8004252 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800411e:	4b4f      	ldr	r3, [pc, #316]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a4e      	ldr	r2, [pc, #312]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800412a:	f7fd f83f 	bl	80011ac <HAL_GetTick>
 800412e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004130:	e008      	b.n	8004144 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004132:	f7fd f83b 	bl	80011ac <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e086      	b.n	8004252 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004144:	4b45      	ldr	r3, [pc, #276]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f0      	bne.n	8004132 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004150:	4b42      	ldr	r3, [pc, #264]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	051b      	lsls	r3, r3, #20
 800415e:	493f      	ldr	r1, [pc, #252]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004160:	4313      	orrs	r3, r2
 8004162:	628b      	str	r3, [r1, #40]	; 0x28
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	3b01      	subs	r3, #1
 800416a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	3b01      	subs	r3, #1
 8004174:	025b      	lsls	r3, r3, #9
 8004176:	b29b      	uxth	r3, r3
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	3b01      	subs	r3, #1
 8004180:	041b      	lsls	r3, r3, #16
 8004182:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	3b01      	subs	r3, #1
 800418e:	061b      	lsls	r3, r3, #24
 8004190:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004194:	4931      	ldr	r1, [pc, #196]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004196:	4313      	orrs	r3, r2
 8004198:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800419a:	4b30      	ldr	r3, [pc, #192]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	492d      	ldr	r1, [pc, #180]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80041ac:	4b2b      	ldr	r3, [pc, #172]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	4928      	ldr	r1, [pc, #160]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80041be:	4b27      	ldr	r3, [pc, #156]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	4a26      	ldr	r2, [pc, #152]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80041ca:	4b24      	ldr	r3, [pc, #144]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ce:	4b24      	ldr	r3, [pc, #144]	; (8004260 <RCCEx_PLL3_Config+0x160>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	69d2      	ldr	r2, [r2, #28]
 80041d6:	00d2      	lsls	r2, r2, #3
 80041d8:	4920      	ldr	r1, [pc, #128]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80041de:	4b1f      	ldr	r3, [pc, #124]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	4a1e      	ldr	r2, [pc, #120]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d106      	bne.n	80041fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80041f0:	4b1a      	ldr	r3, [pc, #104]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	4a19      	ldr	r2, [pc, #100]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 80041f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041fc:	e00f      	b.n	800421e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d106      	bne.n	8004212 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004204:	4b15      	ldr	r3, [pc, #84]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	4a14      	ldr	r2, [pc, #80]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 800420a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800420e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004210:	e005      	b.n	800421e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004212:	4b12      	ldr	r3, [pc, #72]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	4a11      	ldr	r2, [pc, #68]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004218:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800421c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800421e:	4b0f      	ldr	r3, [pc, #60]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a0e      	ldr	r2, [pc, #56]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800422a:	f7fc ffbf 	bl	80011ac <HAL_GetTick>
 800422e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004230:	e008      	b.n	8004244 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004232:	f7fc ffbb 	bl	80011ac <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e006      	b.n	8004252 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <RCCEx_PLL3_Config+0x15c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f0      	beq.n	8004232 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004250:	7bfb      	ldrb	r3, [r7, #15]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	58024400 	.word	0x58024400
 8004260:	ffff0007 	.word	0xffff0007

08004264 <__libc_init_array>:
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	4d0d      	ldr	r5, [pc, #52]	; (800429c <__libc_init_array+0x38>)
 8004268:	4c0d      	ldr	r4, [pc, #52]	; (80042a0 <__libc_init_array+0x3c>)
 800426a:	1b64      	subs	r4, r4, r5
 800426c:	10a4      	asrs	r4, r4, #2
 800426e:	2600      	movs	r6, #0
 8004270:	42a6      	cmp	r6, r4
 8004272:	d109      	bne.n	8004288 <__libc_init_array+0x24>
 8004274:	4d0b      	ldr	r5, [pc, #44]	; (80042a4 <__libc_init_array+0x40>)
 8004276:	4c0c      	ldr	r4, [pc, #48]	; (80042a8 <__libc_init_array+0x44>)
 8004278:	f000 f820 	bl	80042bc <_init>
 800427c:	1b64      	subs	r4, r4, r5
 800427e:	10a4      	asrs	r4, r4, #2
 8004280:	2600      	movs	r6, #0
 8004282:	42a6      	cmp	r6, r4
 8004284:	d105      	bne.n	8004292 <__libc_init_array+0x2e>
 8004286:	bd70      	pop	{r4, r5, r6, pc}
 8004288:	f855 3b04 	ldr.w	r3, [r5], #4
 800428c:	4798      	blx	r3
 800428e:	3601      	adds	r6, #1
 8004290:	e7ee      	b.n	8004270 <__libc_init_array+0xc>
 8004292:	f855 3b04 	ldr.w	r3, [r5], #4
 8004296:	4798      	blx	r3
 8004298:	3601      	adds	r6, #1
 800429a:	e7f2      	b.n	8004282 <__libc_init_array+0x1e>
 800429c:	080042e4 	.word	0x080042e4
 80042a0:	080042e4 	.word	0x080042e4
 80042a4:	080042e4 	.word	0x080042e4
 80042a8:	080042e8 	.word	0x080042e8

080042ac <memset>:
 80042ac:	4402      	add	r2, r0
 80042ae:	4603      	mov	r3, r0
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d100      	bne.n	80042b6 <memset+0xa>
 80042b4:	4770      	bx	lr
 80042b6:	f803 1b01 	strb.w	r1, [r3], #1
 80042ba:	e7f9      	b.n	80042b0 <memset+0x4>

080042bc <_init>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	bf00      	nop
 80042c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c2:	bc08      	pop	{r3}
 80042c4:	469e      	mov	lr, r3
 80042c6:	4770      	bx	lr

080042c8 <_fini>:
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ca:	bf00      	nop
 80042cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ce:	bc08      	pop	{r3}
 80042d0:	469e      	mov	lr, r3
 80042d2:	4770      	bx	lr
